ARM GAS  /tmp/cck8VBJ0.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32l4xx_hal_can.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
  22              		.align	2
  23              		.weak	HAL_CAN_MspInit
  24              		.thumb
  25              		.thumb_func
  27              	HAL_CAN_MspInit:
  28              	.LFB134:
  29              		.file 1 "Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c"
   1:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
   2:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ******************************************************************************
   3:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @file    stm32l4xx_hal_can.c
   4:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @author  MCD Application Team
   5:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Configuration functions
  10:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Control functions
  11:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Interrupts management
  12:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Callbacks functions
  13:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
  15:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   @verbatim
  16:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
  17:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                         ##### How to use this driver #####
  18:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
  19:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
  20:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_MspInit():
  22:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****          (++) Configure CAN pins
  24:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
ARM GAS  /tmp/cck8VBJ0.s 			page 2


  30:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
  31:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  32:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  34:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  35:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           functions:
  37:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  39:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           messages.
  42:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  43:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           can be used:
  45:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  message.
  47:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  message.
  49:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  mailboxes.
  51:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  in a Tx mailbox.
  53:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  56:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           stored in the Rx Fifo.
  60:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  61:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  63:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  65:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  66:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       *** Polling mode operation ***
  67:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       ==============================
  68:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
  69:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Reception:
  70:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  until at least one message is received.
  72:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  74:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Transmission:
  75:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  77:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Then request transmission of a message using
  78:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  80:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  81:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       *** Interrupt mode operation ***
  82:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       ================================
  83:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
  84:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
ARM GAS  /tmp/cck8VBJ0.s 			page 3


  87:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
  88:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  89:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
  91:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  92:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           here.
  97:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  read, the notification can be activated again.
 103:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 104:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 105:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       *** Sleep mode ***
 106:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       ==================
 107:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
 108:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           be completed.
 112:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 113:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           will be entered.
 115:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 116:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 123:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (#) The wake-up from sleep mode can be trigged by two ways:
 124:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 129:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *** Callback registration ***
 130:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   =============================================
 131:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 132:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   The compilation define  USE_HAL_CAN_REGISTER_CALLBACKS when set to 1
 133:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   allows the user to configure dynamically the driver callbacks.
 134:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Use Function @ref HAL_CAN_RegisterCallback() to register an interrupt callback.
 135:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 136:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Function @ref HAL_CAN_RegisterCallback() allows to register following callbacks:
 137:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 138:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 139:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 140:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 141:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 142:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 143:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
ARM GAS  /tmp/cck8VBJ0.s 			page 4


 144:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 145:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 146:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 147:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 148:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 149:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 150:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 151:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 152:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 153:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   and a pointer to the user callback function.
 154:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 155:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Use function @ref HAL_CAN_UnRegisterCallback() to reset a callback to the default
 156:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   weak function.
 157:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   @ref HAL_CAN_UnRegisterCallback takes as parameters the HAL peripheral handle,
 158:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   and the Callback ID.
 159:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   This function allows to reset following callbacks:
 160:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 161:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 162:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 163:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 164:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 165:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 166:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 167:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 168:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 169:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 170:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 171:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 172:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 173:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 174:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 175:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 176:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   By default, after the @ref HAL_CAN_Init() and when the state is HAL_CAN_STATE_RESET,
 177:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   all callbacks are set to the corresponding weak functions:
 178:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   example @ref HAL_CAN_ErrorCallback().
 179:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Exception done for MspInit and MspDeInit functions that are
 180:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   reset to the legacy weak function in the @ref HAL_CAN_Init()/ @ref HAL_CAN_DeInit() only when
 181:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   these callbacks are null (not registered beforehand).
 182:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if not, MspInit or MspDeInit are not null, the @ref HAL_CAN_Init()/ @ref HAL_CAN_DeInit()
 183:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 184:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 185:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Callbacks can be registered/unregistered in HAL_CAN_STATE_READY state only.
 186:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 187:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   in HAL_CAN_STATE_READY or HAL_CAN_STATE_RESET state,
 188:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 189:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   In that case first register the MspInit/MspDeInit user callbacks
 190:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   using @ref HAL_CAN_RegisterCallback() before calling @ref HAL_CAN_DeInit()
 191:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   or @ref HAL_CAN_Init() function.
 192:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 193:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   When The compilation define USE_HAL_CAN_REGISTER_CALLBACKS is set to 0 or
 194:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   not defined, the callback registration feature is not available and all callbacks
 195:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   are set to the corresponding weak functions.
 196:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 197:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   @endverbatim
 198:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ******************************************************************************
 199:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @attention
 200:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
ARM GAS  /tmp/cck8VBJ0.s 			page 5


 201:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 202:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * All rights reserved.</center></h2>
 203:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
 204:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 205:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * the "License"; You may not use this file except in compliance with the
 206:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * License. You may obtain a copy of the License at:
 207:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *                        opensource.org/licenses/BSD-3-Clause
 208:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *
 209:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ******************************************************************************
 210:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 211:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 212:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 213:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #include "stm32l4xx_hal.h"
 214:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 215:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @addtogroup STM32L4xx_HAL_Driver
 216:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 217:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 218:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 219:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if defined(CAN1)
 220:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 221:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN CAN
 222:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief CAN driver modules
 223:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 224:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 225:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 226:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 227:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 228:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 229:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 230:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif
 231:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 232:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 233:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 234:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 235:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 236:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 237:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 238:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 239:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
 240:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 241:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 242:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 243:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 244:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 245:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 246:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 247:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 248:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 249:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 250:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 251:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 252:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *
 253:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
 254:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 255:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 256:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 257:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]  This section provides functions allowing to:
ARM GAS  /tmp/cck8VBJ0.s 			page 6


 258:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 259:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 260:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 261:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 262:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 263:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
 264:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 265:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 266:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 267:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 268:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 269:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 270:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 271:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 272:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
 273:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 274:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 275:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 276:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tickstart;
 277:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 278:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check CAN handle */
 279:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan == NULL)
 280:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 281:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 282:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 283:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 284:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check the parameters */
 285:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 286:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 287:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 288:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 289:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 290:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 291:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 292:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 293:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 294:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 295:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 296:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 297:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 298:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 299:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 300:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 301:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Reset callbacks to legacy functions */
 302:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0M
 303:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0F
 304:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1M
 305:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1F
 306:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbo
 307:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbo
 308:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbo
 309:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbo
 310:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbo
 311:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbo
 312:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCal
 313:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFr
 314:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCal
ARM GAS  /tmp/cck8VBJ0.s 			page 7


 315:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 316:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (hcan->MspInitCallback == NULL)
 317:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 318:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 319:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 320:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 321:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 322:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->MspInitCallback(hcan);
 323:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 324:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 325:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
 326:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 327:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 328:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 329:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 330:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 331:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 332:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 333:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Exit from sleep mode */
 334:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 335:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 336:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Get tick */
 337:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   tickstart = HAL_GetTick();
 338:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 339:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 341:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 342:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 343:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 344:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Update error code */
 345:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 346:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 347:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Change CAN state */
 348:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 349:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 350:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       return HAL_ERROR;
 351:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 352:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 353:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 354:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Request initialisation */
 355:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 356:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 357:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Get tick */
 358:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   tickstart = HAL_GetTick();
 359:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 360:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Wait initialisation acknowledge */
 361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 362:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 363:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 364:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 365:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Update error code */
 366:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 367:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 368:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Change CAN state */
 369:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 370:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 371:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       return HAL_ERROR;
ARM GAS  /tmp/cck8VBJ0.s 			page 8


 372:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 373:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 374:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 375:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the time triggered communication mode */
 376:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 377:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 378:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 379:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 380:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 381:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 382:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 383:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 384:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 385:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the automatic bus-off management */
 386:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 387:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 388:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 389:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 390:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 391:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 392:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 393:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 394:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 395:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the automatic wake-up mode */
 396:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 397:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 398:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 399:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 400:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 401:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 402:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 403:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 404:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 405:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the automatic retransmission */
 406:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 407:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 408:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 409:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 410:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 411:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 412:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 413:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 414:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 415:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 416:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 417:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 418:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 419:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 420:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 421:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 422:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 423:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 424:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 425:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the transmit FIFO priority */
 426:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 427:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 428:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
ARM GAS  /tmp/cck8VBJ0.s 			page 9


 429:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 430:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 431:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 432:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 433:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 434:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 435:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Set the bit timing register */
 436:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 437:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 438:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 439:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 440:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 441:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 442:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Initialize the error code */
 443:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 444:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 445:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Initialize the CAN state */
 446:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 447:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 448:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return function status */
 449:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return HAL_OK;
 450:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 451:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 452:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 453:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 454:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         reset values.
 455:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 456:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 457:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
 458:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 459:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 460:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 461:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check CAN handle */
 462:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan == NULL)
 463:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 464:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 465:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 466:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 467:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check the parameters */
 468:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 469:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 470:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Stop the CAN module */
 471:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   (void)HAL_CAN_Stop(hcan);
 472:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 473:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 474:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->MspDeInitCallback == NULL)
 475:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 476:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->MspDeInitCallback = HAL_CAN_MspDeInit; /* Legacy weak MspDeInit */
 477:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 478:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 479:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 480:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->MspDeInitCallback(hcan);
 481:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 482:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
 483:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 484:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 485:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
ARM GAS  /tmp/cck8VBJ0.s 			page 10


 486:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 487:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Reset the CAN peripheral */
 488:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 489:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 490:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 491:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 492:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 493:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Change CAN state */
 494:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 495:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 496:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return function status */
 497:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return HAL_OK;
 498:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 499:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 500:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 501:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 502:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 503:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 504:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
 505:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 506:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 507:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
  30              		.loc 1 507 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.LVL0:
  36 0000 7047     		bx	lr
  37              		.cfi_endproc
  38              	.LFE134:
  40 0002 00BF     		.section	.text.HAL_CAN_Init,"ax",%progbits
  41              		.align	2
  42              		.global	HAL_CAN_Init
  43              		.thumb
  44              		.thumb_func
  46              	HAL_CAN_Init:
  47              	.LFB132:
 275:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tickstart;
  48              		.loc 1 275 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              	.LVL1:
 279:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
  53              		.loc 1 279 0
  54 0000 0028     		cmp	r0, #0
  55 0002 00F0A480 		beq	.L21
 275:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tickstart;
  56              		.loc 1 275 0
  57 0006 38B5     		push	{r3, r4, r5, lr}
  58              	.LCFI0:
  59              		.cfi_def_cfa_offset 16
  60              		.cfi_offset 3, -16
  61              		.cfi_offset 4, -12
  62              		.cfi_offset 5, -8
  63              		.cfi_offset 14, -4
ARM GAS  /tmp/cck8VBJ0.s 			page 11


  64 0008 0446     		mov	r4, r0
 326:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
  65              		.loc 1 326 0
  66 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
  67 000e 13F0FF0F 		tst	r3, #255
  68 0012 01D1     		bne	.L4
 329:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
  69              		.loc 1 329 0
  70 0014 FFF7FEFF 		bl	HAL_CAN_MspInit
  71              	.LVL2:
  72              	.L4:
 334:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  73              		.loc 1 334 0
  74 0018 2268     		ldr	r2, [r4]
  75 001a 1368     		ldr	r3, [r2]
  76 001c 23F00203 		bic	r3, r3, #2
  77 0020 1360     		str	r3, [r2]
 337:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  78              		.loc 1 337 0
  79 0022 FFF7FEFF 		bl	HAL_GetTick
  80              	.LVL3:
  81 0026 0546     		mov	r5, r0
  82              	.LVL4:
 340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
  83              		.loc 1 340 0
  84 0028 0DE0     		b	.L5
  85              	.LVL5:
  86              	.L6:
 342:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
  87              		.loc 1 342 0
  88 002a FFF7FEFF 		bl	HAL_GetTick
  89              	.LVL6:
  90 002e 401B     		subs	r0, r0, r5
  91 0030 0A28     		cmp	r0, #10
  92 0032 08D9     		bls	.L5
 345:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  93              		.loc 1 345 0
  94 0034 636A     		ldr	r3, [r4, #36]
  95 0036 43F40033 		orr	r3, r3, #131072
  96 003a 6362     		str	r3, [r4, #36]
 348:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
  97              		.loc 1 348 0
  98 003c 0523     		movs	r3, #5
  99 003e 84F82030 		strb	r3, [r4, #32]
 350:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 100              		.loc 1 350 0
 101 0042 0120     		movs	r0, #1
 102 0044 38BD     		pop	{r3, r4, r5, pc}
 103              	.LVL7:
 104              	.L5:
 340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 105              		.loc 1 340 0
 106 0046 2368     		ldr	r3, [r4]
 107 0048 5A68     		ldr	r2, [r3, #4]
 108 004a 12F0020F 		tst	r2, #2
 109 004e ECD1     		bne	.L6
 355:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/cck8VBJ0.s 			page 12


 110              		.loc 1 355 0
 111 0050 1A68     		ldr	r2, [r3]
 112 0052 42F00102 		orr	r2, r2, #1
 113 0056 1A60     		str	r2, [r3]
 358:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 114              		.loc 1 358 0
 115 0058 FFF7FEFF 		bl	HAL_GetTick
 116              	.LVL8:
 117 005c 0546     		mov	r5, r0
 118              	.LVL9:
 361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 119              		.loc 1 361 0
 120 005e 0DE0     		b	.L7
 121              	.LVL10:
 122              	.L8:
 363:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 123              		.loc 1 363 0
 124 0060 FFF7FEFF 		bl	HAL_GetTick
 125              	.LVL11:
 126 0064 401B     		subs	r0, r0, r5
 127 0066 0A28     		cmp	r0, #10
 128 0068 08D9     		bls	.L7
 366:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 129              		.loc 1 366 0
 130 006a 636A     		ldr	r3, [r4, #36]
 131 006c 43F40033 		orr	r3, r3, #131072
 132 0070 6362     		str	r3, [r4, #36]
 369:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 133              		.loc 1 369 0
 134 0072 0523     		movs	r3, #5
 135 0074 84F82030 		strb	r3, [r4, #32]
 371:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 136              		.loc 1 371 0
 137 0078 0120     		movs	r0, #1
 138 007a 38BD     		pop	{r3, r4, r5, pc}
 139              	.LVL12:
 140              	.L7:
 361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 141              		.loc 1 361 0
 142 007c 2368     		ldr	r3, [r4]
 143 007e 5A68     		ldr	r2, [r3, #4]
 144 0080 12F0010F 		tst	r2, #1
 145 0084 ECD0     		beq	.L8
 376:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 146              		.loc 1 376 0
 147 0086 227E     		ldrb	r2, [r4, #24]	@ zero_extendqisi2
 148 0088 012A     		cmp	r2, #1
 149 008a 04D1     		bne	.L9
 378:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 150              		.loc 1 378 0
 151 008c 1A68     		ldr	r2, [r3]
 152 008e 42F08002 		orr	r2, r2, #128
 153 0092 1A60     		str	r2, [r3]
 154 0094 03E0     		b	.L10
 155              	.L9:
 382:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 156              		.loc 1 382 0
ARM GAS  /tmp/cck8VBJ0.s 			page 13


 157 0096 1A68     		ldr	r2, [r3]
 158 0098 22F08002 		bic	r2, r2, #128
 159 009c 1A60     		str	r2, [r3]
 160              	.L10:
 386:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 161              		.loc 1 386 0
 162 009e 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 163 00a0 012B     		cmp	r3, #1
 164 00a2 05D1     		bne	.L11
 388:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 165              		.loc 1 388 0
 166 00a4 2268     		ldr	r2, [r4]
 167 00a6 1368     		ldr	r3, [r2]
 168 00a8 43F04003 		orr	r3, r3, #64
 169 00ac 1360     		str	r3, [r2]
 170 00ae 04E0     		b	.L12
 171              	.L11:
 392:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 172              		.loc 1 392 0
 173 00b0 2268     		ldr	r2, [r4]
 174 00b2 1368     		ldr	r3, [r2]
 175 00b4 23F04003 		bic	r3, r3, #64
 176 00b8 1360     		str	r3, [r2]
 177              	.L12:
 396:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 178              		.loc 1 396 0
 179 00ba A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 180 00bc 012B     		cmp	r3, #1
 181 00be 05D1     		bne	.L13
 398:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 182              		.loc 1 398 0
 183 00c0 2268     		ldr	r2, [r4]
 184 00c2 1368     		ldr	r3, [r2]
 185 00c4 43F02003 		orr	r3, r3, #32
 186 00c8 1360     		str	r3, [r2]
 187 00ca 04E0     		b	.L14
 188              	.L13:
 402:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 189              		.loc 1 402 0
 190 00cc 2268     		ldr	r2, [r4]
 191 00ce 1368     		ldr	r3, [r2]
 192 00d0 23F02003 		bic	r3, r3, #32
 193 00d4 1360     		str	r3, [r2]
 194              	.L14:
 406:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 195              		.loc 1 406 0
 196 00d6 E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 197 00d8 012B     		cmp	r3, #1
 198 00da 05D1     		bne	.L15
 408:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 199              		.loc 1 408 0
 200 00dc 2268     		ldr	r2, [r4]
 201 00de 1368     		ldr	r3, [r2]
 202 00e0 23F01003 		bic	r3, r3, #16
 203 00e4 1360     		str	r3, [r2]
 204 00e6 04E0     		b	.L16
 205              	.L15:
ARM GAS  /tmp/cck8VBJ0.s 			page 14


 412:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 206              		.loc 1 412 0
 207 00e8 2268     		ldr	r2, [r4]
 208 00ea 1368     		ldr	r3, [r2]
 209 00ec 43F01003 		orr	r3, r3, #16
 210 00f0 1360     		str	r3, [r2]
 211              	.L16:
 416:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 212              		.loc 1 416 0
 213 00f2 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 214 00f4 012B     		cmp	r3, #1
 215 00f6 05D1     		bne	.L17
 418:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 216              		.loc 1 418 0
 217 00f8 2268     		ldr	r2, [r4]
 218 00fa 1368     		ldr	r3, [r2]
 219 00fc 43F00803 		orr	r3, r3, #8
 220 0100 1360     		str	r3, [r2]
 221 0102 04E0     		b	.L18
 222              	.L17:
 422:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 223              		.loc 1 422 0
 224 0104 2268     		ldr	r2, [r4]
 225 0106 1368     		ldr	r3, [r2]
 226 0108 23F00803 		bic	r3, r3, #8
 227 010c 1360     		str	r3, [r2]
 228              	.L18:
 426:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 229              		.loc 1 426 0
 230 010e 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 231 0110 012B     		cmp	r3, #1
 232 0112 05D1     		bne	.L19
 428:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 233              		.loc 1 428 0
 234 0114 2268     		ldr	r2, [r4]
 235 0116 1368     		ldr	r3, [r2]
 236 0118 43F00403 		orr	r3, r3, #4
 237 011c 1360     		str	r3, [r2]
 238 011e 04E0     		b	.L20
 239              	.L19:
 432:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 240              		.loc 1 432 0
 241 0120 2268     		ldr	r2, [r4]
 242 0122 1368     		ldr	r3, [r2]
 243 0124 23F00403 		bic	r3, r3, #4
 244 0128 1360     		str	r3, [r2]
 245              	.L20:
 436:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 246              		.loc 1 436 0
 247 012a 2168     		ldr	r1, [r4]
 248 012c A268     		ldr	r2, [r4, #8]
 249 012e E368     		ldr	r3, [r4, #12]
 250 0130 1A43     		orrs	r2, r2, r3
 251 0132 2369     		ldr	r3, [r4, #16]
 252 0134 1A43     		orrs	r2, r2, r3
 253 0136 6369     		ldr	r3, [r4, #20]
 254 0138 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/cck8VBJ0.s 			page 15


 255 013a 6368     		ldr	r3, [r4, #4]
 256 013c 013B     		subs	r3, r3, #1
 257 013e 1343     		orrs	r3, r3, r2
 258 0140 CB61     		str	r3, [r1, #28]
 443:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 259              		.loc 1 443 0
 260 0142 0020     		movs	r0, #0
 261 0144 6062     		str	r0, [r4, #36]
 446:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 262              		.loc 1 446 0
 263 0146 0123     		movs	r3, #1
 264 0148 84F82030 		strb	r3, [r4, #32]
 449:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 265              		.loc 1 449 0
 266 014c 38BD     		pop	{r3, r4, r5, pc}
 267              	.LVL13:
 268              	.L21:
 269              	.LCFI1:
 270              		.cfi_def_cfa_offset 0
 271              		.cfi_restore 3
 272              		.cfi_restore 4
 273              		.cfi_restore 5
 274              		.cfi_restore 14
 281:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 275              		.loc 1 281 0
 276 014e 0120     		movs	r0, #1
 277              	.LVL14:
 278 0150 7047     		bx	lr
 279              		.cfi_endproc
 280              	.LFE132:
 282 0152 00BF     		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 283              		.align	2
 284              		.weak	HAL_CAN_MspDeInit
 285              		.thumb
 286              		.thumb_func
 288              	HAL_CAN_MspDeInit:
 289              	.LFB135:
 508:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 509:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 510:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 511:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 512:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 513:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
 514:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 515:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 516:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 517:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 518:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 519:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 520:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
 521:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 522:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 523:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 290              		.loc 1 523 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cck8VBJ0.s 			page 16


 294              		@ link register save eliminated.
 295              	.LVL15:
 296 0000 7047     		bx	lr
 297              		.cfi_endproc
 298              	.LFE135:
 300 0002 00BF     		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 301              		.align	2
 302              		.global	HAL_CAN_ConfigFilter
 303              		.thumb
 304              		.thumb_func
 306              	HAL_CAN_ConfigFilter:
 307              	.LFB136:
 524:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 525:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
 526:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 527:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 528:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 529:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
 530:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 531:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 532:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 533:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 534:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Register a CAN CallBack.
 535:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         To be used instead of the weak predefined callback
 536:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 537:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for CAN module
 538:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  CallbackID ID of the callback to be registered
 539:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be one of the following values:
 540:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID Tx Mailbox 0 Complete callback ID
 541:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID Tx Mailbox 1 Complete callback ID
 542:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID Tx Mailbox 2 Complete callback ID
 543:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CB_ID Tx Mailbox 0 Abort callback ID
 544:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CB_ID Tx Mailbox 1 Abort callback ID
 545:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CB_ID Tx Mailbox 2 Abort callback ID
 546:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID Rx Fifo 0 message pending callback ID
 547:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CB_ID Rx Fifo 0 full callback ID
 548:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID Rx Fifo 1 message pending callback ID
 549:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CB_ID Rx Fifo 1 full callback ID
 550:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CB_ID Sleep callback ID
 551:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID Wake Up from Rx message callback ID
 552:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CB_ID Error callback ID
 553:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 554:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 555:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  pCallback pointer to the Callback function
 556:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
 557:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 558:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Callb
 559:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 560:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 561:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 562:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (pCallback == NULL)
 563:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 564:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update the error code */
 565:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 566:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 567:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 568:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
ARM GAS  /tmp/cck8VBJ0.s 			page 17


 569:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 570:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 571:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 572:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     switch (CallbackID)
 573:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 574:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 575:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = pCallback;
 576:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 577:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 578:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 579:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = pCallback;
 580:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 581:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 582:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 583:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = pCallback;
 584:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 585:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 586:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 587:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = pCallback;
 588:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 589:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 590:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 591:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = pCallback;
 592:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 593:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 594:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 595:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = pCallback;
 596:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 597:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 598:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 599:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = pCallback;
 600:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 601:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 602:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 603:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo0FullCallback = pCallback;
 604:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 605:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 606:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 607:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = pCallback;
 608:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 609:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 610:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 611:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo1FullCallback = pCallback;
 612:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 613:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 614:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 615:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->SleepCallback = pCallback;
 616:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 617:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 618:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 619:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = pCallback;
 620:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 621:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 622:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 623:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCallback = pCallback;
 624:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 625:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/cck8VBJ0.s 			page 18


 626:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 627:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 628:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 629:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 630:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 631:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 632:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 633:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 634:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       default :
 635:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update the error code */
 636:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 637:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 638:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Return error status */
 639:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         status =  HAL_ERROR;
 640:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 641:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 642:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 643:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 644:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 645:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     switch (CallbackID)
 646:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 647:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 648:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 649:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 650:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 651:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 652:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 653:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 654:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 655:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       default :
 656:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update the error code */
 657:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 658:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 659:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Return error status */
 660:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         status =  HAL_ERROR;
 661:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 662:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 663:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 664:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 665:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 666:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update the error code */
 667:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 668:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 669:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return error status */
 670:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     status =  HAL_ERROR;
 671:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 672:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 673:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
 674:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 675:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 676:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 677:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Unregister a CAN CallBack.
 678:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         CAN callabck is redirected to the weak predefined callback
 679:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 680:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for CAN module
 681:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  CallbackID ID of the callback to be unregistered
 682:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be one of the following values:
ARM GAS  /tmp/cck8VBJ0.s 			page 19


 683:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID Tx Mailbox 0 Complete callback ID
 684:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID Tx Mailbox 1 Complete callback ID
 685:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID Tx Mailbox 2 Complete callback ID
 686:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CB_ID Tx Mailbox 0 Abort callback ID
 687:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CB_ID Tx Mailbox 1 Abort callback ID
 688:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CB_ID Tx Mailbox 2 Abort callback ID
 689:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID Rx Fifo 0 message pending callback ID
 690:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CB_ID Rx Fifo 0 full callback ID
 691:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID Rx Fifo 1 message pending callback ID
 692:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CB_ID Rx Fifo 1 full callback ID
 693:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CB_ID Sleep callback ID
 694:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID Wake Up from Rx message callback ID
 695:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CB_ID Error callback ID
 696:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 697:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 698:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
 699:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 700:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_UnRegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Cal
 701:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 702:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 703:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 704:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 705:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 706:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     switch (CallbackID)
 707:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 708:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 709:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = HAL_CAN_TxMailbox0CompleteCallback;
 710:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 711:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 712:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 713:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = HAL_CAN_TxMailbox1CompleteCallback;
 714:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 715:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 716:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 717:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = HAL_CAN_TxMailbox2CompleteCallback;
 718:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 719:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 720:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 721:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = HAL_CAN_TxMailbox0AbortCallback;
 722:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 723:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 724:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 725:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = HAL_CAN_TxMailbox1AbortCallback;
 726:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 727:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 728:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 729:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = HAL_CAN_TxMailbox2AbortCallback;
 730:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 731:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 732:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 733:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = HAL_CAN_RxFifo0MsgPendingCallback;
 734:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 735:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 736:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 737:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo0FullCallback = HAL_CAN_RxFifo0FullCallback;
 738:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 739:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/cck8VBJ0.s 			page 20


 740:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 741:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = HAL_CAN_RxFifo1MsgPendingCallback;
 742:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 743:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 744:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 745:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->RxFifo1FullCallback = HAL_CAN_RxFifo1FullCallback;
 746:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 747:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 748:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 749:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->SleepCallback = HAL_CAN_SleepCallback;
 750:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 751:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 752:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 753:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = HAL_CAN_WakeUpFromRxMsgCallback;
 754:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 755:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 756:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 757:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCallback = HAL_CAN_ErrorCallback;
 758:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 759:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 760:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 761:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 762:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 763:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 764:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 765:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 766:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 767:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 768:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       default :
 769:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update the error code */
 770:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 771:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 772:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Return error status */
 773:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         status =  HAL_ERROR;
 774:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 775:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 776:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 777:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 778:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 779:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     switch (CallbackID)
 780:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 781:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 782:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 783:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 784:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 785:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 786:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 787:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 788:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 789:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       default :
 790:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update the error code */
 791:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 792:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 793:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Return error status */
 794:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         status =  HAL_ERROR;
 795:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         break;
 796:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
ARM GAS  /tmp/cck8VBJ0.s 			page 21


 797:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 798:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 799:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 800:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update the error code */
 801:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 802:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 803:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return error status */
 804:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     status =  HAL_ERROR;
 805:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 806:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 807:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
 808:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 809:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 810:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 811:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 812:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
 813:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 814:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 815:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 816:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *  @brief    Configuration functions.
 817:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *
 818:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
 819:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 820:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****               ##### Configuration functions #####
 821:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 822:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 823:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 824:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 825:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
 826:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 827:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 828:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 829:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 830:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 831:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 832:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 833:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 834:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 835:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         contains the filter configuration information.
 836:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
 837:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 838:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 839:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 308              		.loc 1 839 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 313              	.LVL16:
 840:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t filternbrbitpos;
 841:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 314              		.loc 1 841 0
 315 0000 0268     		ldr	r2, [r0]
 316              	.LVL17:
 842:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 317              		.loc 1 842 0
 318 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
ARM GAS  /tmp/cck8VBJ0.s 			page 22


 319              	.LVL18:
 843:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 844:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 320              		.loc 1 844 0
 321 0006 013B     		subs	r3, r3, #1
 322              	.LVL19:
 323 0008 DBB2     		uxtb	r3, r3
 324 000a 012B     		cmp	r3, #1
 325 000c 6DD8     		bhi	.L26
 839:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t filternbrbitpos;
 326              		.loc 1 839 0
 327 000e 70B4     		push	{r4, r5, r6}
 328              	.LCFI2:
 329              		.cfi_def_cfa_offset 12
 330              		.cfi_offset 4, -12
 331              		.cfi_offset 5, -8
 332              		.cfi_offset 6, -4
 845:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 846:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 847:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check the parameters */
 848:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 849:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 850:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 851:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 852:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 853:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 854:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 855:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 856:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 857:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if   defined(CAN2)
 858:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 859:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Select master instance to access the filter banks */
 860:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     can_ip = CAN1;
 861:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 862:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check the parameters */
 863:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 864:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 865:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
 866:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 867:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 868:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check the parameters */
 869:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 870:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif
 871:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 872:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Initialisation mode for the filter */
 873:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 333              		.loc 1 873 0
 334 0010 D2F80032 		ldr	r3, [r2, #512]
 335 0014 43F00103 		orr	r3, r3, #1
 336 0018 C2F80032 		str	r3, [r2, #512]
 874:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 875:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if   defined(CAN2)
 876:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 877:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 878:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 879:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 880:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif
ARM GAS  /tmp/cck8VBJ0.s 			page 23


 881:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Convert filter number into bit position */
 882:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 337              		.loc 1 882 0
 338 001c 4B69     		ldr	r3, [r1, #20]
 339 001e 03F01F03 		and	r3, r3, #31
 340 0022 0120     		movs	r0, #1
 341              	.LVL20:
 342 0024 00FA03F3 		lsl	r3, r0, r3
 343              	.LVL21:
 883:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 884:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter Deactivation */
 885:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 344              		.loc 1 885 0
 345 0028 D2F81C02 		ldr	r0, [r2, #540]
 346 002c DC43     		mvns	r4, r3
 347 002e 2040     		ands	r0, r0, r4
 348 0030 C2F81C02 		str	r0, [r2, #540]
 886:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 887:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter Scale */
 888:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 349              		.loc 1 888 0
 350 0034 C869     		ldr	r0, [r1, #28]
 351 0036 A8B9     		cbnz	r0, .L27
 889:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 890:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* 16-bit scale for the filter */
 891:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 352              		.loc 1 891 0
 353 0038 D2F80C02 		ldr	r0, [r2, #524]
 354 003c 2040     		ands	r0, r0, r4
 355 003e C2F80C02 		str	r0, [r2, #524]
 892:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 893:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 894:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 895:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 356              		.loc 1 895 0
 357 0042 4869     		ldr	r0, [r1, #20]
 896:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 358              		.loc 1 896 0
 359 0044 CE68     		ldr	r6, [r1, #12]
 897:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 360              		.loc 1 897 0
 361 0046 8D88     		ldrh	r5, [r1, #4]
 896:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 362              		.loc 1 896 0
 363 0048 45EA0645 		orr	r5, r5, r6, lsl #16
 895:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 364              		.loc 1 895 0
 365 004c 4830     		adds	r0, r0, #72
 366 004e 42F83050 		str	r5, [r2, r0, lsl #3]
 898:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 899:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 900:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 901:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 367              		.loc 1 901 0
 368 0052 4869     		ldr	r0, [r1, #20]
 902:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 369              		.loc 1 902 0
ARM GAS  /tmp/cck8VBJ0.s 			page 24


 370 0054 8E68     		ldr	r6, [r1, #8]
 903:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 371              		.loc 1 903 0
 372 0056 0D88     		ldrh	r5, [r1]
 902:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 373              		.loc 1 902 0
 374 0058 45EA0645 		orr	r5, r5, r6, lsl #16
 901:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 375              		.loc 1 901 0
 376 005c 4830     		adds	r0, r0, #72
 377 005e 02EBC000 		add	r0, r2, r0, lsl #3
 378 0062 4560     		str	r5, [r0, #4]
 379              	.L27:
 904:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 905:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 906:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 380              		.loc 1 906 0
 381 0064 C869     		ldr	r0, [r1, #28]
 382 0066 0128     		cmp	r0, #1
 383 0068 15D1     		bne	.L28
 907:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 908:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* 32-bit scale for the filter */
 909:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 384              		.loc 1 909 0
 385 006a D2F80C02 		ldr	r0, [r2, #524]
 386 006e 1843     		orrs	r0, r0, r3
 387 0070 C2F80C02 		str	r0, [r2, #524]
 910:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 911:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 912:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 388              		.loc 1 912 0
 389 0074 4869     		ldr	r0, [r1, #20]
 913:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 390              		.loc 1 913 0
 391 0076 0E68     		ldr	r6, [r1]
 914:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 392              		.loc 1 914 0
 393 0078 8D88     		ldrh	r5, [r1, #4]
 913:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 394              		.loc 1 913 0
 395 007a 45EA0645 		orr	r5, r5, r6, lsl #16
 912:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 396              		.loc 1 912 0
 397 007e 4830     		adds	r0, r0, #72
 398 0080 42F83050 		str	r5, [r2, r0, lsl #3]
 915:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 916:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 917:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 399              		.loc 1 917 0
 400 0084 4869     		ldr	r0, [r1, #20]
 918:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 401              		.loc 1 918 0
 402 0086 8E68     		ldr	r6, [r1, #8]
 919:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 403              		.loc 1 919 0
 404 0088 8D89     		ldrh	r5, [r1, #12]
 918:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
ARM GAS  /tmp/cck8VBJ0.s 			page 25


 405              		.loc 1 918 0
 406 008a 45EA0645 		orr	r5, r5, r6, lsl #16
 917:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 407              		.loc 1 917 0
 408 008e 4830     		adds	r0, r0, #72
 409 0090 02EBC000 		add	r0, r2, r0, lsl #3
 410 0094 4560     		str	r5, [r0, #4]
 411              	.L28:
 920:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 921:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 922:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter Mode */
 923:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 412              		.loc 1 923 0
 413 0096 8869     		ldr	r0, [r1, #24]
 414 0098 28B9     		cbnz	r0, .L29
 924:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 925:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 926:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 415              		.loc 1 926 0
 416 009a D2F80402 		ldr	r0, [r2, #516]
 417 009e 2040     		ands	r0, r0, r4
 418 00a0 C2F80402 		str	r0, [r2, #516]
 419 00a4 04E0     		b	.L30
 420              	.L29:
 927:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 928:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 929:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 930:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Identifier list mode for the filter*/
 931:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 421              		.loc 1 931 0
 422 00a6 D2F80402 		ldr	r0, [r2, #516]
 423 00aa 1843     		orrs	r0, r0, r3
 424 00ac C2F80402 		str	r0, [r2, #516]
 425              	.L30:
 932:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 933:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 934:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter FIFO assignment */
 935:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 426              		.loc 1 935 0
 427 00b0 0869     		ldr	r0, [r1, #16]
 428 00b2 28B9     		cbnz	r0, .L31
 936:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 937:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 938:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 429              		.loc 1 938 0
 430 00b4 D2F81402 		ldr	r0, [r2, #532]
 431 00b8 0440     		ands	r4, r4, r0
 432 00ba C2F81442 		str	r4, [r2, #532]
 433 00be 04E0     		b	.L32
 434              	.L31:
 939:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 940:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else
 941:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 942:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 943:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 435              		.loc 1 943 0
 436 00c0 D2F81402 		ldr	r0, [r2, #532]
ARM GAS  /tmp/cck8VBJ0.s 			page 26


 437 00c4 1843     		orrs	r0, r0, r3
 438 00c6 C2F81402 		str	r0, [r2, #532]
 439              	.L32:
 944:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 945:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 946:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Filter activation */
 947:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 440              		.loc 1 947 0
 441 00ca 096A     		ldr	r1, [r1, #32]
 442              	.LVL22:
 443 00cc 0129     		cmp	r1, #1
 444 00ce 04D1     		bne	.L33
 948:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 949:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 445              		.loc 1 949 0
 446 00d0 D2F81C12 		ldr	r1, [r2, #540]
 447 00d4 0B43     		orrs	r3, r3, r1
 448              	.LVL23:
 449 00d6 C2F81C32 		str	r3, [r2, #540]
 450              	.L33:
 950:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 951:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 952:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 953:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 451              		.loc 1 953 0
 452 00da D2F80032 		ldr	r3, [r2, #512]
 453 00de 23F00103 		bic	r3, r3, #1
 454 00e2 C2F80032 		str	r3, [r2, #512]
 954:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 955:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
 956:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 455              		.loc 1 956 0
 456 00e6 0020     		movs	r0, #0
 457 00e8 05E0     		b	.L34
 458              	.LVL24:
 459              	.L26:
 460              	.LCFI3:
 461              		.cfi_def_cfa_offset 0
 462              		.cfi_restore 4
 463              		.cfi_restore 5
 464              		.cfi_restore 6
 957:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 958:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
 959:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 960:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
 961:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 465              		.loc 1 961 0
 466 00ea 436A     		ldr	r3, [r0, #36]
 467 00ec 43F48023 		orr	r3, r3, #262144
 468 00f0 4362     		str	r3, [r0, #36]
 962:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 963:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 469              		.loc 1 963 0
 470 00f2 0120     		movs	r0, #1
 471              	.LVL25:
 472 00f4 7047     		bx	lr
 473              	.LVL26:
ARM GAS  /tmp/cck8VBJ0.s 			page 27


 474              	.L34:
 475              	.LCFI4:
 476              		.cfi_def_cfa_offset 12
 477              		.cfi_offset 4, -12
 478              		.cfi_offset 5, -8
 479              		.cfi_offset 6, -4
 964:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 965:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 480              		.loc 1 965 0
 481 00f6 70BC     		pop	{r4, r5, r6}
 482              	.LCFI5:
 483              		.cfi_restore 6
 484              		.cfi_restore 5
 485              		.cfi_restore 4
 486              		.cfi_def_cfa_offset 0
 487 00f8 7047     		bx	lr
 488              		.cfi_endproc
 489              	.LFE136:
 491 00fa 00BF     		.section	.text.HAL_CAN_Start,"ax",%progbits
 492              		.align	2
 493              		.global	HAL_CAN_Start
 494              		.thumb
 495              		.thumb_func
 497              	HAL_CAN_Start:
 498              	.LFB137:
 966:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 967:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 968:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
 969:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 970:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 971:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 972:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *  @brief    Control functions
 973:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *
 974:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
 975:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 976:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                       ##### Control functions #####
 977:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
 978:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 979:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 980:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 981:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 982:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 983:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 984:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 985:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                              and activate the corresponding
 986:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                              transmission request
 987:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 988:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 989:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 990:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                              pending on the selected Tx mailbox
 991:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 992:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 993:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 994:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
 995:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
 996:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
 997:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/cck8VBJ0.s 			page 28


 998:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
 999:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Start the CAN module.
1000:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1001:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1002:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1003:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1004:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
1005:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 499              		.loc 1 1005 0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 0
 502              		@ frame_needed = 0, uses_anonymous_args = 0
 503              	.LVL27:
 504 0000 38B5     		push	{r3, r4, r5, lr}
 505              	.LCFI6:
 506              		.cfi_def_cfa_offset 16
 507              		.cfi_offset 3, -16
 508              		.cfi_offset 4, -12
 509              		.cfi_offset 5, -8
 510              		.cfi_offset 14, -4
1006:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tickstart;
1007:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1008:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 511              		.loc 1 1008 0
 512 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 513 0006 DBB2     		uxtb	r3, r3
 514 0008 012B     		cmp	r3, #1
 515 000a 22D1     		bne	.L38
 516 000c 0446     		mov	r4, r0
1009:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1010:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Change CAN peripheral state */
1011:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
 517              		.loc 1 1011 0
 518 000e 0223     		movs	r3, #2
 519 0010 80F82030 		strb	r3, [r0, #32]
1012:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1013:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Request leave initialisation */
1014:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 520              		.loc 1 1014 0
 521 0014 0268     		ldr	r2, [r0]
 522 0016 1368     		ldr	r3, [r2]
 523 0018 23F00103 		bic	r3, r3, #1
 524 001c 1360     		str	r3, [r2]
1015:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1016:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get tick */
1017:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     tickstart = HAL_GetTick();
 525              		.loc 1 1017 0
 526 001e FFF7FEFF 		bl	HAL_GetTick
 527              	.LVL28:
 528 0022 0546     		mov	r5, r0
 529              	.LVL29:
1018:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1019:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Wait the acknowledge */
1020:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 530              		.loc 1 1020 0
 531 0024 0DE0     		b	.L39
 532              	.LVL30:
ARM GAS  /tmp/cck8VBJ0.s 			page 29


 533              	.L41:
1021:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1022:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check for the Timeout */
1023:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 534              		.loc 1 1023 0
 535 0026 FFF7FEFF 		bl	HAL_GetTick
 536              	.LVL31:
 537 002a 401B     		subs	r0, r0, r5
 538 002c 0A28     		cmp	r0, #10
 539 002e 08D9     		bls	.L39
1024:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1025:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1026:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 540              		.loc 1 1026 0
 541 0030 636A     		ldr	r3, [r4, #36]
 542 0032 43F40033 		orr	r3, r3, #131072
 543 0036 6362     		str	r3, [r4, #36]
1027:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1028:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Change CAN state */
1029:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 544              		.loc 1 1029 0
 545 0038 0523     		movs	r3, #5
 546 003a 84F82030 		strb	r3, [r4, #32]
1030:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1031:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
 547              		.loc 1 1031 0
 548 003e 0120     		movs	r0, #1
 549 0040 38BD     		pop	{r3, r4, r5, pc}
 550              	.LVL32:
 551              	.L39:
1020:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 552              		.loc 1 1020 0
 553 0042 2368     		ldr	r3, [r4]
 554 0044 5B68     		ldr	r3, [r3, #4]
 555 0046 13F0010F 		tst	r3, #1
 556 004a ECD1     		bne	.L41
1032:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1033:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1034:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1035:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Reset the CAN ErrorCode */
1036:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 557              		.loc 1 1036 0
 558 004c 0020     		movs	r0, #0
 559 004e 6062     		str	r0, [r4, #36]
1037:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1038:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1039:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 560              		.loc 1 1039 0
 561 0050 38BD     		pop	{r3, r4, r5, pc}
 562              	.LVL33:
 563              	.L38:
1040:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1041:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1042:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1043:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1044:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 564              		.loc 1 1044 0
ARM GAS  /tmp/cck8VBJ0.s 			page 30


 565 0052 436A     		ldr	r3, [r0, #36]
 566 0054 43F40023 		orr	r3, r3, #524288
 567 0058 4362     		str	r3, [r0, #36]
1045:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1046:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 568              		.loc 1 1046 0
 569 005a 0120     		movs	r0, #1
 570              	.LVL34:
1047:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1048:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 571              		.loc 1 1048 0
 572 005c 38BD     		pop	{r3, r4, r5, pc}
 573              		.cfi_endproc
 574              	.LFE137:
 576 005e 00BF     		.section	.text.HAL_CAN_Stop,"ax",%progbits
 577              		.align	2
 578              		.global	HAL_CAN_Stop
 579              		.thumb
 580              		.thumb_func
 582              	HAL_CAN_Stop:
 583              	.LFB138:
1049:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1050:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1051:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
1052:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1053:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1054:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1055:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1056:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
1057:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 584              		.loc 1 1057 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              	.LVL35:
 589 0000 38B5     		push	{r3, r4, r5, lr}
 590              	.LCFI7:
 591              		.cfi_def_cfa_offset 16
 592              		.cfi_offset 3, -16
 593              		.cfi_offset 4, -12
 594              		.cfi_offset 5, -8
 595              		.cfi_offset 14, -4
1058:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tickstart;
1059:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1060:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 596              		.loc 1 1060 0
 597 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 598 0006 DBB2     		uxtb	r3, r3
 599 0008 022B     		cmp	r3, #2
 600 000a 25D1     		bne	.L44
 601 000c 0446     		mov	r4, r0
1061:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1062:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Request initialisation */
1063:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 602              		.loc 1 1063 0
 603 000e 0268     		ldr	r2, [r0]
 604 0010 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cck8VBJ0.s 			page 31


 605 0012 43F00103 		orr	r3, r3, #1
 606 0016 1360     		str	r3, [r2]
1064:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1065:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get tick */
1066:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     tickstart = HAL_GetTick();
 607              		.loc 1 1066 0
 608 0018 FFF7FEFF 		bl	HAL_GetTick
 609              	.LVL36:
 610 001c 0546     		mov	r5, r0
 611              	.LVL37:
1067:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1068:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Wait the acknowledge */
1069:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 612              		.loc 1 1069 0
 613 001e 0DE0     		b	.L45
 614              	.LVL38:
 615              	.L47:
1070:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1071:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check for the Timeout */
1072:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 616              		.loc 1 1072 0
 617 0020 FFF7FEFF 		bl	HAL_GetTick
 618              	.LVL39:
 619 0024 401B     		subs	r0, r0, r5
 620 0026 0A28     		cmp	r0, #10
 621 0028 08D9     		bls	.L45
1073:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1074:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1075:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 622              		.loc 1 1075 0
 623 002a 636A     		ldr	r3, [r4, #36]
 624 002c 43F40033 		orr	r3, r3, #131072
 625 0030 6362     		str	r3, [r4, #36]
1076:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1077:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Change CAN state */
1078:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 626              		.loc 1 1078 0
 627 0032 0523     		movs	r3, #5
 628 0034 84F82030 		strb	r3, [r4, #32]
1079:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1080:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
 629              		.loc 1 1080 0
 630 0038 0120     		movs	r0, #1
 631 003a 38BD     		pop	{r3, r4, r5, pc}
 632              	.LVL40:
 633              	.L45:
1069:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 634              		.loc 1 1069 0
 635 003c 2368     		ldr	r3, [r4]
 636 003e 5A68     		ldr	r2, [r3, #4]
 637 0040 12F0010F 		tst	r2, #1
 638 0044 ECD0     		beq	.L47
1081:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1082:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1083:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1084:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Exit from sleep mode */
1085:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
ARM GAS  /tmp/cck8VBJ0.s 			page 32


 639              		.loc 1 1085 0
 640 0046 1A68     		ldr	r2, [r3]
 641 0048 22F00202 		bic	r2, r2, #2
 642 004c 1A60     		str	r2, [r3]
1086:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1087:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Change CAN peripheral state */
1088:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
 643              		.loc 1 1088 0
 644 004e 0123     		movs	r3, #1
 645 0050 84F82030 		strb	r3, [r4, #32]
1089:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1090:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1091:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 646              		.loc 1 1091 0
 647 0054 0020     		movs	r0, #0
 648 0056 38BD     		pop	{r3, r4, r5, pc}
 649              	.LVL41:
 650              	.L44:
1092:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1093:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1094:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1095:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1096:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 651              		.loc 1 1096 0
 652 0058 436A     		ldr	r3, [r0, #36]
 653 005a 43F48013 		orr	r3, r3, #1048576
 654 005e 4362     		str	r3, [r0, #36]
1097:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1098:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 655              		.loc 1 1098 0
 656 0060 0120     		movs	r0, #1
 657              	.LVL42:
1099:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1100:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 658              		.loc 1 1100 0
 659 0062 38BD     		pop	{r3, r4, r5, pc}
 660              		.cfi_endproc
 661              	.LFE138:
 663              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 664              		.align	2
 665              		.global	HAL_CAN_DeInit
 666              		.thumb
 667              		.thumb_func
 669              	HAL_CAN_DeInit:
 670              	.LFB133:
 460:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check CAN handle */
 671              		.loc 1 460 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 675              	.LVL43:
 462:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 676              		.loc 1 462 0
 677 0000 80B1     		cbz	r0, .L51
 460:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check CAN handle */
 678              		.loc 1 460 0
 679 0002 10B5     		push	{r4, lr}
ARM GAS  /tmp/cck8VBJ0.s 			page 33


 680              	.LCFI8:
 681              		.cfi_def_cfa_offset 8
 682              		.cfi_offset 4, -8
 683              		.cfi_offset 14, -4
 684 0004 0446     		mov	r4, r0
 471:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 685              		.loc 1 471 0
 686 0006 FFF7FEFF 		bl	HAL_CAN_Stop
 687              	.LVL44:
 484:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 688              		.loc 1 484 0
 689 000a 2046     		mov	r0, r4
 690 000c FFF7FEFF 		bl	HAL_CAN_MspDeInit
 691              	.LVL45:
 488:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 692              		.loc 1 488 0
 693 0010 2268     		ldr	r2, [r4]
 694 0012 1368     		ldr	r3, [r2]
 695 0014 43F40043 		orr	r3, r3, #32768
 696 0018 1360     		str	r3, [r2]
 491:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 697              		.loc 1 491 0
 698 001a 0020     		movs	r0, #0
 699 001c 6062     		str	r0, [r4, #36]
 494:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 700              		.loc 1 494 0
 701 001e 84F82000 		strb	r0, [r4, #32]
 497:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 702              		.loc 1 497 0
 703 0022 10BD     		pop	{r4, pc}
 704              	.LVL46:
 705              	.L51:
 706              	.LCFI9:
 707              		.cfi_def_cfa_offset 0
 708              		.cfi_restore 4
 709              		.cfi_restore 14
 464:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 710              		.loc 1 464 0
 711 0024 0120     		movs	r0, #1
 712              	.LVL47:
 713 0026 7047     		bx	lr
 714              		.cfi_endproc
 715              	.LFE133:
 717              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 718              		.align	2
 719              		.global	HAL_CAN_RequestSleep
 720              		.thumb
 721              		.thumb_func
 723              	HAL_CAN_RequestSleep:
 724              	.LFB139:
1101:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1102:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1103:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
1104:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
1105:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
1106:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         of a CAN frame) has been completed.
1107:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
ARM GAS  /tmp/cck8VBJ0.s 			page 34


1108:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1109:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status.
1110:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1111:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
1112:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 725              		.loc 1 1112 0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729              		@ link register save eliminated.
 730              	.LVL48:
1113:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 731              		.loc 1 1113 0
 732 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 733              	.LVL49:
1114:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1115:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 734              		.loc 1 1115 0
 735 0004 013B     		subs	r3, r3, #1
 736              	.LVL50:
 737 0006 DBB2     		uxtb	r3, r3
 738 0008 012B     		cmp	r3, #1
 739 000a 06D8     		bhi	.L55
1116:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1117:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1118:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Request Sleep mode */
1119:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 740              		.loc 1 1119 0
 741 000c 0268     		ldr	r2, [r0]
 742 000e 1368     		ldr	r3, [r2]
 743 0010 43F00203 		orr	r3, r3, #2
 744 0014 1360     		str	r3, [r2]
1120:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1121:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1122:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 745              		.loc 1 1122 0
 746 0016 0020     		movs	r0, #0
 747              	.LVL51:
 748 0018 7047     		bx	lr
 749              	.LVL52:
 750              	.L55:
1123:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1124:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1125:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1126:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1127:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 751              		.loc 1 1127 0
 752 001a 436A     		ldr	r3, [r0, #36]
 753 001c 43F48023 		orr	r3, r3, #262144
 754 0020 4362     		str	r3, [r0, #36]
1128:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1129:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1130:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 755              		.loc 1 1130 0
 756 0022 0120     		movs	r0, #1
 757              	.LVL53:
1131:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
ARM GAS  /tmp/cck8VBJ0.s 			page 35


1132:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 758              		.loc 1 1132 0
 759 0024 7047     		bx	lr
 760              		.cfi_endproc
 761              	.LFE139:
 763 0026 00BF     		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 764              		.align	2
 765              		.global	HAL_CAN_WakeUp
 766              		.thumb
 767              		.thumb_func
 769              	HAL_CAN_WakeUp:
 770              	.LFB140:
1133:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1134:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1135:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Wake up from sleep mode.
1136:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
1137:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         is exited.
1138:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1139:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1140:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status.
1141:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1142:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
1143:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 771              		.loc 1 1143 0
 772              		.cfi_startproc
 773              		@ args = 0, pretend = 0, frame = 8
 774              		@ frame_needed = 0, uses_anonymous_args = 0
 775              		@ link register save eliminated.
 776              	.LVL54:
 777 0000 82B0     		sub	sp, sp, #8
 778              	.LCFI10:
 779              		.cfi_def_cfa_offset 8
1144:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   __IO uint32_t count = 0;
 780              		.loc 1 1144 0
 781 0002 0023     		movs	r3, #0
 782 0004 0193     		str	r3, [sp, #4]
 783              	.LVL55:
1145:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t timeout = 1000000U;
1146:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 784              		.loc 1 1146 0
 785 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 786              	.LVL56:
1147:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1148:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 787              		.loc 1 1148 0
 788 000a 013B     		subs	r3, r3, #1
 789              	.LVL57:
 790 000c DBB2     		uxtb	r3, r3
 791 000e 012B     		cmp	r3, #1
 792 0010 18D8     		bhi	.L58
1149:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1150:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1151:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Wake up request */
1152:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 793              		.loc 1 1152 0
 794 0012 0268     		ldr	r2, [r0]
 795 0014 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cck8VBJ0.s 			page 36


 796 0016 23F00203 		bic	r3, r3, #2
 797 001a 1360     		str	r3, [r2]
 798              	.L61:
1153:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1154:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Wait sleep mode is exited */
1155:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     do
1156:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1157:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Increment counter */
1158:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       count++;
 799              		.loc 1 1158 0
 800 001c 019B     		ldr	r3, [sp, #4]
 801 001e 0133     		adds	r3, r3, #1
 802 0020 0193     		str	r3, [sp, #4]
1159:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1160:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check if timeout is reached */
1161:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (count > timeout)
 803              		.loc 1 1161 0
 804 0022 019A     		ldr	r2, [sp, #4]
 805 0024 0B4B     		ldr	r3, .L63
 806 0026 9A42     		cmp	r2, r3
 807 0028 05D9     		bls	.L59
1162:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1163:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1164:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 808              		.loc 1 1164 0
 809 002a 436A     		ldr	r3, [r0, #36]
 810 002c 43F40033 		orr	r3, r3, #131072
 811 0030 4362     		str	r3, [r0, #36]
1165:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1166:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
 812              		.loc 1 1166 0
 813 0032 0120     		movs	r0, #1
 814              	.LVL58:
 815 0034 0BE0     		b	.L60
 816              	.LVL59:
 817              	.L59:
1167:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1168:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1169:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 818              		.loc 1 1169 0
 819 0036 0368     		ldr	r3, [r0]
 820 0038 5B68     		ldr	r3, [r3, #4]
 821 003a 13F0020F 		tst	r3, #2
 822 003e EDD1     		bne	.L61
1170:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1171:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1172:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 823              		.loc 1 1172 0
 824 0040 0020     		movs	r0, #0
 825              	.LVL60:
 826 0042 04E0     		b	.L60
 827              	.LVL61:
 828              	.L58:
1173:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1174:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1175:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1176:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
ARM GAS  /tmp/cck8VBJ0.s 			page 37


1177:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 829              		.loc 1 1177 0
 830 0044 436A     		ldr	r3, [r0, #36]
 831 0046 43F48023 		orr	r3, r3, #262144
 832 004a 4362     		str	r3, [r0, #36]
1178:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1179:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 833              		.loc 1 1179 0
 834 004c 0120     		movs	r0, #1
 835              	.LVL62:
 836              	.L60:
1180:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1181:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 837              		.loc 1 1181 0
 838 004e 02B0     		add	sp, sp, #8
 839              	.LCFI11:
 840              		.cfi_def_cfa_offset 0
 841              		@ sp needed
 842 0050 7047     		bx	lr
 843              	.L64:
 844 0052 00BF     		.align	2
 845              	.L63:
 846 0054 40420F00 		.word	1000000
 847              		.cfi_endproc
 848              	.LFE140:
 850              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 851              		.align	2
 852              		.global	HAL_CAN_IsSleepActive
 853              		.thumb
 854              		.thumb_func
 856              	HAL_CAN_IsSleepActive:
 857              	.LFB141:
1182:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1183:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1184:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Check is sleep mode is active.
1185:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1186:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1187:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Status
1188:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
1189:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          - 1 : Sleep mode is active.
1190:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1191:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
1192:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 858              		.loc 1 1192 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              		@ link register save eliminated.
 863              	.LVL63:
1193:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t status = 0U;
1194:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 864              		.loc 1 1194 0
 865 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 866              	.LVL64:
1195:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1196:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 867              		.loc 1 1196 0
ARM GAS  /tmp/cck8VBJ0.s 			page 38


 868 0004 013B     		subs	r3, r3, #1
 869              	.LVL65:
 870 0006 DBB2     		uxtb	r3, r3
 871 0008 012B     		cmp	r3, #1
 872 000a 06D8     		bhi	.L67
1197:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1198:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1199:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Sleep mode */
1200:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 873              		.loc 1 1200 0
 874 000c 0368     		ldr	r3, [r0]
 875 000e 5B68     		ldr	r3, [r3, #4]
 876 0010 13F0020F 		tst	r3, #2
 877 0014 03D1     		bne	.L68
1193:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 878              		.loc 1 1193 0
 879 0016 0020     		movs	r0, #0
 880              	.LVL66:
 881 0018 7047     		bx	lr
 882              	.LVL67:
 883              	.L67:
 884 001a 0020     		movs	r0, #0
 885              	.LVL68:
 886 001c 7047     		bx	lr
 887              	.LVL69:
 888              	.L68:
1201:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1202:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       status = 1U;
 889              		.loc 1 1202 0
 890 001e 0120     		movs	r0, #1
 891              	.LVL70:
1203:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1204:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1205:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1206:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return function status */
1207:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
1208:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 892              		.loc 1 1208 0
 893 0020 7047     		bx	lr
 894              		.cfi_endproc
 895              	.LFE141:
 897 0022 00BF     		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 898              		.align	2
 899              		.global	HAL_CAN_AddTxMessage
 900              		.thumb
 901              		.thumb_func
 903              	HAL_CAN_AddTxMessage:
 904              	.LFB142:
1209:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1210:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1211:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
1212:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         corresponding transmission request.
1213:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1214:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1215:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
1216:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
1217:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
ARM GAS  /tmp/cck8VBJ0.s 			page 39


1218:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
1219:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
1220:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1221:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1222:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
1223:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 905              		.loc 1 1223 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 0
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909              		@ link register save eliminated.
 910              	.LVL71:
 911 0000 70B4     		push	{r4, r5, r6}
 912              	.LCFI12:
 913              		.cfi_def_cfa_offset 12
 914              		.cfi_offset 4, -12
 915              		.cfi_offset 5, -8
 916              		.cfi_offset 6, -4
1224:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t transmitmailbox;
1225:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 917              		.loc 1 1225 0
 918 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 919              	.LVL72:
1226:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 920              		.loc 1 1226 0
 921 0006 0568     		ldr	r5, [r0]
 922 0008 AD68     		ldr	r5, [r5, #8]
 923              	.LVL73:
1227:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1228:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check the parameters */
1229:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
1230:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
1231:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
1232:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
1233:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1234:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
1235:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1236:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1237:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1238:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
1239:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1240:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
1241:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1242:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 924              		.loc 1 1242 0
 925 000a 013C     		subs	r4, r4, #1
 926              	.LVL74:
 927 000c E4B2     		uxtb	r4, r4
 928 000e 012C     		cmp	r4, #1
 929 0010 62D8     		bhi	.L70
1243:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1244:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1245:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
1246:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (((tsr & CAN_TSR_TME0) != 0U) ||
 930              		.loc 1 1246 0
 931 0012 15F0E05F 		tst	r5, #469762048
 932 0016 59D0     		beq	.L71
ARM GAS  /tmp/cck8VBJ0.s 			page 40


1247:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
1248:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         ((tsr & CAN_TSR_TME2) != 0U))
1249:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1250:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Select an empty transmit mailbox */
1251:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 933              		.loc 1 1251 0
 934 0018 C5F30165 		ubfx	r5, r5, #24, #2
 935              	.LVL75:
1252:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1253:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check transmit mailbox value */
1254:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (transmitmailbox > 2U)
 936              		.loc 1 1254 0
 937 001c 022D     		cmp	r5, #2
 938 001e 05D9     		bls	.L72
1255:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1256:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1257:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 939              		.loc 1 1257 0
 940 0020 436A     		ldr	r3, [r0, #36]
 941              	.LVL76:
 942 0022 43F40003 		orr	r3, r3, #8388608
 943 0026 4362     		str	r3, [r0, #36]
1258:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1259:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
 944              		.loc 1 1259 0
 945 0028 0120     		movs	r0, #1
 946              	.LVL77:
 947 002a 5AE0     		b	.L73
 948              	.LVL78:
 949              	.L72:
1260:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1261:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1262:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Store the Tx mailbox */
1263:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       *pTxMailbox = (uint32_t)1 << transmitmailbox;
 950              		.loc 1 1263 0
 951 002c 0124     		movs	r4, #1
 952 002e AC40     		lsls	r4, r4, r5
 953 0030 1C60     		str	r4, [r3]
1264:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1265:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set up the Id */
1266:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
 954              		.loc 1 1266 0
 955 0032 8B68     		ldr	r3, [r1, #8]
 956              	.LVL79:
 957 0034 4BB9     		cbnz	r3, .L74
1267:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1268:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 958              		.loc 1 1268 0
 959 0036 0468     		ldr	r4, [r0]
 960 0038 0E68     		ldr	r6, [r1]
1269:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
 961              		.loc 1 1269 0
 962 003a CB68     		ldr	r3, [r1, #12]
1268:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
 963              		.loc 1 1268 0
 964 003c 43EA4656 		orr	r6, r3, r6, lsl #21
 965 0040 05F11803 		add	r3, r5, #24
ARM GAS  /tmp/cck8VBJ0.s 			page 41


 966 0044 1B01     		lsls	r3, r3, #4
 967 0046 E650     		str	r6, [r4, r3]
 968 0048 09E0     		b	.L75
 969              	.L74:
1270:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1271:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       else
1272:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1273:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 970              		.loc 1 1273 0
 971 004a 0668     		ldr	r6, [r0]
 972 004c 4C68     		ldr	r4, [r1, #4]
 973 004e 43EAC403 		orr	r3, r3, r4, lsl #3
1274:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->IDE |
1275:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->RTR);
 974              		.loc 1 1275 0
 975 0052 CC68     		ldr	r4, [r1, #12]
1274:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->IDE |
 976              		.loc 1 1274 0
 977 0054 2343     		orrs	r3, r3, r4
1273:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                                                            pHeader->IDE |
 978              		.loc 1 1273 0
 979 0056 05F11804 		add	r4, r5, #24
 980 005a 2401     		lsls	r4, r4, #4
 981 005c 3351     		str	r3, [r6, r4]
 982              	.L75:
1276:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1277:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1278:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set up the DLC */
1279:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 983              		.loc 1 1279 0
 984 005e 0368     		ldr	r3, [r0]
 985 0060 0C69     		ldr	r4, [r1, #16]
 986 0062 05F11806 		add	r6, r5, #24
 987 0066 03EB0613 		add	r3, r3, r6, lsl #4
 988 006a 5C60     		str	r4, [r3, #4]
1280:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1281:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
1282:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 989              		.loc 1 1282 0
 990 006c 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 991 006e 012B     		cmp	r3, #1
 992 0070 06D1     		bne	.L76
1283:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1284:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 993              		.loc 1 1284 0
 994 0072 0368     		ldr	r3, [r0]
 995 0074 03EB0613 		add	r3, r3, r6, lsl #4
 996 0078 5968     		ldr	r1, [r3, #4]
 997              	.LVL80:
 998 007a 41F48071 		orr	r1, r1, #256
 999 007e 5960     		str	r1, [r3, #4]
 1000              	.L76:
1285:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1286:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1287:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set up the data field */
1288:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 1001              		.loc 1 1288 0
ARM GAS  /tmp/cck8VBJ0.s 			page 42


 1002 0080 0168     		ldr	r1, [r0]
 1003 0082 D479     		ldrb	r4, [r2, #7]	@ zero_extendqisi2
 1004 0084 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 1005 0086 1B04     		lsls	r3, r3, #16
 1006 0088 43EA0463 		orr	r3, r3, r4, lsl #24
 1007 008c 5479     		ldrb	r4, [r2, #5]	@ zero_extendqisi2
 1008 008e 43EA0423 		orr	r3, r3, r4, lsl #8
 1009 0092 1479     		ldrb	r4, [r2, #4]	@ zero_extendqisi2
 1010 0094 2343     		orrs	r3, r3, r4
 1011 0096 2C01     		lsls	r4, r5, #4
 1012 0098 2144     		add	r1, r1, r4
 1013 009a C1F88C31 		str	r3, [r1, #396]
1289:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
1290:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
1291:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
1292:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
1293:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 1014              		.loc 1 1293 0
 1015 009e 0168     		ldr	r1, [r0]
 1016 00a0 D678     		ldrb	r6, [r2, #3]	@ zero_extendqisi2
 1017 00a2 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 1018 00a4 1B04     		lsls	r3, r3, #16
 1019 00a6 43EA0663 		orr	r3, r3, r6, lsl #24
 1020 00aa 5678     		ldrb	r6, [r2, #1]	@ zero_extendqisi2
 1021 00ac 43EA0623 		orr	r3, r3, r6, lsl #8
 1022 00b0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1023              	.LVL81:
 1024 00b2 1343     		orrs	r3, r3, r2
 1025 00b4 2144     		add	r1, r1, r4
 1026 00b6 C1F88831 		str	r3, [r1, #392]
1294:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
1295:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
1296:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
1297:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
1298:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1299:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Request transmission */
1300:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 1027              		.loc 1 1300 0
 1028 00ba 0268     		ldr	r2, [r0]
 1029 00bc 1835     		adds	r5, r5, #24
 1030              	.LVL82:
 1031 00be 2D01     		lsls	r5, r5, #4
 1032              	.LVL83:
 1033 00c0 5359     		ldr	r3, [r2, r5]
 1034 00c2 43F00103 		orr	r3, r3, #1
 1035 00c6 5351     		str	r3, [r2, r5]
1301:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1302:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Return function status */
1303:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       return HAL_OK;
 1036              		.loc 1 1303 0
 1037 00c8 0020     		movs	r0, #0
 1038              	.LVL84:
 1039 00ca 0AE0     		b	.L73
 1040              	.LVL85:
 1041              	.L71:
1304:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1305:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else
ARM GAS  /tmp/cck8VBJ0.s 			page 43


1306:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1307:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Update error code */
1308:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1042              		.loc 1 1308 0
 1043 00cc 436A     		ldr	r3, [r0, #36]
 1044              	.LVL86:
 1045 00ce 43F40013 		orr	r3, r3, #2097152
 1046 00d2 4362     		str	r3, [r0, #36]
1309:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1310:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       return HAL_ERROR;
 1047              		.loc 1 1310 0
 1048 00d4 0120     		movs	r0, #1
 1049              	.LVL87:
 1050 00d6 04E0     		b	.L73
 1051              	.LVL88:
 1052              	.L70:
1311:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1312:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1313:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1314:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1315:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1316:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1053              		.loc 1 1316 0
 1054 00d8 436A     		ldr	r3, [r0, #36]
 1055              	.LVL89:
 1056 00da 43F48023 		orr	r3, r3, #262144
 1057 00de 4362     		str	r3, [r0, #36]
1317:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1318:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 1058              		.loc 1 1318 0
 1059 00e0 0120     		movs	r0, #1
 1060              	.LVL90:
 1061              	.L73:
1319:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1320:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1062              		.loc 1 1320 0
 1063 00e2 70BC     		pop	{r4, r5, r6}
 1064              	.LCFI13:
 1065              		.cfi_restore 6
 1066              		.cfi_restore 5
 1067              		.cfi_restore 4
 1068              		.cfi_def_cfa_offset 0
 1069 00e4 7047     		bx	lr
 1070              		.cfi_endproc
 1071              	.LFE142:
 1073 00e6 00BF     		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1074              		.align	2
 1075              		.global	HAL_CAN_AbortTxRequest
 1076              		.thumb
 1077              		.thumb_func
 1079              	HAL_CAN_AbortTxRequest:
 1080              	.LFB143:
1321:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1322:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1323:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Abort transmission requests
1324:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1325:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
ARM GAS  /tmp/cck8VBJ0.s 			page 44


1326:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
1327:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1328:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1329:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1330:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1331:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1081              		.loc 1 1331 0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 0
 1084              		@ frame_needed = 0, uses_anonymous_args = 0
 1085              		@ link register save eliminated.
 1086              	.LVL91:
1332:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1087              		.loc 1 1332 0
 1088 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1089              	.LVL92:
1333:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1334:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1335:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1336:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1337:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1090              		.loc 1 1337 0
 1091 0004 013B     		subs	r3, r3, #1
 1092              	.LVL93:
 1093 0006 DBB2     		uxtb	r3, r3
 1094 0008 012B     		cmp	r3, #1
 1095 000a 19D8     		bhi	.L79
1338:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1339:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 0 */
1341:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 1096              		.loc 1 1341 0
 1097 000c 11F0010F 		tst	r1, #1
 1098 0010 04D0     		beq	.L80
1342:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1343:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
1344:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 1099              		.loc 1 1344 0
 1100 0012 0268     		ldr	r2, [r0]
 1101 0014 9368     		ldr	r3, [r2, #8]
 1102 0016 43F08003 		orr	r3, r3, #128
 1103 001a 9360     		str	r3, [r2, #8]
 1104              	.L80:
1345:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1346:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1347:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 1 */
1348:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 1105              		.loc 1 1348 0
 1106 001c 11F0020F 		tst	r1, #2
 1107 0020 04D0     		beq	.L81
1349:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1350:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
1351:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 1108              		.loc 1 1351 0
 1109 0022 0268     		ldr	r2, [r0]
 1110 0024 9368     		ldr	r3, [r2, #8]
 1111 0026 43F40043 		orr	r3, r3, #32768
ARM GAS  /tmp/cck8VBJ0.s 			page 45


 1112 002a 9360     		str	r3, [r2, #8]
 1113              	.L81:
1352:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1353:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1354:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 2 */
1355:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 1114              		.loc 1 1355 0
 1115 002c 11F0040F 		tst	r1, #4
 1116 0030 0CD0     		beq	.L83
1356:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1357:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
1358:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 1117              		.loc 1 1358 0
 1118 0032 0268     		ldr	r2, [r0]
 1119 0034 9368     		ldr	r3, [r2, #8]
 1120 0036 43F40003 		orr	r3, r3, #8388608
 1121 003a 9360     		str	r3, [r2, #8]
1359:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1360:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1362:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 1122              		.loc 1 1362 0
 1123 003c 0020     		movs	r0, #0
 1124              	.LVL94:
 1125 003e 7047     		bx	lr
 1126              	.LVL95:
 1127              	.L79:
1363:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1364:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1365:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1366:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1367:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1128              		.loc 1 1367 0
 1129 0040 436A     		ldr	r3, [r0, #36]
 1130 0042 43F48023 		orr	r3, r3, #262144
 1131 0046 4362     		str	r3, [r0, #36]
1368:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1369:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 1132              		.loc 1 1369 0
 1133 0048 0120     		movs	r0, #1
 1134              	.LVL96:
 1135 004a 7047     		bx	lr
 1136              	.LVL97:
 1137              	.L83:
1362:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 1138              		.loc 1 1362 0
 1139 004c 0020     		movs	r0, #0
 1140              	.LVL98:
1370:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1371:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1141              		.loc 1 1371 0
 1142 004e 7047     		bx	lr
 1143              		.cfi_endproc
 1144              	.LFE143:
 1146              		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1147              		.align	2
 1148              		.global	HAL_CAN_GetTxMailboxesFreeLevel
ARM GAS  /tmp/cck8VBJ0.s 			page 46


 1149              		.thumb
 1150              		.thumb_func
 1152              	HAL_CAN_GetTxMailboxesFreeLevel:
 1153              	.LFB144:
1372:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1373:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1374:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
1375:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1376:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1377:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1378:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1379:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
1380:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1154              		.loc 1 1380 0
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 0
 1157              		@ frame_needed = 0, uses_anonymous_args = 0
 1158              		@ link register save eliminated.
 1159              	.LVL99:
1381:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t freelevel = 0U;
1382:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1160              		.loc 1 1382 0
 1161 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1162              	.LVL100:
1383:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1384:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1163              		.loc 1 1384 0
 1164 0004 013B     		subs	r3, r3, #1
 1165              	.LVL101:
 1166 0006 DBB2     		uxtb	r3, r3
 1167 0008 012B     		cmp	r3, #1
 1168 000a 12D8     		bhi	.L88
1385:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1386:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1387:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1388:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 1169              		.loc 1 1388 0
 1170 000c 0368     		ldr	r3, [r0]
 1171 000e 9A68     		ldr	r2, [r3, #8]
 1172 0010 12F0806F 		tst	r2, #67108864
 1173 0014 01D1     		bne	.L89
1381:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1174              		.loc 1 1381 0
 1175 0016 0020     		movs	r0, #0
 1176              	.LVL102:
 1177 0018 00E0     		b	.L86
 1178              	.LVL103:
 1179              	.L89:
1389:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1390:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       freelevel++;
 1180              		.loc 1 1390 0
 1181 001a 0120     		movs	r0, #1
 1182              	.LVL104:
 1183              	.L86:
1391:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1392:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1393:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
ARM GAS  /tmp/cck8VBJ0.s 			page 47


1394:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 1184              		.loc 1 1394 0
 1185 001c 9A68     		ldr	r2, [r3, #8]
 1186 001e 12F0006F 		tst	r2, #134217728
 1187 0022 00D0     		beq	.L87
1395:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1396:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       freelevel++;
 1188              		.loc 1 1396 0
 1189 0024 0130     		adds	r0, r0, #1
 1190              	.LVL105:
 1191              	.L87:
1397:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1398:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1399:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1400:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 1192              		.loc 1 1400 0
 1193 0026 9B68     		ldr	r3, [r3, #8]
 1194 0028 13F0805F 		tst	r3, #268435456
 1195 002c 02D0     		beq	.L85
1401:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1402:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       freelevel++;
 1196              		.loc 1 1402 0
 1197 002e 0130     		adds	r0, r0, #1
 1198              	.LVL106:
 1199 0030 7047     		bx	lr
 1200              	.LVL107:
 1201              	.L88:
1381:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1202              		.loc 1 1381 0
 1203 0032 0020     		movs	r0, #0
 1204              	.LVL108:
 1205              	.L85:
1403:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1404:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1405:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1406:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1407:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return freelevel;
1408:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1206              		.loc 1 1408 0
 1207 0034 7047     		bx	lr
 1208              		.cfi_endproc
 1209              	.LFE144:
 1211 0036 00BF     		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1212              		.align	2
 1213              		.global	HAL_CAN_IsTxMessagePending
 1214              		.thumb
 1215              		.thumb_func
 1217              	HAL_CAN_IsTxMessagePending:
 1218              	.LFB145:
1409:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1410:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1411:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1412:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         Mailboxes.
1413:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1414:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1415:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1416:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
ARM GAS  /tmp/cck8VBJ0.s 			page 48


1417:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Status
1418:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1419:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1420:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *                Tx Mailbox.
1421:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1422:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1423:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1219              		.loc 1 1423 0
 1220              		.cfi_startproc
 1221              		@ args = 0, pretend = 0, frame = 0
 1222              		@ frame_needed = 0, uses_anonymous_args = 0
 1223              		@ link register save eliminated.
 1224              	.LVL109:
1424:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t status = 0U;
1425:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1225              		.loc 1 1425 0
 1226 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1227              	.LVL110:
1426:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1427:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1428:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1429:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1430:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1228              		.loc 1 1430 0
 1229 0004 013B     		subs	r3, r3, #1
 1230              	.LVL111:
 1231 0006 DBB2     		uxtb	r3, r3
 1232 0008 012B     		cmp	r3, #1
 1233 000a 07D8     		bhi	.L92
1431:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1432:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1433:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1434:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1234              		.loc 1 1434 0
 1235 000c 0368     		ldr	r3, [r0]
 1236 000e 9B68     		ldr	r3, [r3, #8]
 1237 0010 8906     		lsls	r1, r1, #26
 1238              	.LVL112:
 1239 0012 31EA0303 		bics	r3, r1, r3
 1240 0016 03D1     		bne	.L93
1424:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1241              		.loc 1 1424 0
 1242 0018 0020     		movs	r0, #0
 1243              	.LVL113:
 1244 001a 7047     		bx	lr
 1245              	.LVL114:
 1246              	.L92:
 1247 001c 0020     		movs	r0, #0
 1248              	.LVL115:
 1249 001e 7047     		bx	lr
 1250              	.LVL116:
 1251              	.L93:
1435:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1436:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       status = 1U;
 1252              		.loc 1 1436 0
 1253 0020 0120     		movs	r0, #1
 1254              	.LVL117:
ARM GAS  /tmp/cck8VBJ0.s 			page 49


1437:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1438:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1439:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1440:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return status */
1441:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
1442:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1255              		.loc 1 1442 0
 1256 0022 7047     		bx	lr
 1257              		.cfi_endproc
 1258              	.LFE145:
 1260              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1261              		.align	2
 1262              		.global	HAL_CAN_GetTxTimestamp
 1263              		.thumb
 1264              		.thumb_func
 1266              	HAL_CAN_GetTxTimestamp:
 1267              	.LFB146:
1443:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1444:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1445:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1446:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             mode is enabled.
1447:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1448:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1449:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1450:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         read.
1451:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1452:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1453:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1454:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1455:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1268              		.loc 1 1455 0
 1269              		.cfi_startproc
 1270              		@ args = 0, pretend = 0, frame = 0
 1271              		@ frame_needed = 0, uses_anonymous_args = 0
 1272              		@ link register save eliminated.
 1273              	.LVL118:
1456:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t timestamp = 0U;
1457:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t transmitmailbox;
1458:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1274              		.loc 1 1458 0
 1275 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1276              	.LVL119:
1459:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1460:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1461:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
1462:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1463:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1277              		.loc 1 1463 0
 1278 0004 013B     		subs	r3, r3, #1
 1279              	.LVL120:
 1280 0006 DBB2     		uxtb	r3, r3
 1281 0008 012B     		cmp	r3, #1
 1282 000a 0DD8     		bhi	.L97
 1283              	.LVL121:
 1284              	.LBB6:
 1285              	.LBB7:
 1286              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
ARM GAS  /tmp/cck8VBJ0.s 			page 50


   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cck8VBJ0.s 			page 51


  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
ARM GAS  /tmp/cck8VBJ0.s 			page 52


 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cck8VBJ0.s 			page 53


 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cck8VBJ0.s 			page 54


 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cck8VBJ0.s 			page 55


 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
ARM GAS  /tmp/cck8VBJ0.s 			page 56


 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cck8VBJ0.s 			page 57


 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cck8VBJ0.s 			page 58


 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 512:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
ARM GAS  /tmp/cck8VBJ0.s 			page 59


 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 553:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
ARM GAS  /tmp/cck8VBJ0.s 			page 60


 571:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 578:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 587:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 618:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cck8VBJ0.s 			page 61


 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 640:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
ARM GAS  /tmp/cck8VBJ0.s 			page 62


 685:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
ARM GAS  /tmp/cck8VBJ0.s 			page 63


 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 758:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 779:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 782:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 784:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/cck8VBJ0.s 			page 64


 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 815:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 819:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 843:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 848:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
ARM GAS  /tmp/cck8VBJ0.s 			page 65


 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 875:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 884:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 885:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 886:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 903:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 905:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cck8VBJ0.s 			page 66


 913:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 917:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 935:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 948:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 959:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 967:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 969:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
ARM GAS  /tmp/cck8VBJ0.s 			page 67


 970:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 972:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 976:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 977:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 978:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 979:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 980:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 981:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 985:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 986:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 992:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 993:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 994:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 995:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1000:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1001:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1003:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1006:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
1007:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1008:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1010:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1011:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1012:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1015:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
1020:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1021:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1023:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1026:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
ARM GAS  /tmp/cck8VBJ0.s 			page 68


1027:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1028:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1030:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1031:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1032:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1033:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1039:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1041:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1042:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1043:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1047:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1048:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
1049:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1050:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1051:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1052:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1287              		.loc 2 1055 0
 1288              		.syntax unified
 1289              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1290 000c 91FAA1F1 		rbit r1, r1
 1291              	@ 0 "" 2
 1292              	.LVL122:
 1293              		.thumb
 1294              		.syntax unified
 1295              	.LBE7:
 1296              	.LBE6:
 1297              	.LBB8:
 1298              	.LBB9:
1056:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1057:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1059:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1062:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
1063:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
1065:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1066:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1068:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1069:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1070:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1071:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cck8VBJ0.s 			page 69


1072:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1073:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1078:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
1079:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1080:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
1086:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 1299              		.loc 2 1089 0
 1300 0010 11B1     		cbz	r1, .L98
1090:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
1092:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1093:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 1301              		.loc 2 1093 0
 1302 0012 B1FA81F1 		clz	r1, r1
 1303 0016 00E0     		b	.L96
 1304              	.L98:
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 1305              		.loc 2 1091 0
 1306 0018 2021     		movs	r1, #32
 1307              	.L96:
 1308              	.LVL123:
 1309              	.LBE9:
 1310              	.LBE8:
1464:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1465:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1466:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Select the Tx mailbox */
1467:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
1468:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1469:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get timestamp */
1470:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
 1311              		.loc 1 1470 0
 1312 001a 0368     		ldr	r3, [r0]
 1313 001c 1831     		adds	r1, r1, #24
 1314              	.LVL124:
 1315 001e 03EB0111 		add	r1, r3, r1, lsl #4
 1316              	.LVL125:
 1317 0022 4868     		ldr	r0, [r1, #4]
 1318              	.LVL126:
 1319 0024 000C     		lsrs	r0, r0, #16
 1320              	.LVL127:
 1321 0026 7047     		bx	lr
 1322              	.LVL128:
 1323              	.L97:
1456:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t transmitmailbox;
 1324              		.loc 1 1456 0
ARM GAS  /tmp/cck8VBJ0.s 			page 70


 1325 0028 0020     		movs	r0, #0
 1326              	.LVL129:
1471:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1472:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1473:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return the timestamp */
1474:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return timestamp;
1475:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1327              		.loc 1 1475 0
 1328 002a 7047     		bx	lr
 1329              		.cfi_endproc
 1330              	.LFE146:
 1332              		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1333              		.align	2
 1334              		.global	HAL_CAN_GetRxMessage
 1335              		.thumb
 1336              		.thumb_func
 1338              	HAL_CAN_GetRxMessage:
 1339              	.LFB147:
1476:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1477:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1478:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1479:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1480:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1481:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1482:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1483:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1484:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         of the Rx frame will be stored.
1485:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1486:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1487:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1488:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1489:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1340              		.loc 1 1489 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 0
 1343              		@ frame_needed = 0, uses_anonymous_args = 0
 1344              		@ link register save eliminated.
 1345              	.LVL130:
 1346 0000 30B4     		push	{r4, r5}
 1347              	.LCFI14:
 1348              		.cfi_def_cfa_offset 8
 1349              		.cfi_offset 4, -8
 1350              		.cfi_offset 5, -4
1490:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1351              		.loc 1 1490 0
 1352 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1353              	.LVL131:
1491:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1492:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1493:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1494:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1354              		.loc 1 1494 0
 1355 0006 013C     		subs	r4, r4, #1
 1356              	.LVL132:
 1357 0008 E4B2     		uxtb	r4, r4
 1358 000a 012C     		cmp	r4, #1
 1359 000c 00F28A80 		bhi	.L100
ARM GAS  /tmp/cck8VBJ0.s 			page 71


1495:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1496:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1497:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check the Rx FIFO */
1498:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1360              		.loc 1 1498 0
 1361 0010 51B9     		cbnz	r1, .L101
1499:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1500:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1501:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 1362              		.loc 1 1501 0
 1363 0012 0468     		ldr	r4, [r0]
 1364 0014 E468     		ldr	r4, [r4, #12]
 1365 0016 14F0030F 		tst	r4, #3
 1366 001a 10D1     		bne	.L102
1502:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1503:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1504:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1367              		.loc 1 1504 0
 1368 001c 436A     		ldr	r3, [r0, #36]
 1369              	.LVL133:
 1370 001e 43F40013 		orr	r3, r3, #2097152
 1371 0022 4362     		str	r3, [r0, #36]
1505:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1506:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
 1372              		.loc 1 1506 0
 1373 0024 0120     		movs	r0, #1
 1374              	.LVL134:
 1375 0026 82E0     		b	.L103
 1376              	.LVL135:
 1377              	.L101:
1507:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1508:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1509:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1510:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1511:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1512:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 1378              		.loc 1 1512 0
 1379 0028 0468     		ldr	r4, [r0]
 1380 002a 2469     		ldr	r4, [r4, #16]
 1381 002c 14F0030F 		tst	r4, #3
 1382 0030 05D1     		bne	.L102
1513:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1514:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Update error code */
1515:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1383              		.loc 1 1515 0
 1384 0032 436A     		ldr	r3, [r0, #36]
 1385              	.LVL136:
 1386 0034 43F40013 		orr	r3, r3, #2097152
 1387 0038 4362     		str	r3, [r0, #36]
1516:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1517:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         return HAL_ERROR;
 1388              		.loc 1 1517 0
 1389 003a 0120     		movs	r0, #1
 1390              	.LVL137:
 1391 003c 77E0     		b	.L103
 1392              	.LVL138:
 1393              	.L102:
ARM GAS  /tmp/cck8VBJ0.s 			page 72


1518:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1519:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1520:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1521:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get the header */
1522:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 1394              		.loc 1 1522 0
 1395 003e 0568     		ldr	r5, [r0]
 1396 0040 01F11B04 		add	r4, r1, #27
 1397 0044 2401     		lsls	r4, r4, #4
 1398 0046 2C59     		ldr	r4, [r5, r4]
 1399 0048 04F00404 		and	r4, r4, #4
 1400 004c 9460     		str	r4, [r2, #8]
1523:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1401              		.loc 1 1523 0
 1402 004e 3CB9     		cbnz	r4, .L104
1524:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1525:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
 1403              		.loc 1 1525 0
 1404 0050 0568     		ldr	r5, [r0]
 1405 0052 01F11B04 		add	r4, r1, #27
 1406 0056 2401     		lsls	r4, r4, #4
 1407 0058 2C59     		ldr	r4, [r5, r4]
 1408 005a 640D     		lsrs	r4, r4, #21
 1409 005c 1460     		str	r4, [r2]
 1410 005e 06E0     		b	.L105
 1411              	.L104:
1526:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1527:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else
1528:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1529:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
 1412              		.loc 1 1529 0
 1413 0060 0568     		ldr	r5, [r0]
 1414 0062 01F11B04 		add	r4, r1, #27
 1415 0066 2401     		lsls	r4, r4, #4
 1416 0068 2C59     		ldr	r4, [r5, r4]
 1417 006a E408     		lsrs	r4, r4, #3
 1418 006c 5460     		str	r4, [r2, #4]
 1419              	.L105:
1530:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1531:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 1420              		.loc 1 1531 0
 1421 006e 0568     		ldr	r5, [r0]
 1422 0070 01F11B04 		add	r4, r1, #27
 1423 0074 2401     		lsls	r4, r4, #4
 1424 0076 2D59     		ldr	r5, [r5, r4]
 1425 0078 05F00205 		and	r5, r5, #2
 1426 007c D560     		str	r5, [r2, #12]
1532:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1427              		.loc 1 1532 0
 1428 007e 0568     		ldr	r5, [r0]
 1429 0080 2544     		add	r5, r5, r4
 1430 0082 6D68     		ldr	r5, [r5, #4]
 1431 0084 05F00F05 		and	r5, r5, #15
 1432 0088 1561     		str	r5, [r2, #16]
1533:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1433              		.loc 1 1533 0
 1434 008a 0568     		ldr	r5, [r0]
ARM GAS  /tmp/cck8VBJ0.s 			page 73


 1435 008c 2544     		add	r5, r5, r4
 1436 008e 6D68     		ldr	r5, [r5, #4]
 1437 0090 C5F30725 		ubfx	r5, r5, #8, #8
 1438 0094 9561     		str	r5, [r2, #24]
1534:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1439              		.loc 1 1534 0
 1440 0096 0568     		ldr	r5, [r0]
 1441 0098 2C44     		add	r4, r4, r5
 1442 009a 6468     		ldr	r4, [r4, #4]
 1443 009c 240C     		lsrs	r4, r4, #16
 1444 009e 5461     		str	r4, [r2, #20]
1535:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1536:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Get the data */
1537:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1445              		.loc 1 1537 0
 1446 00a0 0468     		ldr	r4, [r0]
 1447 00a2 0A01     		lsls	r2, r1, #4
 1448              	.LVL139:
 1449 00a4 1444     		add	r4, r4, r2
 1450 00a6 D4F8B841 		ldr	r4, [r4, #440]
 1451 00aa 1C70     		strb	r4, [r3]
1538:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1452              		.loc 1 1538 0
 1453 00ac 0468     		ldr	r4, [r0]
 1454 00ae 1444     		add	r4, r4, r2
 1455 00b0 D4F8B841 		ldr	r4, [r4, #440]
 1456 00b4 C4F30724 		ubfx	r4, r4, #8, #8
 1457 00b8 5C70     		strb	r4, [r3, #1]
1539:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1458              		.loc 1 1539 0
 1459 00ba 0468     		ldr	r4, [r0]
 1460 00bc 1444     		add	r4, r4, r2
 1461 00be D4F8B841 		ldr	r4, [r4, #440]
 1462 00c2 C4F30744 		ubfx	r4, r4, #16, #8
 1463 00c6 9C70     		strb	r4, [r3, #2]
1540:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1464              		.loc 1 1540 0
 1465 00c8 0468     		ldr	r4, [r0]
 1466 00ca 1444     		add	r4, r4, r2
 1467 00cc D4F8B841 		ldr	r4, [r4, #440]
 1468 00d0 240E     		lsrs	r4, r4, #24
 1469 00d2 DC70     		strb	r4, [r3, #3]
1541:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1470              		.loc 1 1541 0
 1471 00d4 0468     		ldr	r4, [r0]
 1472 00d6 1444     		add	r4, r4, r2
 1473 00d8 D4F8BC41 		ldr	r4, [r4, #444]
 1474 00dc 1C71     		strb	r4, [r3, #4]
1542:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1475              		.loc 1 1542 0
 1476 00de 0468     		ldr	r4, [r0]
 1477 00e0 1444     		add	r4, r4, r2
 1478 00e2 D4F8BC41 		ldr	r4, [r4, #444]
 1479 00e6 C4F30724 		ubfx	r4, r4, #8, #8
 1480 00ea 5C71     		strb	r4, [r3, #5]
1543:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1481              		.loc 1 1543 0
ARM GAS  /tmp/cck8VBJ0.s 			page 74


 1482 00ec 0468     		ldr	r4, [r0]
 1483 00ee 1444     		add	r4, r4, r2
 1484 00f0 D4F8BC41 		ldr	r4, [r4, #444]
 1485 00f4 C4F30744 		ubfx	r4, r4, #16, #8
 1486 00f8 9C71     		strb	r4, [r3, #6]
1544:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1487              		.loc 1 1544 0
 1488 00fa 0468     		ldr	r4, [r0]
 1489 00fc 2244     		add	r2, r2, r4
 1490 00fe D2F8BC21 		ldr	r2, [r2, #444]
 1491 0102 120E     		lsrs	r2, r2, #24
 1492 0104 DA71     		strb	r2, [r3, #7]
1545:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1546:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Release the FIFO */
1547:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1493              		.loc 1 1547 0
 1494 0106 31B9     		cbnz	r1, .L106
1548:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1549:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Release RX FIFO 0 */
1550:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 1495              		.loc 1 1550 0
 1496 0108 0268     		ldr	r2, [r0]
 1497 010a D368     		ldr	r3, [r2, #12]
 1498              	.LVL140:
 1499 010c 43F02003 		orr	r3, r3, #32
 1500 0110 D360     		str	r3, [r2, #12]
1551:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1552:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1553:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1554:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Release RX FIFO 1 */
1555:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1556:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1557:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1558:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1559:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 1501              		.loc 1 1559 0
 1502 0112 0020     		movs	r0, #0
 1503              	.LVL141:
 1504 0114 0BE0     		b	.L103
 1505              	.LVL142:
 1506              	.L106:
1555:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 1507              		.loc 1 1555 0
 1508 0116 0268     		ldr	r2, [r0]
 1509 0118 1369     		ldr	r3, [r2, #16]
 1510              	.LVL143:
 1511 011a 43F02003 		orr	r3, r3, #32
 1512 011e 1361     		str	r3, [r2, #16]
 1513              		.loc 1 1559 0
 1514 0120 0020     		movs	r0, #0
 1515              	.LVL144:
 1516 0122 04E0     		b	.L103
 1517              	.LVL145:
 1518              	.L100:
1560:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1561:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1562:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
ARM GAS  /tmp/cck8VBJ0.s 			page 75


1563:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1564:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1519              		.loc 1 1564 0
 1520 0124 436A     		ldr	r3, [r0, #36]
 1521              	.LVL146:
 1522 0126 43F48023 		orr	r3, r3, #262144
 1523 012a 4362     		str	r3, [r0, #36]
1565:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1566:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 1524              		.loc 1 1566 0
 1525 012c 0120     		movs	r0, #1
 1526              	.LVL147:
 1527              	.L103:
1567:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1568:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1528              		.loc 1 1568 0
 1529 012e 30BC     		pop	{r4, r5}
 1530              	.LCFI15:
 1531              		.cfi_restore 5
 1532              		.cfi_restore 4
 1533              		.cfi_def_cfa_offset 0
 1534 0130 7047     		bx	lr
 1535              		.cfi_endproc
 1536              	.LFE147:
 1538 0132 00BF     		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 1539              		.align	2
 1540              		.global	HAL_CAN_GetRxFifoFillLevel
 1541              		.thumb
 1542              		.thumb_func
 1544              	HAL_CAN_GetRxFifoFillLevel:
 1545              	.LFB148:
1569:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1570:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1571:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1572:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1573:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1574:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1575:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1576:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1577:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1578:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1579:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1546              		.loc 1 1579 0
 1547              		.cfi_startproc
 1548              		@ args = 0, pretend = 0, frame = 0
 1549              		@ frame_needed = 0, uses_anonymous_args = 0
 1550              		@ link register save eliminated.
 1551              	.LVL148:
1580:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t filllevel = 0U;
1581:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1552              		.loc 1 1581 0
 1553 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1554              	.LVL149:
1582:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1583:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1584:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1585:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/cck8VBJ0.s 			page 76


1586:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1555              		.loc 1 1586 0
 1556 0004 013B     		subs	r3, r3, #1
 1557              	.LVL150:
 1558 0006 DBB2     		uxtb	r3, r3
 1559 0008 012B     		cmp	r3, #1
 1560 000a 0AD8     		bhi	.L111
1587:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1588:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1589:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
 1561              		.loc 1 1589 0
 1562 000c 21B9     		cbnz	r1, .L110
1590:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1591:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 1563              		.loc 1 1591 0
 1564 000e 0368     		ldr	r3, [r0]
 1565 0010 D868     		ldr	r0, [r3, #12]
 1566              	.LVL151:
 1567 0012 00F00300 		and	r0, r0, #3
 1568              	.LVL152:
 1569 0016 7047     		bx	lr
 1570              	.LVL153:
 1571              	.L110:
1592:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1593:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1594:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1595:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 1572              		.loc 1 1595 0
 1573 0018 0368     		ldr	r3, [r0]
 1574 001a 1869     		ldr	r0, [r3, #16]
 1575              	.LVL154:
 1576 001c 00F00300 		and	r0, r0, #3
 1577              	.LVL155:
 1578 0020 7047     		bx	lr
 1579              	.LVL156:
 1580              	.L111:
1580:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1581              		.loc 1 1580 0
 1582 0022 0020     		movs	r0, #0
 1583              	.LVL157:
1596:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1597:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1598:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1599:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return Rx FIFO fill level */
1600:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return filllevel;
1601:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1584              		.loc 1 1601 0
 1585 0024 7047     		bx	lr
 1586              		.cfi_endproc
 1587              	.LFE148:
 1589 0026 00BF     		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 1590              		.align	2
 1591              		.global	HAL_CAN_ActivateNotification
 1592              		.thumb
 1593              		.thumb_func
 1595              	HAL_CAN_ActivateNotification:
 1596              	.LFB149:
ARM GAS  /tmp/cck8VBJ0.s 			page 77


1602:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1603:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1604:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
1605:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1606:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1607:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1608:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *  @brief    Interrupts management
1609:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *
1610:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
1611:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
1612:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                        ##### Interrupts management #####
1613:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
1614:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]  This section provides functions allowing to:
1615:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1616:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1617:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1618:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1619:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
1620:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
1621:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1622:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1623:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1624:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Enable interrupts.
1625:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1626:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1627:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1628:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1629:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1630:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1631:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1632:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1597              		.loc 1 1632 0
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 0
 1600              		@ frame_needed = 0, uses_anonymous_args = 0
 1601              		@ link register save eliminated.
 1602              	.LVL158:
1633:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1603              		.loc 1 1633 0
 1604 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1605              	.LVL159:
1634:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1635:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1636:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
1637:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1638:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1606              		.loc 1 1638 0
 1607 0004 013B     		subs	r3, r3, #1
 1608              	.LVL160:
 1609 0006 DBB2     		uxtb	r3, r3
 1610 0008 012B     		cmp	r3, #1
 1611 000a 05D8     		bhi	.L113
1639:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1640:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1641:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Enable the selected interrupts */
1642:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 1612              		.loc 1 1642 0
ARM GAS  /tmp/cck8VBJ0.s 			page 78


 1613 000c 0368     		ldr	r3, [r0]
 1614 000e 5A69     		ldr	r2, [r3, #20]
 1615 0010 1143     		orrs	r1, r1, r2
 1616              	.LVL161:
 1617 0012 5961     		str	r1, [r3, #20]
1643:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1644:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1645:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 1618              		.loc 1 1645 0
 1619 0014 0020     		movs	r0, #0
 1620              	.LVL162:
 1621 0016 7047     		bx	lr
 1622              	.LVL163:
 1623              	.L113:
1646:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1647:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1648:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1649:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1650:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1624              		.loc 1 1650 0
 1625 0018 436A     		ldr	r3, [r0, #36]
 1626 001a 43F48023 		orr	r3, r3, #262144
 1627 001e 4362     		str	r3, [r0, #36]
1651:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1652:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 1628              		.loc 1 1652 0
 1629 0020 0120     		movs	r0, #1
 1630              	.LVL164:
1653:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1654:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1631              		.loc 1 1654 0
 1632 0022 7047     		bx	lr
 1633              		.cfi_endproc
 1634              	.LFE149:
 1636              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 1637              		.align	2
 1638              		.global	HAL_CAN_DeactivateNotification
 1639              		.thumb
 1640              		.thumb_func
 1642              	HAL_CAN_DeactivateNotification:
 1643              	.LFB150:
1655:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1656:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1657:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Disable interrupts.
1658:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1659:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1660:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1661:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1662:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
1663:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1664:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1665:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1644              		.loc 1 1665 0
 1645              		.cfi_startproc
 1646              		@ args = 0, pretend = 0, frame = 0
 1647              		@ frame_needed = 0, uses_anonymous_args = 0
 1648              		@ link register save eliminated.
ARM GAS  /tmp/cck8VBJ0.s 			page 79


 1649              	.LVL165:
1666:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1650              		.loc 1 1666 0
 1651 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1652              	.LVL166:
1667:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1668:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Check function parameters */
1669:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
1670:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1671:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1653              		.loc 1 1671 0
 1654 0004 013B     		subs	r3, r3, #1
 1655              	.LVL167:
 1656 0006 DBB2     		uxtb	r3, r3
 1657 0008 012B     		cmp	r3, #1
 1658 000a 06D8     		bhi	.L116
1672:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1673:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1674:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Disable the selected interrupts */
1675:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 1659              		.loc 1 1675 0
 1660 000c 0268     		ldr	r2, [r0]
 1661 000e 5369     		ldr	r3, [r2, #20]
 1662 0010 23EA0101 		bic	r1, r3, r1
 1663              	.LVL168:
 1664 0014 5161     		str	r1, [r2, #20]
1676:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1677:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Return function status */
1678:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_OK;
 1665              		.loc 1 1678 0
 1666 0016 0020     		movs	r0, #0
 1667              	.LVL169:
 1668 0018 7047     		bx	lr
 1669              	.LVL170:
 1670              	.L116:
1679:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1680:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
1681:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1682:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
1683:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1671              		.loc 1 1683 0
 1672 001a 436A     		ldr	r3, [r0, #36]
 1673 001c 43F48023 		orr	r3, r3, #262144
 1674 0020 4362     		str	r3, [r0, #36]
1684:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1685:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     return HAL_ERROR;
 1675              		.loc 1 1685 0
 1676 0022 0120     		movs	r0, #1
 1677              	.LVL171:
1686:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1687:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 1678              		.loc 1 1687 0
 1679 0024 7047     		bx	lr
 1680              		.cfi_endproc
 1681              	.LFE150:
 1683 0026 00BF     		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 1684              		.align	2
ARM GAS  /tmp/cck8VBJ0.s 			page 80


 1685              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 1686              		.thumb
 1687              		.thumb_func
 1689              	HAL_CAN_TxMailbox0CompleteCallback:
 1690              	.LFB152:
1688:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1689:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
1690:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1691:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1692:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1693:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
1694:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
1695:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1696:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
1697:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1698:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1699:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
1700:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1701:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
1702:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1703:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
1704:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1705:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1706:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
1707:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1708:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1709:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != 0U)
1710:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1711:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1712:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1713:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1714:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != 0U)
1715:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1716:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1717:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1718:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call registered callback*/
1719:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback(hcan);
1720:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1721:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1722:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1723:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1724:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1725:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       else
1726:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1727:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != 0U)
1728:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1729:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1730:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1731:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1732:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != 0U)
1733:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1734:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1735:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1736:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1737:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else
1738:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1739:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
ARM GAS  /tmp/cck8VBJ0.s 			page 81


1740:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1741:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call registered callback*/
1742:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           hcan->TxMailbox0AbortCallback(hcan);
1743:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1744:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1745:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1746:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1747:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1748:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1749:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1750:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1751:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1752:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != 0U)
1753:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1754:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1755:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1756:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1757:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != 0U)
1758:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1759:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1760:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1761:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call registered callback*/
1762:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback(hcan);
1763:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1764:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1765:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1766:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1767:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1768:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       else
1769:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1770:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != 0U)
1771:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1772:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1773:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
1774:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1775:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != 0U)
1776:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1777:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1778:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1779:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1780:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else
1781:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1782:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1783:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1784:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call registered callback*/
1785:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           hcan->TxMailbox1AbortCallback(hcan);
1786:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1787:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1788:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1789:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1790:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1791:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1792:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1793:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1794:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1795:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != 0U)
1796:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
ARM GAS  /tmp/cck8VBJ0.s 			page 82


1797:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1798:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1799:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1800:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != 0U)
1801:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1802:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1803:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1804:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call registered callback*/
1805:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback(hcan);
1806:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1807:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1808:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1809:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1810:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1811:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       else
1812:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1813:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != 0U)
1814:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1815:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1816:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1817:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1818:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != 0U)
1819:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1820:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Update error code */
1821:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1822:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1823:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         else
1824:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
1825:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1826:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1827:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call registered callback*/
1828:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           hcan->TxMailbox2AbortCallback(hcan);
1829:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1830:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1831:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1832:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1833:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
1834:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1835:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1836:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1837:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1838:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1839:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
1840:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1841:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
1842:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1843:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1844:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1845:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1846:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1847:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
1848:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1849:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1850:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1851:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1852:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
1853:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
ARM GAS  /tmp/cck8VBJ0.s 			page 83


1854:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
1855:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1856:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1857:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1858:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1859:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1860:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1861:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1862:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->RxFifo0FullCallback(hcan);
1863:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1864:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1865:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1866:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1867:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1868:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1869:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1870:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1871:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
1872:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1873:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check if message is still pending */
1874:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
1875:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1876:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Receive FIFO 0 mesage pending Callback */
1877:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1878:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1879:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->RxFifo0MsgPendingCallback(hcan);
1880:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1881:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1882:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1883:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1884:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1885:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1886:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1887:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1888:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
1889:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1890:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
1891:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1892:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1893:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1894:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1895:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1896:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1897:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1898:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1899:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1900:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1901:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
1902:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1903:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
1904:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1905:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1906:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1907:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1908:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1909:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1910:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
ARM GAS  /tmp/cck8VBJ0.s 			page 84


1911:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->RxFifo1FullCallback(hcan);
1912:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1913:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1914:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
1915:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1916:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1917:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1918:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1919:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1920:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
1921:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1922:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check if message is still pending */
1923:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
1924:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1925:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Receive FIFO 1 mesage pending Callback */
1926:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1927:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1928:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->RxFifo1MsgPendingCallback(hcan);
1929:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1930:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1931:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1932:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1933:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1934:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1935:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1936:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1937:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
1938:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1939:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != 0U)
1940:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1941:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1942:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1943:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1944:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Sleep Callback */
1945:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1946:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1947:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->SleepCallback(hcan);
1948:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
1949:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1950:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1951:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1952:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1953:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1954:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1955:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1956:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != 0U)
1957:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1958:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != 0U)
1959:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1960:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Clear WakeUp Flag */
1961:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1962:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1963:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* WakeUp Callback */
1964:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1965:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call registered callback*/
1966:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       hcan->WakeUpFromRxMsgCallback(hcan);
1967:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
ARM GAS  /tmp/cck8VBJ0.s 			page 85


1968:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1969:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1970:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1971:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
1972:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
1973:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1974:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Error interrupts management *********************************************/
1975:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != 0U)
1976:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
1977:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != 0U)
1978:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
1979:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check Error Warning Flag */
1980:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
1981:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
1982:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1983:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1984:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
1985:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1986:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1987:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1988:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1989:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check Error Passive Flag */
1990:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
1991:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
1992:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
1993:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1994:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
1995:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1996:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1997:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
1998:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
1999:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check Bus-off Flag */
2000:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
2001:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
2002:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
2003:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
2004:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
2005:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2006:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
2007:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
2008:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2009:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Check Last Error Code Flag */
2010:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
2011:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
2012:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
2013:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
2014:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
2015:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_0):
2016:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Stuff error */
2017:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
2018:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2019:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
2020:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Form error */
2021:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
2022:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2023:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
2024:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
ARM GAS  /tmp/cck8VBJ0.s 			page 86


2025:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
2026:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2027:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
2028:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
2029:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
2030:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2031:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
2032:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
2033:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
2034:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2035:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
2036:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             /* Set CAN error code to CRC error */
2037:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
2038:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2039:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           default:
2040:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
2041:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
2042:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2043:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         /* Clear Last error code Flag */
2044:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
2045:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
2046:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
2047:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2048:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Clear ERRI Flag */
2049:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
2050:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2051:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2052:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
2053:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
2054:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
2055:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code in handle */
2056:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
2057:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2058:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Call Error callback function */
2059:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
2060:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Call registered callback*/
2061:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCallback(hcan);
2062:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #else
2063:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Call weak (surcharged) callback */
2064:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
2065:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
2066:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2067:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2068:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2069:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2070:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
2071:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2072:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2073:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
2074:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *  @brief   CAN Callback functions
2075:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *
2076:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
2077:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
2078:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****                           ##### Callback functions #####
2079:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
2080:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
2081:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     This subsection provides the following callback functions:
ARM GAS  /tmp/cck8VBJ0.s 			page 87


2082:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
2083:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
2084:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
2085:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
2086:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
2087:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
2088:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
2089:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
2090:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
2091:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
2092:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
2093:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
2094:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
2095:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2096:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
2097:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
2098:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2099:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2100:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2101:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
2102:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2103:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2104:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2105:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2106:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
2107:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1691              		.loc 1 2107 0
 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 0
 1694              		@ frame_needed = 0, uses_anonymous_args = 0
 1695              		@ link register save eliminated.
 1696              	.LVL172:
 1697 0000 7047     		bx	lr
 1698              		.cfi_endproc
 1699              	.LFE152:
 1701 0002 00BF     		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 1702              		.align	2
 1703              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 1704              		.thumb
 1705              		.thumb_func
 1707              	HAL_CAN_TxMailbox1CompleteCallback:
 1708              	.LFB153:
2108:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2109:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2110:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2111:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2112:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
2113:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2114:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2115:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2116:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2117:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2118:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
2119:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2120:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2121:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2122:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
ARM GAS  /tmp/cck8VBJ0.s 			page 88


2123:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
2124:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1709              		.loc 1 2124 0
 1710              		.cfi_startproc
 1711              		@ args = 0, pretend = 0, frame = 0
 1712              		@ frame_needed = 0, uses_anonymous_args = 0
 1713              		@ link register save eliminated.
 1714              	.LVL173:
 1715 0000 7047     		bx	lr
 1716              		.cfi_endproc
 1717              	.LFE153:
 1719 0002 00BF     		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 1720              		.align	2
 1721              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 1722              		.thumb
 1723              		.thumb_func
 1725              	HAL_CAN_TxMailbox2CompleteCallback:
 1726              	.LFB154:
2125:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2126:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2127:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2128:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2129:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
2130:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2131:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2132:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2133:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2134:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2135:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
2136:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2137:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2138:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2139:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2140:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
2141:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1727              		.loc 1 2141 0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 0
 1730              		@ frame_needed = 0, uses_anonymous_args = 0
 1731              		@ link register save eliminated.
 1732              	.LVL174:
 1733 0000 7047     		bx	lr
 1734              		.cfi_endproc
 1735              	.LFE154:
 1737 0002 00BF     		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 1738              		.align	2
 1739              		.weak	HAL_CAN_TxMailbox0AbortCallback
 1740              		.thumb
 1741              		.thumb_func
 1743              	HAL_CAN_TxMailbox0AbortCallback:
 1744              	.LFB155:
2142:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2143:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2144:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2145:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2146:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
2147:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
ARM GAS  /tmp/cck8VBJ0.s 			page 89


2148:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2149:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2150:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2151:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2152:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
2153:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2154:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2155:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2156:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2157:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
2158:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1745              		.loc 1 2158 0
 1746              		.cfi_startproc
 1747              		@ args = 0, pretend = 0, frame = 0
 1748              		@ frame_needed = 0, uses_anonymous_args = 0
 1749              		@ link register save eliminated.
 1750              	.LVL175:
 1751 0000 7047     		bx	lr
 1752              		.cfi_endproc
 1753              	.LFE155:
 1755 0002 00BF     		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 1756              		.align	2
 1757              		.weak	HAL_CAN_TxMailbox1AbortCallback
 1758              		.thumb
 1759              		.thumb_func
 1761              	HAL_CAN_TxMailbox1AbortCallback:
 1762              	.LFB156:
2159:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2160:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2161:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2162:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2163:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
2164:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2165:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2166:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2167:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2168:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2169:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
2170:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2171:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2172:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2173:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2174:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
2175:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1763              		.loc 1 2175 0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 0
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
 1767              		@ link register save eliminated.
 1768              	.LVL176:
 1769 0000 7047     		bx	lr
 1770              		.cfi_endproc
 1771              	.LFE156:
 1773 0002 00BF     		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 1774              		.align	2
 1775              		.weak	HAL_CAN_TxMailbox2AbortCallback
 1776              		.thumb
ARM GAS  /tmp/cck8VBJ0.s 			page 90


 1777              		.thumb_func
 1779              	HAL_CAN_TxMailbox2AbortCallback:
 1780              	.LFB157:
2176:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2177:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2178:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2179:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2180:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
2181:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2182:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2183:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2184:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2185:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2186:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
2187:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2188:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2189:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2190:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2191:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
2192:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1781              		.loc 1 2192 0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
 1785              		@ link register save eliminated.
 1786              	.LVL177:
 1787 0000 7047     		bx	lr
 1788              		.cfi_endproc
 1789              	.LFE157:
 1791 0002 00BF     		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 1792              		.align	2
 1793              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 1794              		.thumb
 1795              		.thumb_func
 1797              	HAL_CAN_RxFifo0MsgPendingCallback:
 1798              	.LFB158:
2193:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2194:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2195:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2196:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2197:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
2198:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2199:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2200:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2201:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2202:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2203:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
2204:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2205:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2206:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2207:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2208:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
2209:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1799              		.loc 1 2209 0
 1800              		.cfi_startproc
 1801              		@ args = 0, pretend = 0, frame = 0
 1802              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cck8VBJ0.s 			page 91


 1803              		@ link register save eliminated.
 1804              	.LVL178:
 1805 0000 7047     		bx	lr
 1806              		.cfi_endproc
 1807              	.LFE158:
 1809 0002 00BF     		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 1810              		.align	2
 1811              		.weak	HAL_CAN_RxFifo0FullCallback
 1812              		.thumb
 1813              		.thumb_func
 1815              	HAL_CAN_RxFifo0FullCallback:
 1816              	.LFB159:
2210:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2211:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2212:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2213:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2214:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
2215:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2216:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2217:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2218:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2219:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2220:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
2221:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2222:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2223:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2224:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2225:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
2226:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1817              		.loc 1 2226 0
 1818              		.cfi_startproc
 1819              		@ args = 0, pretend = 0, frame = 0
 1820              		@ frame_needed = 0, uses_anonymous_args = 0
 1821              		@ link register save eliminated.
 1822              	.LVL179:
 1823 0000 7047     		bx	lr
 1824              		.cfi_endproc
 1825              	.LFE159:
 1827 0002 00BF     		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 1828              		.align	2
 1829              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 1830              		.thumb
 1831              		.thumb_func
 1833              	HAL_CAN_RxFifo1MsgPendingCallback:
 1834              	.LFB160:
2227:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2228:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2229:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2230:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2231:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
2232:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             file
2233:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2234:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2235:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2236:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2237:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
2238:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
ARM GAS  /tmp/cck8VBJ0.s 			page 92


2239:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2240:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2241:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2242:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
2243:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1835              		.loc 1 2243 0
 1836              		.cfi_startproc
 1837              		@ args = 0, pretend = 0, frame = 0
 1838              		@ frame_needed = 0, uses_anonymous_args = 0
 1839              		@ link register save eliminated.
 1840              	.LVL180:
 1841 0000 7047     		bx	lr
 1842              		.cfi_endproc
 1843              	.LFE160:
 1845 0002 00BF     		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 1846              		.align	2
 1847              		.weak	HAL_CAN_RxFifo1FullCallback
 1848              		.thumb
 1849              		.thumb_func
 1851              	HAL_CAN_RxFifo1FullCallback:
 1852              	.LFB161:
2244:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2245:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2246:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2247:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2248:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
2249:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2250:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2251:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2252:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2253:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2254:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
2255:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2256:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2257:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2258:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2259:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
2260:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1853              		.loc 1 2260 0
 1854              		.cfi_startproc
 1855              		@ args = 0, pretend = 0, frame = 0
 1856              		@ frame_needed = 0, uses_anonymous_args = 0
 1857              		@ link register save eliminated.
 1858              	.LVL181:
 1859 0000 7047     		bx	lr
 1860              		.cfi_endproc
 1861              	.LFE161:
 1863 0002 00BF     		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 1864              		.align	2
 1865              		.weak	HAL_CAN_SleepCallback
 1866              		.thumb
 1867              		.thumb_func
 1869              	HAL_CAN_SleepCallback:
 1870              	.LFB162:
2261:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2262:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2263:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
ARM GAS  /tmp/cck8VBJ0.s 			page 93


2264:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2265:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
2266:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             file
2267:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2268:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2269:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2270:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2271:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Sleep callback.
2272:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2273:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2274:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2275:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2276:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
2277:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1871              		.loc 1 2277 0
 1872              		.cfi_startproc
 1873              		@ args = 0, pretend = 0, frame = 0
 1874              		@ frame_needed = 0, uses_anonymous_args = 0
 1875              		@ link register save eliminated.
 1876              	.LVL182:
 1877 0000 7047     		bx	lr
 1878              		.cfi_endproc
 1879              	.LFE162:
 1881 0002 00BF     		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 1882              		.align	2
 1883              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 1884              		.thumb
 1885              		.thumb_func
 1887              	HAL_CAN_WakeUpFromRxMsgCallback:
 1888              	.LFB163:
2278:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2279:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2280:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2281:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2282:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
2283:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2284:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2285:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2286:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2287:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
2288:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2289:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2290:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2291:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2292:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
2293:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1889              		.loc 1 2293 0
 1890              		.cfi_startproc
 1891              		@ args = 0, pretend = 0, frame = 0
 1892              		@ frame_needed = 0, uses_anonymous_args = 0
 1893              		@ link register save eliminated.
 1894              	.LVL183:
 1895 0000 7047     		bx	lr
 1896              		.cfi_endproc
 1897              	.LFE163:
 1899 0002 00BF     		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 1900              		.align	2
ARM GAS  /tmp/cck8VBJ0.s 			page 94


 1901              		.weak	HAL_CAN_ErrorCallback
 1902              		.thumb
 1903              		.thumb_func
 1905              	HAL_CAN_ErrorCallback:
 1906              	.LFB164:
2294:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2295:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2296:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2297:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2298:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
2299:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             user file
2300:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2301:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2302:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2303:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2304:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Error CAN callback.
2305:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2306:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2307:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval None
2308:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2309:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
2310:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 1907              		.loc 1 2310 0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 0
 1910              		@ frame_needed = 0, uses_anonymous_args = 0
 1911              		@ link register save eliminated.
 1912              	.LVL184:
 1913 0000 7047     		bx	lr
 1914              		.cfi_endproc
 1915              	.LFE164:
 1917 0002 00BF     		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 1918              		.align	2
 1919              		.global	HAL_CAN_IRQHandler
 1920              		.thumb
 1921              		.thumb_func
 1923              	HAL_CAN_IRQHandler:
 1924              	.LFB151:
1696:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 1925              		.loc 1 1696 0
 1926              		.cfi_startproc
 1927              		@ args = 0, pretend = 0, frame = 0
 1928              		@ frame_needed = 0, uses_anonymous_args = 0
 1929              	.LVL185:
1696:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 1930              		.loc 1 1696 0
 1931 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1932              	.LCFI16:
 1933              		.cfi_def_cfa_offset 40
 1934              		.cfi_offset 3, -40
 1935              		.cfi_offset 4, -36
 1936              		.cfi_offset 5, -32
 1937              		.cfi_offset 6, -28
 1938              		.cfi_offset 7, -24
 1939              		.cfi_offset 8, -20
 1940              		.cfi_offset 9, -16
 1941              		.cfi_offset 10, -12
ARM GAS  /tmp/cck8VBJ0.s 			page 95


 1942              		.cfi_offset 11, -8
 1943              		.cfi_offset 14, -4
 1944 0004 0546     		mov	r5, r0
 1945              	.LVL186:
1698:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 1946              		.loc 1 1698 0
 1947 0006 0368     		ldr	r3, [r0]
 1948 0008 5C69     		ldr	r4, [r3, #20]
 1949              	.LVL187:
1699:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 1950              		.loc 1 1699 0
 1951 000a 5F68     		ldr	r7, [r3, #4]
 1952              	.LVL188:
1700:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 1953              		.loc 1 1700 0
 1954 000c 9E68     		ldr	r6, [r3, #8]
 1955              	.LVL189:
1701:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 1956              		.loc 1 1701 0
 1957 000e D3F80C90 		ldr	r9, [r3, #12]
 1958              	.LVL190:
1702:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 1959              		.loc 1 1702 0
 1960 0012 D3F81080 		ldr	r8, [r3, #16]
 1961              	.LVL191:
1703:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 1962              		.loc 1 1703 0
 1963 0016 D3F818A0 		ldr	r10, [r3, #24]
 1964              	.LVL192:
1706:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 1965              		.loc 1 1706 0
 1966 001a 14F0010F 		tst	r4, #1
 1967 001e 5AD0     		beq	.L164
1709:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 1968              		.loc 1 1709 0
 1969 0020 16F0010F 		tst	r6, #1
 1970 0024 14D0     		beq	.L165
1712:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 1971              		.loc 1 1712 0
 1972 0026 0122     		movs	r2, #1
 1973 0028 9A60     		str	r2, [r3, #8]
1714:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 1974              		.loc 1 1714 0
 1975 002a 16F0020F 		tst	r6, #2
 1976 002e 04D0     		beq	.L134
1722:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1977              		.loc 1 1722 0
 1978 0030 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 1979              	.LVL193:
1697:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 1980              		.loc 1 1697 0
 1981 0034 4FF0000B 		mov	fp, #0
 1982 0038 12E0     		b	.L133
 1983              	.LVL194:
 1984              	.L134:
1727:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 1985              		.loc 1 1727 0
ARM GAS  /tmp/cck8VBJ0.s 			page 96


 1986 003a 16F0040F 		tst	r6, #4
 1987 003e 0AD1     		bne	.L166
1732:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 1988              		.loc 1 1732 0
 1989 0040 16F0080F 		tst	r6, #8
 1990 0044 0AD1     		bne	.L167
1745:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 1991              		.loc 1 1745 0
 1992 0046 FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 1993              	.LVL195:
1697:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 1994              		.loc 1 1697 0
 1995 004a 4FF0000B 		mov	fp, #0
 1996 004e 07E0     		b	.L133
 1997              	.LVL196:
 1998              	.L165:
 1999 0050 4FF0000B 		mov	fp, #0
 2000 0054 04E0     		b	.L133
 2001              	.L166:
1730:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2002              		.loc 1 1730 0
 2003 0056 4FF4006B 		mov	fp, #2048
 2004 005a 01E0     		b	.L133
 2005              	.L167:
1735:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2006              		.loc 1 1735 0
 2007 005c 4FF4805B 		mov	fp, #4096
 2008              	.LVL197:
 2009              	.L133:
1752:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2010              		.loc 1 1752 0
 2011 0060 16F4807F 		tst	r6, #256
 2012 0064 19D0     		beq	.L135
1755:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2013              		.loc 1 1755 0
 2014 0066 2B68     		ldr	r3, [r5]
 2015 0068 4FF48072 		mov	r2, #256
 2016 006c 9A60     		str	r2, [r3, #8]
1757:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 2017              		.loc 1 1757 0
 2018 006e 16F4007F 		tst	r6, #512
 2019 0072 03D0     		beq	.L136
1765:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2020              		.loc 1 1765 0
 2021 0074 2846     		mov	r0, r5
 2022 0076 FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2023              	.LVL198:
 2024 007a 0EE0     		b	.L135
 2025              	.L136:
1770:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2026              		.loc 1 1770 0
 2027 007c 16F4806F 		tst	r6, #1024
 2028 0080 02D0     		beq	.L137
1773:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2029              		.loc 1 1773 0
 2030 0082 4BF4005B 		orr	fp, fp, #8192
 2031              	.LVL199:
ARM GAS  /tmp/cck8VBJ0.s 			page 97


 2032 0086 08E0     		b	.L135
 2033              	.L137:
1775:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2034              		.loc 1 1775 0
 2035 0088 16F4006F 		tst	r6, #2048
 2036 008c 02D0     		beq	.L138
1778:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2037              		.loc 1 1778 0
 2038 008e 4BF4804B 		orr	fp, fp, #16384
 2039              	.LVL200:
 2040 0092 02E0     		b	.L135
 2041              	.L138:
1788:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2042              		.loc 1 1788 0
 2043 0094 2846     		mov	r0, r5
 2044 0096 FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2045              	.LVL201:
 2046              	.L135:
1795:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2047              		.loc 1 1795 0
 2048 009a 16F4803F 		tst	r6, #65536
 2049 009e 1CD0     		beq	.L132
1798:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2050              		.loc 1 1798 0
 2051 00a0 2B68     		ldr	r3, [r5]
 2052 00a2 4FF48032 		mov	r2, #65536
 2053 00a6 9A60     		str	r2, [r3, #8]
1800:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       {
 2054              		.loc 1 1800 0
 2055 00a8 16F4003F 		tst	r6, #131072
 2056 00ac 03D0     		beq	.L139
1808:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2057              		.loc 1 1808 0
 2058 00ae 2846     		mov	r0, r5
 2059 00b0 FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2060              	.LVL202:
 2061 00b4 11E0     		b	.L132
 2062              	.L139:
1813:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2063              		.loc 1 1813 0
 2064 00b6 16F4802F 		tst	r6, #262144
 2065 00ba 02D0     		beq	.L140
1816:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2066              		.loc 1 1816 0
 2067 00bc 4BF4004B 		orr	fp, fp, #32768
 2068              	.LVL203:
 2069 00c0 0BE0     		b	.L132
 2070              	.L140:
1818:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2071              		.loc 1 1818 0
 2072 00c2 16F4002F 		tst	r6, #524288
 2073 00c6 02D0     		beq	.L141
1821:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         }
 2074              		.loc 1 1821 0
 2075 00c8 4BF4803B 		orr	fp, fp, #65536
 2076              	.LVL204:
 2077 00cc 05E0     		b	.L132
ARM GAS  /tmp/cck8VBJ0.s 			page 98


 2078              	.L141:
1831:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2079              		.loc 1 1831 0
 2080 00ce 2846     		mov	r0, r5
 2081 00d0 FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2082              	.LVL205:
 2083 00d4 01E0     		b	.L132
 2084              	.LVL206:
 2085              	.L164:
1697:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2086              		.loc 1 1697 0
 2087 00d6 4FF0000B 		mov	fp, #0
 2088              	.LVL207:
 2089              	.L132:
1839:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2090              		.loc 1 1839 0
 2091 00da 14F0080F 		tst	r4, #8
 2092 00de 07D0     		beq	.L142
1841:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2093              		.loc 1 1841 0
 2094 00e0 19F0100F 		tst	r9, #16
 2095 00e4 04D0     		beq	.L142
1844:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2096              		.loc 1 1844 0
 2097 00e6 4BF4007B 		orr	fp, fp, #512
 2098              	.LVL208:
1847:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 2099              		.loc 1 1847 0
 2100 00ea 2B68     		ldr	r3, [r5]
 2101 00ec 1022     		movs	r2, #16
 2102 00ee DA60     		str	r2, [r3, #12]
 2103              	.L142:
1852:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2104              		.loc 1 1852 0
 2105 00f0 14F0040F 		tst	r4, #4
 2106 00f4 08D0     		beq	.L143
1854:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2107              		.loc 1 1854 0
 2108 00f6 19F0080F 		tst	r9, #8
 2109 00fa 05D0     		beq	.L143
1857:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2110              		.loc 1 1857 0
 2111 00fc 2B68     		ldr	r3, [r5]
 2112 00fe 0822     		movs	r2, #8
 2113 0100 DA60     		str	r2, [r3, #12]
1865:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2114              		.loc 1 1865 0
 2115 0102 2846     		mov	r0, r5
 2116 0104 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2117              	.LVL209:
 2118              	.L143:
1871:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2119              		.loc 1 1871 0
 2120 0108 14F0020F 		tst	r4, #2
 2121 010c 07D0     		beq	.L144
1874:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2122              		.loc 1 1874 0
ARM GAS  /tmp/cck8VBJ0.s 			page 99


 2123 010e 2B68     		ldr	r3, [r5]
 2124 0110 DB68     		ldr	r3, [r3, #12]
 2125 0112 13F0030F 		tst	r3, #3
 2126 0116 02D0     		beq	.L144
1882:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2127              		.loc 1 1882 0
 2128 0118 2846     		mov	r0, r5
 2129 011a FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2130              	.LVL210:
 2131              	.L144:
1888:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2132              		.loc 1 1888 0
 2133 011e 14F0400F 		tst	r4, #64
 2134 0122 07D0     		beq	.L145
1890:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2135              		.loc 1 1890 0
 2136 0124 18F0100F 		tst	r8, #16
 2137 0128 04D0     		beq	.L145
1893:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2138              		.loc 1 1893 0
 2139 012a 4BF4806B 		orr	fp, fp, #1024
 2140              	.LVL211:
1896:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 2141              		.loc 1 1896 0
 2142 012e 2B68     		ldr	r3, [r5]
 2143 0130 1022     		movs	r2, #16
 2144 0132 1A61     		str	r2, [r3, #16]
 2145              	.L145:
1901:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2146              		.loc 1 1901 0
 2147 0134 14F0200F 		tst	r4, #32
 2148 0138 08D0     		beq	.L146
1903:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2149              		.loc 1 1903 0
 2150 013a 18F0080F 		tst	r8, #8
 2151 013e 05D0     		beq	.L146
1906:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2152              		.loc 1 1906 0
 2153 0140 2B68     		ldr	r3, [r5]
 2154 0142 0822     		movs	r2, #8
 2155 0144 1A61     		str	r2, [r3, #16]
1914:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2156              		.loc 1 1914 0
 2157 0146 2846     		mov	r0, r5
 2158 0148 FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2159              	.LVL212:
 2160              	.L146:
1920:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2161              		.loc 1 1920 0
 2162 014c 14F0100F 		tst	r4, #16
 2163 0150 07D0     		beq	.L147
1923:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2164              		.loc 1 1923 0
 2165 0152 2B68     		ldr	r3, [r5]
 2166 0154 1B69     		ldr	r3, [r3, #16]
 2167 0156 13F0030F 		tst	r3, #3
 2168 015a 02D0     		beq	.L147
ARM GAS  /tmp/cck8VBJ0.s 			page 100


1931:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2169              		.loc 1 1931 0
 2170 015c 2846     		mov	r0, r5
 2171 015e FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2172              	.LVL213:
 2173              	.L147:
1937:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2174              		.loc 1 1937 0
 2175 0162 14F4003F 		tst	r4, #131072
 2176 0166 08D0     		beq	.L148
1939:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2177              		.loc 1 1939 0
 2178 0168 17F0100F 		tst	r7, #16
 2179 016c 05D0     		beq	.L148
1942:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2180              		.loc 1 1942 0
 2181 016e 2B68     		ldr	r3, [r5]
 2182 0170 1022     		movs	r2, #16
 2183 0172 5A60     		str	r2, [r3, #4]
1950:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2184              		.loc 1 1950 0
 2185 0174 2846     		mov	r0, r5
 2186 0176 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2187              	.LVL214:
 2188              	.L148:
1956:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2189              		.loc 1 1956 0
 2190 017a 14F4803F 		tst	r4, #65536
 2191 017e 08D0     		beq	.L149
1958:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2192              		.loc 1 1958 0
 2193 0180 17F0080F 		tst	r7, #8
 2194 0184 05D0     		beq	.L149
1961:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2195              		.loc 1 1961 0
 2196 0186 2B68     		ldr	r3, [r5]
 2197 0188 0822     		movs	r2, #8
 2198 018a 5A60     		str	r2, [r3, #4]
1969:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2199              		.loc 1 1969 0
 2200 018c 2846     		mov	r0, r5
 2201 018e FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2202              	.LVL215:
 2203              	.L149:
1975:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2204              		.loc 1 1975 0
 2205 0192 14F4004F 		tst	r4, #32768
 2206 0196 4ED0     		beq	.L150
1977:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
 2207              		.loc 1 1977 0
 2208 0198 17F0040F 		tst	r7, #4
 2209 019c 48D0     		beq	.L151
1980:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2210              		.loc 1 1980 0
 2211 019e 14F4807F 		tst	r4, #256
 2212 01a2 04D0     		beq	.L152
1980:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
ARM GAS  /tmp/cck8VBJ0.s 			page 101


 2213              		.loc 1 1980 0 is_stmt 0 discriminator 1
 2214 01a4 1AF0010F 		tst	r10, #1
 2215 01a8 01D0     		beq	.L152
1984:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2216              		.loc 1 1984 0 is_stmt 1
 2217 01aa 4BF0010B 		orr	fp, fp, #1
 2218              	.LVL216:
 2219              	.L152:
1990:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2220              		.loc 1 1990 0
 2221 01ae 14F4007F 		tst	r4, #512
 2222 01b2 04D0     		beq	.L153
1990:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2223              		.loc 1 1990 0 is_stmt 0 discriminator 1
 2224 01b4 1AF0020F 		tst	r10, #2
 2225 01b8 01D0     		beq	.L153
1994:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2226              		.loc 1 1994 0 is_stmt 1
 2227 01ba 4BF0020B 		orr	fp, fp, #2
 2228              	.LVL217:
 2229              	.L153:
2000:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2230              		.loc 1 2000 0
 2231 01be 14F4806F 		tst	r4, #1024
 2232 01c2 04D0     		beq	.L154
2000:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2233              		.loc 1 2000 0 is_stmt 0 discriminator 1
 2234 01c4 1AF0040F 		tst	r10, #4
 2235 01c8 01D0     		beq	.L154
2004:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2236              		.loc 1 2004 0 is_stmt 1
 2237 01ca 4BF0040B 		orr	fp, fp, #4
 2238              	.LVL218:
 2239              	.L154:
2010:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2240              		.loc 1 2010 0
 2241 01ce 14F4006F 		tst	r4, #2048
 2242 01d2 2DD0     		beq	.L151
2010:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2243              		.loc 1 2010 0 is_stmt 0 discriminator 1
 2244 01d4 1AF0700A 		ands	r10, r10, #112
 2245              	.LVL219:
 2246 01d8 2AD0     		beq	.L151
2013:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****         {
 2247              		.loc 1 2013 0 is_stmt 1
 2248 01da BAF1300F 		cmp	r10, #48
 2249 01de 17D0     		beq	.L156
 2250 01e0 06D8     		bhi	.L157
 2251 01e2 BAF1100F 		cmp	r10, #16
 2252 01e6 0DD0     		beq	.L158
 2253 01e8 BAF1200F 		cmp	r10, #32
 2254 01ec 0DD0     		beq	.L159
 2255 01ee 1AE0     		b	.L155
 2256              	.L157:
 2257 01f0 BAF1500F 		cmp	r10, #80
 2258 01f4 12D0     		beq	.L160
 2259 01f6 BAF1600F 		cmp	r10, #96
ARM GAS  /tmp/cck8VBJ0.s 			page 102


 2260 01fa 12D0     		beq	.L161
 2261 01fc BAF1400F 		cmp	r10, #64
 2262 0200 11D1     		bne	.L155
 2263 0202 08E0     		b	.L162
 2264              	.L158:
2017:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2265              		.loc 1 2017 0
 2266 0204 4BF0080B 		orr	fp, fp, #8
 2267              	.LVL220:
2018:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
 2268              		.loc 1 2018 0
 2269 0208 0DE0     		b	.L155
 2270              	.L159:
2021:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2271              		.loc 1 2021 0
 2272 020a 4BF0100B 		orr	fp, fp, #16
 2273              	.LVL221:
2022:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2274              		.loc 1 2022 0
 2275 020e 0AE0     		b	.L155
 2276              	.L156:
2025:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2277              		.loc 1 2025 0
 2278 0210 4BF0200B 		orr	fp, fp, #32
 2279              	.LVL222:
2026:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2280              		.loc 1 2026 0
 2281 0214 07E0     		b	.L155
 2282              	.L162:
2029:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2283              		.loc 1 2029 0
 2284 0216 4BF0400B 		orr	fp, fp, #64
 2285              	.LVL223:
2030:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2286              		.loc 1 2030 0
 2287 021a 04E0     		b	.L155
 2288              	.L160:
2033:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2289              		.loc 1 2033 0
 2290 021c 4BF0800B 		orr	fp, fp, #128
 2291              	.LVL224:
2034:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2292              		.loc 1 2034 0
 2293 0220 01E0     		b	.L155
 2294              	.L161:
2037:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             break;
 2295              		.loc 1 2037 0
 2296 0222 4BF4807B 		orr	fp, fp, #256
 2297              	.LVL225:
 2298              	.L155:
2044:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       }
 2299              		.loc 1 2044 0
 2300 0226 2A68     		ldr	r2, [r5]
 2301 0228 9369     		ldr	r3, [r2, #24]
 2302 022a 23F07003 		bic	r3, r3, #112
 2303 022e 9361     		str	r3, [r2, #24]
 2304              	.L151:
ARM GAS  /tmp/cck8VBJ0.s 			page 103


2049:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
 2305              		.loc 1 2049 0
 2306 0230 2B68     		ldr	r3, [r5]
 2307 0232 0422     		movs	r2, #4
 2308 0234 5A60     		str	r2, [r3, #4]
 2309              	.L150:
2053:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
 2310              		.loc 1 2053 0
 2311 0236 BBF1000F 		cmp	fp, #0
 2312 023a 06D0     		beq	.L131
2056:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
 2313              		.loc 1 2056 0
 2314 023c 6B6A     		ldr	r3, [r5, #36]
 2315 023e 4BEA0303 		orr	r3, fp, r3
 2316 0242 6B62     		str	r3, [r5, #36]
2064:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2317              		.loc 1 2064 0
 2318 0244 2846     		mov	r0, r5
 2319 0246 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2320              	.LVL226:
 2321              	.L131:
 2322 024a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2323              		.cfi_endproc
 2324              	.LFE151:
 2326 024e 00BF     		.section	.text.HAL_CAN_GetState,"ax",%progbits
 2327              		.align	2
 2328              		.global	HAL_CAN_GetState
 2329              		.thumb
 2330              		.thumb_func
 2332              	HAL_CAN_GetState:
 2333              	.LFB165:
2311:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2312:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   UNUSED(hcan);
2313:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2314:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2315:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
2316:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****    */
2317:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
2318:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2319:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2320:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @}
2321:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2322:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2323:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
2324:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
2325:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****  *
2326:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @verbatim
2327:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
2328:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****             ##### Peripheral State and Error functions #####
2329:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   ==============================================================================
2330:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     [..]
2331:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     This subsection provides functions allowing to :
2332:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
2333:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
2334:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
2335:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2336:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** @endverbatim
ARM GAS  /tmp/cck8VBJ0.s 			page 104


2337:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @{
2338:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2339:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2340:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2341:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return the CAN state.
2342:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2343:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2344:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL state
2345:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2346:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
2347:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2334              		.loc 1 2347 0
 2335              		.cfi_startproc
 2336              		@ args = 0, pretend = 0, frame = 0
 2337              		@ frame_needed = 0, uses_anonymous_args = 0
 2338              		@ link register save eliminated.
 2339              	.LVL227:
2348:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2340              		.loc 1 2348 0
 2341 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2342 0004 DBB2     		uxtb	r3, r3
 2343              	.LVL228:
2349:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2350:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2344              		.loc 1 2350 0
 2345 0006 5A1E     		subs	r2, r3, #1
 2346 0008 D2B2     		uxtb	r2, r2
 2347 000a 012A     		cmp	r2, #1
 2348 000c 0CD8     		bhi	.L170
2351:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2352:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
2353:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
2354:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 2349              		.loc 1 2354 0
 2350 000e 0268     		ldr	r2, [r0]
 2351 0010 5168     		ldr	r1, [r2, #4]
 2352 0012 11F0020F 		tst	r1, #2
 2353 0016 04D1     		bne	.L171
2355:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
2356:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Sleep mode is active */
2357:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
2358:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
2359:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Check sleep mode request flag */
2360:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 2354              		.loc 1 2360 0
 2355 0018 1268     		ldr	r2, [r2]
 2356 001a 12F0020F 		tst	r2, #2
 2357 001e 02D1     		bne	.L172
 2358 0020 02E0     		b	.L170
 2359              	.L171:
2357:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
 2360              		.loc 1 2357 0
 2361 0022 0423     		movs	r3, #4
 2362              	.LVL229:
 2363 0024 00E0     		b	.L170
 2364              	.LVL230:
 2365              	.L172:
ARM GAS  /tmp/cck8VBJ0.s 			page 105


2361:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
2362:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Sleep mode request is pending */
2363:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
 2366              		.loc 1 2363 0
 2367 0026 0323     		movs	r3, #3
 2368              	.LVL231:
 2369              	.L170:
2364:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
2365:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     else
2366:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     {
2367:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       /* Neither sleep mode request nor sleep mode acknowledge */
2368:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     }
2369:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2370:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2371:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return CAN state */
2372:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return state;
2373:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2370              		.loc 1 2373 0
 2371 0028 1846     		mov	r0, r3
 2372              	.LVL232:
 2373 002a 7047     		bx	lr
 2374              		.cfi_endproc
 2375              	.LFE165:
 2377              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 2378              		.align	2
 2379              		.global	HAL_CAN_GetError
 2380              		.thumb
 2381              		.thumb_func
 2383              	HAL_CAN_GetError:
 2384              	.LFB166:
2374:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2375:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2376:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Return the CAN error code.
2377:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2378:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2379:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval CAN Error Code
2380:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2381:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
2382:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2385              		.loc 1 2382 0
 2386              		.cfi_startproc
 2387              		@ args = 0, pretend = 0, frame = 0
 2388              		@ frame_needed = 0, uses_anonymous_args = 0
 2389              		@ link register save eliminated.
 2390              	.LVL233:
2383:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return CAN error code */
2384:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return hcan->ErrorCode;
 2391              		.loc 1 2384 0
 2392 0000 406A     		ldr	r0, [r0, #36]
 2393              	.LVL234:
2385:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2394              		.loc 1 2385 0
 2395 0002 7047     		bx	lr
 2396              		.cfi_endproc
 2397              	.LFE166:
 2399              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 2400              		.align	2
ARM GAS  /tmp/cck8VBJ0.s 			page 106


 2401              		.global	HAL_CAN_ResetError
 2402              		.thumb
 2403              		.thumb_func
 2405              	HAL_CAN_ResetError:
 2406              	.LFB167:
2386:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2387:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** /**
2388:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @brief  Reset the CAN error code.
2389:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2390:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2391:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   * @retval HAL status
2392:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   */
2393:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
2394:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** {
 2407              		.loc 1 2394 0
 2408              		.cfi_startproc
 2409              		@ args = 0, pretend = 0, frame = 0
 2410              		@ frame_needed = 0, uses_anonymous_args = 0
 2411              		@ link register save eliminated.
 2412              	.LVL235:
2395:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
2396:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2413              		.loc 1 2396 0
 2414 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2415              	.LVL236:
2397:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2398:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2416              		.loc 1 2398 0
 2417 0004 013B     		subs	r3, r3, #1
 2418              	.LVL237:
 2419 0006 DBB2     		uxtb	r3, r3
 2420 0008 012B     		cmp	r3, #1
 2421 000a 03D8     		bhi	.L175
2399:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2400:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
2401:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Reset CAN error code */
2402:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode = 0U;
 2422              		.loc 1 2402 0
 2423 000c 0023     		movs	r3, #0
 2424 000e 4362     		str	r3, [r0, #36]
2395:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2425              		.loc 1 2395 0
 2426 0010 1846     		mov	r0, r3
 2427              	.LVL238:
 2428 0012 7047     		bx	lr
 2429              	.LVL239:
 2430              	.L175:
2403:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2404:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   else
2405:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   {
2406:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     /* Update error code */
2407:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2431              		.loc 1 2407 0
 2432 0014 436A     		ldr	r3, [r0, #36]
 2433 0016 43F48023 		orr	r3, r3, #262144
 2434 001a 4362     		str	r3, [r0, #36]
 2435              	.LVL240:
ARM GAS  /tmp/cck8VBJ0.s 			page 107


2408:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2409:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****     status = HAL_ERROR;
 2436              		.loc 1 2409 0
 2437 001c 0120     		movs	r0, #1
 2438              	.LVL241:
2410:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   }
2411:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** 
2412:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   /* Return the status */
2413:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c ****   return status;
2414:Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_can.c **** }
 2439              		.loc 1 2414 0
 2440 001e 7047     		bx	lr
 2441              		.cfi_endproc
 2442              	.LFE167:
 2444              		.text
 2445              	.Letext0:
 2446              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 2447              		.file 4 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 2448              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l431xx.h"
 2449              		.file 6 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 2450              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 2451              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
 2452              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
 2453              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
ARM GAS  /tmp/cck8VBJ0.s 			page 108


DEFINED SYMBOLS
                            *ABS*:00000000 stm32l4xx_hal_can.c
     /tmp/cck8VBJ0.s:22     .text.HAL_CAN_MspInit:00000000 $t
     /tmp/cck8VBJ0.s:27     .text.HAL_CAN_MspInit:00000000 HAL_CAN_MspInit
     /tmp/cck8VBJ0.s:41     .text.HAL_CAN_Init:00000000 $t
     /tmp/cck8VBJ0.s:46     .text.HAL_CAN_Init:00000000 HAL_CAN_Init
     /tmp/cck8VBJ0.s:283    .text.HAL_CAN_MspDeInit:00000000 $t
     /tmp/cck8VBJ0.s:288    .text.HAL_CAN_MspDeInit:00000000 HAL_CAN_MspDeInit
     /tmp/cck8VBJ0.s:301    .text.HAL_CAN_ConfigFilter:00000000 $t
     /tmp/cck8VBJ0.s:306    .text.HAL_CAN_ConfigFilter:00000000 HAL_CAN_ConfigFilter
     /tmp/cck8VBJ0.s:492    .text.HAL_CAN_Start:00000000 $t
     /tmp/cck8VBJ0.s:497    .text.HAL_CAN_Start:00000000 HAL_CAN_Start
     /tmp/cck8VBJ0.s:577    .text.HAL_CAN_Stop:00000000 $t
     /tmp/cck8VBJ0.s:582    .text.HAL_CAN_Stop:00000000 HAL_CAN_Stop
     /tmp/cck8VBJ0.s:664    .text.HAL_CAN_DeInit:00000000 $t
     /tmp/cck8VBJ0.s:669    .text.HAL_CAN_DeInit:00000000 HAL_CAN_DeInit
     /tmp/cck8VBJ0.s:718    .text.HAL_CAN_RequestSleep:00000000 $t
     /tmp/cck8VBJ0.s:723    .text.HAL_CAN_RequestSleep:00000000 HAL_CAN_RequestSleep
     /tmp/cck8VBJ0.s:764    .text.HAL_CAN_WakeUp:00000000 $t
     /tmp/cck8VBJ0.s:769    .text.HAL_CAN_WakeUp:00000000 HAL_CAN_WakeUp
     /tmp/cck8VBJ0.s:846    .text.HAL_CAN_WakeUp:00000054 $d
     /tmp/cck8VBJ0.s:851    .text.HAL_CAN_IsSleepActive:00000000 $t
     /tmp/cck8VBJ0.s:856    .text.HAL_CAN_IsSleepActive:00000000 HAL_CAN_IsSleepActive
     /tmp/cck8VBJ0.s:898    .text.HAL_CAN_AddTxMessage:00000000 $t
     /tmp/cck8VBJ0.s:903    .text.HAL_CAN_AddTxMessage:00000000 HAL_CAN_AddTxMessage
     /tmp/cck8VBJ0.s:1074   .text.HAL_CAN_AbortTxRequest:00000000 $t
     /tmp/cck8VBJ0.s:1079   .text.HAL_CAN_AbortTxRequest:00000000 HAL_CAN_AbortTxRequest
     /tmp/cck8VBJ0.s:1147   .text.HAL_CAN_GetTxMailboxesFreeLevel:00000000 $t
     /tmp/cck8VBJ0.s:1152   .text.HAL_CAN_GetTxMailboxesFreeLevel:00000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/cck8VBJ0.s:1212   .text.HAL_CAN_IsTxMessagePending:00000000 $t
     /tmp/cck8VBJ0.s:1217   .text.HAL_CAN_IsTxMessagePending:00000000 HAL_CAN_IsTxMessagePending
     /tmp/cck8VBJ0.s:1261   .text.HAL_CAN_GetTxTimestamp:00000000 $t
     /tmp/cck8VBJ0.s:1266   .text.HAL_CAN_GetTxTimestamp:00000000 HAL_CAN_GetTxTimestamp
     /tmp/cck8VBJ0.s:1333   .text.HAL_CAN_GetRxMessage:00000000 $t
     /tmp/cck8VBJ0.s:1338   .text.HAL_CAN_GetRxMessage:00000000 HAL_CAN_GetRxMessage
     /tmp/cck8VBJ0.s:1539   .text.HAL_CAN_GetRxFifoFillLevel:00000000 $t
     /tmp/cck8VBJ0.s:1544   .text.HAL_CAN_GetRxFifoFillLevel:00000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/cck8VBJ0.s:1590   .text.HAL_CAN_ActivateNotification:00000000 $t
     /tmp/cck8VBJ0.s:1595   .text.HAL_CAN_ActivateNotification:00000000 HAL_CAN_ActivateNotification
     /tmp/cck8VBJ0.s:1637   .text.HAL_CAN_DeactivateNotification:00000000 $t
     /tmp/cck8VBJ0.s:1642   .text.HAL_CAN_DeactivateNotification:00000000 HAL_CAN_DeactivateNotification
     /tmp/cck8VBJ0.s:1684   .text.HAL_CAN_TxMailbox0CompleteCallback:00000000 $t
     /tmp/cck8VBJ0.s:1689   .text.HAL_CAN_TxMailbox0CompleteCallback:00000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/cck8VBJ0.s:1702   .text.HAL_CAN_TxMailbox1CompleteCallback:00000000 $t
     /tmp/cck8VBJ0.s:1707   .text.HAL_CAN_TxMailbox1CompleteCallback:00000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/cck8VBJ0.s:1720   .text.HAL_CAN_TxMailbox2CompleteCallback:00000000 $t
     /tmp/cck8VBJ0.s:1725   .text.HAL_CAN_TxMailbox2CompleteCallback:00000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/cck8VBJ0.s:1738   .text.HAL_CAN_TxMailbox0AbortCallback:00000000 $t
     /tmp/cck8VBJ0.s:1743   .text.HAL_CAN_TxMailbox0AbortCallback:00000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/cck8VBJ0.s:1756   .text.HAL_CAN_TxMailbox1AbortCallback:00000000 $t
     /tmp/cck8VBJ0.s:1761   .text.HAL_CAN_TxMailbox1AbortCallback:00000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/cck8VBJ0.s:1774   .text.HAL_CAN_TxMailbox2AbortCallback:00000000 $t
     /tmp/cck8VBJ0.s:1779   .text.HAL_CAN_TxMailbox2AbortCallback:00000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/cck8VBJ0.s:1792   .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 $t
     /tmp/cck8VBJ0.s:1797   .text.HAL_CAN_RxFifo0MsgPendingCallback:00000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/cck8VBJ0.s:1810   .text.HAL_CAN_RxFifo0FullCallback:00000000 $t
     /tmp/cck8VBJ0.s:1815   .text.HAL_CAN_RxFifo0FullCallback:00000000 HAL_CAN_RxFifo0FullCallback
ARM GAS  /tmp/cck8VBJ0.s 			page 109


     /tmp/cck8VBJ0.s:1828   .text.HAL_CAN_RxFifo1MsgPendingCallback:00000000 $t
     /tmp/cck8VBJ0.s:1833   .text.HAL_CAN_RxFifo1MsgPendingCallback:00000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/cck8VBJ0.s:1846   .text.HAL_CAN_RxFifo1FullCallback:00000000 $t
     /tmp/cck8VBJ0.s:1851   .text.HAL_CAN_RxFifo1FullCallback:00000000 HAL_CAN_RxFifo1FullCallback
     /tmp/cck8VBJ0.s:1864   .text.HAL_CAN_SleepCallback:00000000 $t
     /tmp/cck8VBJ0.s:1869   .text.HAL_CAN_SleepCallback:00000000 HAL_CAN_SleepCallback
     /tmp/cck8VBJ0.s:1882   .text.HAL_CAN_WakeUpFromRxMsgCallback:00000000 $t
     /tmp/cck8VBJ0.s:1887   .text.HAL_CAN_WakeUpFromRxMsgCallback:00000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/cck8VBJ0.s:1900   .text.HAL_CAN_ErrorCallback:00000000 $t
     /tmp/cck8VBJ0.s:1905   .text.HAL_CAN_ErrorCallback:00000000 HAL_CAN_ErrorCallback
     /tmp/cck8VBJ0.s:1918   .text.HAL_CAN_IRQHandler:00000000 $t
     /tmp/cck8VBJ0.s:1923   .text.HAL_CAN_IRQHandler:00000000 HAL_CAN_IRQHandler
     /tmp/cck8VBJ0.s:2327   .text.HAL_CAN_GetState:00000000 $t
     /tmp/cck8VBJ0.s:2332   .text.HAL_CAN_GetState:00000000 HAL_CAN_GetState
     /tmp/cck8VBJ0.s:2378   .text.HAL_CAN_GetError:00000000 $t
     /tmp/cck8VBJ0.s:2383   .text.HAL_CAN_GetError:00000000 HAL_CAN_GetError
     /tmp/cck8VBJ0.s:2400   .text.HAL_CAN_ResetError:00000000 $t
     /tmp/cck8VBJ0.s:2405   .text.HAL_CAN_ResetError:00000000 HAL_CAN_ResetError
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
