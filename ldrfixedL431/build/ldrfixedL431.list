
ldrfixedL431.elf:     file format elf32-littlearm


Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004480 	.word	0x08004480

080001b4 <frame_dummy>:
 80001b4:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <frame_dummy+0x24>)
 80001b6:	b510      	push	{r4, lr}
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4908      	ldr	r1, [pc, #32]	; (80001dc <frame_dummy+0x28>)
 80001bc:	4808      	ldr	r0, [pc, #32]	; (80001e0 <frame_dummy+0x2c>)
 80001be:	f3af 8000 	nop.w
 80001c2:	4808      	ldr	r0, [pc, #32]	; (80001e4 <frame_dummy+0x30>)
 80001c4:	6803      	ldr	r3, [r0, #0]
 80001c6:	b903      	cbnz	r3, 80001ca <frame_dummy+0x16>
 80001c8:	bd10      	pop	{r4, pc}
 80001ca:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <frame_dummy+0x34>)
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d0fb      	beq.n	80001c8 <frame_dummy+0x14>
 80001d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001d4:	4718      	bx	r3
 80001d6:	bf00      	nop
 80001d8:	00000000 	.word	0x00000000
 80001dc:	2000007c 	.word	0x2000007c
 80001e0:	08004480 	.word	0x08004480
 80001e4:	20000078 	.word	0x20000078
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97e 	b.w	80005a4 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460e      	mov	r6, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9d08      	ldr	r5, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d150      	bne.n	8000372 <__udivmoddi4+0xb2>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96c      	bls.n	80003b0 <__udivmoddi4+0xf0>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0420 	rsb	r4, lr, #32
 80002e4:	fa20 f404 	lsr.w	r4, r0, r4
 80002e8:	fa01 f60e 	lsl.w	r6, r1, lr
 80002ec:	ea44 0c06 	orr.w	ip, r4, r6
 80002f0:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	fbbc f0f9 	udiv	r0, ip, r9
 8000302:	fa1f f887 	uxth.w	r8, r7
 8000306:	fb09 c610 	mls	r6, r9, r0, ip
 800030a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800030e:	fb00 f308 	mul.w	r3, r0, r8
 8000312:	42b3      	cmp	r3, r6
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x6a>
 8000316:	19f6      	adds	r6, r6, r7
 8000318:	f100 32ff 	add.w	r2, r0, #4294967295
 800031c:	f080 8122 	bcs.w	8000564 <__udivmoddi4+0x2a4>
 8000320:	42b3      	cmp	r3, r6
 8000322:	f240 811f 	bls.w	8000564 <__udivmoddi4+0x2a4>
 8000326:	3802      	subs	r0, #2
 8000328:	443e      	add	r6, r7
 800032a:	1af6      	subs	r6, r6, r3
 800032c:	b2a2      	uxth	r2, r4
 800032e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000332:	fb09 6613 	mls	r6, r9, r3, r6
 8000336:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800033a:	fb03 f808 	mul.w	r8, r3, r8
 800033e:	45a0      	cmp	r8, r4
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0x96>
 8000342:	19e4      	adds	r4, r4, r7
 8000344:	f103 32ff 	add.w	r2, r3, #4294967295
 8000348:	f080 810a 	bcs.w	8000560 <__udivmoddi4+0x2a0>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f240 8107 	bls.w	8000560 <__udivmoddi4+0x2a0>
 8000352:	3b02      	subs	r3, #2
 8000354:	443c      	add	r4, r7
 8000356:	ebc8 0404 	rsb	r4, r8, r4
 800035a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800035e:	2100      	movs	r1, #0
 8000360:	2d00      	cmp	r5, #0
 8000362:	d062      	beq.n	800042a <__udivmoddi4+0x16a>
 8000364:	fa24 f40e 	lsr.w	r4, r4, lr
 8000368:	2300      	movs	r3, #0
 800036a:	602c      	str	r4, [r5, #0]
 800036c:	606b      	str	r3, [r5, #4]
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	428b      	cmp	r3, r1
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0xc6>
 8000376:	2d00      	cmp	r5, #0
 8000378:	d055      	beq.n	8000426 <__udivmoddi4+0x166>
 800037a:	2100      	movs	r1, #0
 800037c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000380:	4608      	mov	r0, r1
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x1f0>
 8000390:	42b3      	cmp	r3, r6
 8000392:	d302      	bcc.n	800039a <__udivmoddi4+0xda>
 8000394:	4282      	cmp	r2, r0
 8000396:	f200 80f8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800039a:	1a84      	subs	r4, r0, r2
 800039c:	eb66 0603 	sbc.w	r6, r6, r3
 80003a0:	2001      	movs	r0, #1
 80003a2:	46b4      	mov	ip, r6
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d040      	beq.n	800042a <__udivmoddi4+0x16a>
 80003a8:	e885 1010 	stmia.w	r5, {r4, ip}
 80003ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b0:	b912      	cbnz	r2, 80003b8 <__udivmoddi4+0xf8>
 80003b2:	2701      	movs	r7, #1
 80003b4:	fbb7 f7f2 	udiv	r7, r7, r2
 80003b8:	fab7 fe87 	clz	lr, r7
 80003bc:	f1be 0f00 	cmp.w	lr, #0
 80003c0:	d135      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c2:	1bf3      	subs	r3, r6, r7
 80003c4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d2:	0c22      	lsrs	r2, r4, #16
 80003d4:	fb08 3610 	mls	r6, r8, r0, r3
 80003d8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 80003dc:	fb0c f300 	mul.w	r3, ip, r0
 80003e0:	42b3      	cmp	r3, r6
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19f6      	adds	r6, r6, r7
 80003e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42b3      	cmp	r3, r6
 80003ee:	f200 80ce 	bhi.w	800058e <__udivmoddi4+0x2ce>
 80003f2:	4610      	mov	r0, r2
 80003f4:	1af6      	subs	r6, r6, r3
 80003f6:	b2a2      	uxth	r2, r4
 80003f8:	fbb6 f3f8 	udiv	r3, r6, r8
 80003fc:	fb08 6613 	mls	r6, r8, r3, r6
 8000400:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000404:	fb0c fc03 	mul.w	ip, ip, r3
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b5 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 800041a:	4613      	mov	r3, r2
 800041c:	ebcc 0404 	rsb	r4, ip, r4
 8000420:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000424:	e79c      	b.n	8000360 <__udivmoddi4+0xa0>
 8000426:	4629      	mov	r1, r5
 8000428:	4628      	mov	r0, r5
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0120 	rsb	r1, lr, #32
 8000432:	fa06 f30e 	lsl.w	r3, r6, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f901 	lsr.w	r9, r0, r1
 800043e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000442:	40ce      	lsrs	r6, r1
 8000444:	ea49 0903 	orr.w	r9, r9, r3
 8000448:	fbb6 faf8 	udiv	sl, r6, r8
 800044c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000450:	fb08 661a 	mls	r6, r8, sl, r6
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800045c:	fb0a f20c 	mul.w	r2, sl, ip
 8000460:	429a      	cmp	r2, r3
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d90a      	bls.n	800047e <__udivmoddi4+0x1be>
 8000468:	19db      	adds	r3, r3, r7
 800046a:	f10a 31ff 	add.w	r1, sl, #4294967295
 800046e:	f080 8087 	bcs.w	8000580 <__udivmoddi4+0x2c0>
 8000472:	429a      	cmp	r2, r3
 8000474:	f240 8084 	bls.w	8000580 <__udivmoddi4+0x2c0>
 8000478:	f1aa 0a02 	sub.w	sl, sl, #2
 800047c:	443b      	add	r3, r7
 800047e:	1a9b      	subs	r3, r3, r2
 8000480:	fa1f f989 	uxth.w	r9, r9
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000490:	fb01 f60c 	mul.w	r6, r1, ip
 8000494:	429e      	cmp	r6, r3
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x1e8>
 8000498:	19db      	adds	r3, r3, r7
 800049a:	f101 32ff 	add.w	r2, r1, #4294967295
 800049e:	d26b      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d969      	bls.n	8000578 <__udivmoddi4+0x2b8>
 80004a4:	3902      	subs	r1, #2
 80004a6:	443b      	add	r3, r7
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80004ae:	e78e      	b.n	80003ce <__udivmoddi4+0x10e>
 80004b0:	f1c1 0e20 	rsb	lr, r1, #32
 80004b4:	fa22 f40e 	lsr.w	r4, r2, lr
 80004b8:	408b      	lsls	r3, r1
 80004ba:	4323      	orrs	r3, r4
 80004bc:	fa20 f70e 	lsr.w	r7, r0, lr
 80004c0:	fa06 f401 	lsl.w	r4, r6, r1
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	fa26 f60e 	lsr.w	r6, r6, lr
 80004cc:	433c      	orrs	r4, r7
 80004ce:	fbb6 f9fc 	udiv	r9, r6, ip
 80004d2:	0c27      	lsrs	r7, r4, #16
 80004d4:	fb0c 6619 	mls	r6, ip, r9, r6
 80004d8:	fa1f f883 	uxth.w	r8, r3
 80004dc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 80004e0:	fb09 f708 	mul.w	r7, r9, r8
 80004e4:	42b7      	cmp	r7, r6
 80004e6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ea:	fa00 fa01 	lsl.w	sl, r0, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x242>
 80004f0:	18f6      	adds	r6, r6, r3
 80004f2:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f6:	d241      	bcs.n	800057c <__udivmoddi4+0x2bc>
 80004f8:	42b7      	cmp	r7, r6
 80004fa:	d93f      	bls.n	800057c <__udivmoddi4+0x2bc>
 80004fc:	f1a9 0902 	sub.w	r9, r9, #2
 8000500:	441e      	add	r6, r3
 8000502:	1bf6      	subs	r6, r6, r7
 8000504:	b2a0      	uxth	r0, r4
 8000506:	fbb6 f4fc 	udiv	r4, r6, ip
 800050a:	fb0c 6614 	mls	r6, ip, r4, r6
 800050e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000512:	fb04 f808 	mul.w	r8, r4, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x26a>
 800051a:	18ff      	adds	r7, r7, r3
 800051c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000520:	d228      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d926      	bls.n	8000574 <__udivmoddi4+0x2b4>
 8000526:	3c02      	subs	r4, #2
 8000528:	441f      	add	r7, r3
 800052a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800052e:	ebc8 0707 	rsb	r7, r8, r7
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	4644      	mov	r4, r8
 800053a:	464e      	mov	r6, r9
 800053c:	d314      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	d029      	beq.n	8000594 <__udivmoddi4+0x2d4>
 8000540:	b365      	cbz	r5, 800059c <__udivmoddi4+0x2dc>
 8000542:	ebba 0304 	subs.w	r3, sl, r4
 8000546:	eb67 0706 	sbc.w	r7, r7, r6
 800054a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800054e:	40cb      	lsrs	r3, r1
 8000550:	40cf      	lsrs	r7, r1
 8000552:	ea4e 0303 	orr.w	r3, lr, r3
 8000556:	e885 0088 	stmia.w	r5, {r3, r7}
 800055a:	2100      	movs	r1, #0
 800055c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000560:	4613      	mov	r3, r2
 8000562:	e6f8      	b.n	8000356 <__udivmoddi4+0x96>
 8000564:	4610      	mov	r0, r2
 8000566:	e6e0      	b.n	800032a <__udivmoddi4+0x6a>
 8000568:	ebb8 0402 	subs.w	r4, r8, r2
 800056c:	eb69 0603 	sbc.w	r6, r9, r3
 8000570:	3801      	subs	r0, #1
 8000572:	e7e5      	b.n	8000540 <__udivmoddi4+0x280>
 8000574:	4604      	mov	r4, r0
 8000576:	e7d8      	b.n	800052a <__udivmoddi4+0x26a>
 8000578:	4611      	mov	r1, r2
 800057a:	e795      	b.n	80004a8 <__udivmoddi4+0x1e8>
 800057c:	4681      	mov	r9, r0
 800057e:	e7c0      	b.n	8000502 <__udivmoddi4+0x242>
 8000580:	468a      	mov	sl, r1
 8000582:	e77c      	b.n	800047e <__udivmoddi4+0x1be>
 8000584:	3b02      	subs	r3, #2
 8000586:	443c      	add	r4, r7
 8000588:	e748      	b.n	800041c <__udivmoddi4+0x15c>
 800058a:	4608      	mov	r0, r1
 800058c:	e70a      	b.n	80003a4 <__udivmoddi4+0xe4>
 800058e:	3802      	subs	r0, #2
 8000590:	443e      	add	r6, r7
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x134>
 8000594:	45c2      	cmp	sl, r8
 8000596:	d3e7      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 8000598:	463e      	mov	r6, r7
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x280>
 800059c:	4629      	mov	r1, r5
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	2400      	movs	r4, #0
 80005ae:	9403      	str	r4, [sp, #12]
 80005b0:	9404      	str	r4, [sp, #16]
 80005b2:	9405      	str	r4, [sp, #20]
 80005b4:	9406      	str	r4, [sp, #24]
 80005b6:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <MX_GPIO_Init+0x6c>)
 80005ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80005c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005c4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005c8:	9200      	str	r2, [sp, #0]
 80005ca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ce:	f042 0202 	orr.w	r2, r2, #2
 80005d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80005d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005d6:	f002 0202 	and.w	r2, r2, #2
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e0:	f042 0201 	orr.w	r2, r2, #1
 80005e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80005e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	9302      	str	r3, [sp, #8]
 80005ee:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GRN_Pin|LED_RED_Pin, GPIO_PIN_SET);
 80005f0:	4d09      	ldr	r5, [pc, #36]	; (8000618 <MX_GPIO_Init+0x70>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	2103      	movs	r1, #3
 80005f6:	4628      	mov	r0, r5
 80005f8:	f001 fb7a 	bl	8001cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GRN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GRN_Pin|LED_RED_Pin;
 80005fc:	2303      	movs	r3, #3
 80005fe:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	a903      	add	r1, sp, #12
 800060a:	4628      	mov	r0, r5
 800060c:	f001 fa9c 	bl	8001b48 <HAL_GPIO_Init>

}
 8000610:	b009      	add	sp, #36	; 0x24
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	48000400 	.word	0x48000400

0800061c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800061c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 800061e:	6802      	ldr	r2, [r0, #0]
 8000620:	4b02      	ldr	r3, [pc, #8]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000622:	429a      	cmp	r2, r3
 8000624:	d101      	bne.n	800062a <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 8000626:	f000 fb37 	bl	8000c98 <HAL_IncTick>
 800062a:	bd08      	pop	{r3, pc}
 800062c:	40014400 	.word	0x40014400

08000630 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
 8000632:	e7fe      	b.n	8000632 <Error_Handler+0x2>

08000634 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000634:	b508      	push	{r3, lr}
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000636:	480d      	ldr	r0, [pc, #52]	; (800066c <MX_CAN1_Init+0x38>)
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_CAN1_Init+0x3c>)
 800063a:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000640:	2300      	movs	r3, #0
 8000642:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000644:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000646:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800064a:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800064c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000650:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000652:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000654:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000656:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000658:	2201      	movs	r2, #1
 800065a:	76c2      	strb	r2, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800065c:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800065e:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000660:	f001 fc3c 	bl	8001edc <HAL_CAN_Init>
 8000664:	b108      	cbz	r0, 800066a <MX_CAN1_Init+0x36>
  {
    Error_Handler();
 8000666:	f7ff ffe3 	bl	8000630 <Error_Handler>
 800066a:	bd08      	pop	{r3, pc}
 800066c:	200009c0 	.word	0x200009c0
 8000670:	40006400 	.word	0x40006400

08000674 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000674:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000676:	480b      	ldr	r0, [pc, #44]	; (80006a4 <MX_USART1_UART_Init+0x30>)
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_USART1_UART_Init+0x34>)
 800067a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800067c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000680:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	2300      	movs	r3, #0
 8000684:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000686:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000688:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800068a:	220c      	movs	r2, #12
 800068c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000692:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000696:	f002 fe77 	bl	8003388 <HAL_UART_Init>
 800069a:	b108      	cbz	r0, 80006a0 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
 800069c:	f7ff ffc8 	bl	8000630 <Error_Handler>
 80006a0:	bd08      	pop	{r3, pc}
 80006a2:	bf00      	nop
 80006a4:	20000938 	.word	0x20000938
 80006a8:	40013800 	.word	0x40013800

080006ac <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80006ac:	b510      	push	{r4, lr}
 80006ae:	b09a      	sub	sp, #104	; 0x68

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b0:	2400      	movs	r4, #0
 80006b2:	9416      	str	r4, [sp, #88]	; 0x58
 80006b4:	9417      	str	r4, [sp, #92]	; 0x5c
 80006b6:	9418      	str	r4, [sp, #96]	; 0x60
 80006b8:	9419      	str	r4, [sp, #100]	; 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ba:	9413      	str	r4, [sp, #76]	; 0x4c
 80006bc:	9414      	str	r4, [sp, #80]	; 0x50
 80006be:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c0:	940c      	str	r4, [sp, #48]	; 0x30
 80006c2:	940d      	str	r4, [sp, #52]	; 0x34
 80006c4:	940e      	str	r4, [sp, #56]	; 0x38
 80006c6:	940f      	str	r4, [sp, #60]	; 0x3c
 80006c8:	9410      	str	r4, [sp, #64]	; 0x40
 80006ca:	9411      	str	r4, [sp, #68]	; 0x44
 80006cc:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ce:	222c      	movs	r2, #44	; 0x2c
 80006d0:	4621      	mov	r1, r4
 80006d2:	a801      	add	r0, sp, #4
 80006d4:	f002 ff94 	bl	8003600 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80006d8:	4826      	ldr	r0, [pc, #152]	; (8000774 <MX_TIM15_Init+0xc8>)
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <MX_TIM15_Init+0xcc>)
 80006dc:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 16;
 80006de:	2310      	movs	r3, #16
 80006e0:	6043      	str	r3, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e2:	6084      	str	r4, [r0, #8]
  htim15.Init.Period = 65535;
 80006e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e8:	60c3      	str	r3, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ea:	6104      	str	r4, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 80006ec:	6144      	str	r4, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ee:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80006f0:	f002 f850 	bl	8002794 <HAL_TIM_Base_Init>
 80006f4:	b108      	cbz	r0, 80006fa <MX_TIM15_Init+0x4e>
  {
    Error_Handler();
 80006f6:	f7ff ff9b 	bl	8000630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006fa:	a91a      	add	r1, sp, #104	; 0x68
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000704:	481b      	ldr	r0, [pc, #108]	; (8000774 <MX_TIM15_Init+0xc8>)
 8000706:	f002 f927 	bl	8002958 <HAL_TIM_ConfigClockSource>
 800070a:	b108      	cbz	r0, 8000710 <MX_TIM15_Init+0x64>
  {
    Error_Handler();
 800070c:	f7ff ff90 	bl	8000630 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 8000710:	4818      	ldr	r0, [pc, #96]	; (8000774 <MX_TIM15_Init+0xc8>)
 8000712:	f002 f871 	bl	80027f8 <HAL_TIM_OC_Init>
 8000716:	b108      	cbz	r0, 800071c <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8000718:	f7ff ff8a 	bl	8000630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071c:	2300      	movs	r3, #0
 800071e:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000720:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000722:	a913      	add	r1, sp, #76	; 0x4c
 8000724:	4813      	ldr	r0, [pc, #76]	; (8000774 <MX_TIM15_Init+0xc8>)
 8000726:	f002 f989 	bl	8002a3c <HAL_TIMEx_MasterConfigSynchronization>
 800072a:	b108      	cbz	r0, 8000730 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 800072c:	f7ff ff80 	bl	8000630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000730:	2200      	movs	r2, #0
 8000732:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000734:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000736:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000738:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073a:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800073c:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800073e:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000740:	a90c      	add	r1, sp, #48	; 0x30
 8000742:	480c      	ldr	r0, [pc, #48]	; (8000774 <MX_TIM15_Init+0xc8>)
 8000744:	f002 f8c4 	bl	80028d0 <HAL_TIM_OC_ConfigChannel>
 8000748:	b108      	cbz	r0, 800074e <MX_TIM15_Init+0xa2>
  {
    Error_Handler();
 800074a:	f7ff ff71 	bl	8000630 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000752:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000754:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000756:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000758:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800075a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800075e:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000760:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000762:	a901      	add	r1, sp, #4
 8000764:	4803      	ldr	r0, [pc, #12]	; (8000774 <MX_TIM15_Init+0xc8>)
 8000766:	f002 f9a1 	bl	8002aac <HAL_TIMEx_ConfigBreakDeadTime>
 800076a:	b108      	cbz	r0, 8000770 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 800076c:	f7ff ff60 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000770:	b01a      	add	sp, #104	; 0x68
 8000772:	bd10      	pop	{r4, pc}
 8000774:	200008e8 	.word	0x200008e8
 8000778:	40014000 	.word	0x40014000

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b500      	push	{lr}
 800077e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000780:	2244      	movs	r2, #68	; 0x44
 8000782:	2100      	movs	r1, #0
 8000784:	a805      	add	r0, sp, #20
 8000786:	f002 ff3b 	bl	8003600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078a:	2300      	movs	r3, #0
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	9302      	str	r3, [sp, #8]
 8000792:	9303      	str	r3, [sp, #12]
 8000794:	9304      	str	r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000796:	f44f 7000 	mov.w	r0, #512	; 0x200
 800079a:	f001 fb05 	bl	8001da8 <HAL_PWREx_ControlVoltageScaling>
 800079e:	b108      	cbz	r0, 80007a4 <SystemClock_Config+0x28>
  {
    Error_Handler();
 80007a0:	f7ff ff46 	bl	8000630 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a4:	2302      	movs	r3, #2
 80007a6:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ac:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ae:	2210      	movs	r2, #16
 80007b0:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007b6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80007b8:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ba:	2207      	movs	r2, #7
 80007bc:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007be:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80007c0:	2308      	movs	r3, #8
 80007c2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	a805      	add	r0, sp, #20
 80007c6:	f000 fb1d 	bl	8000e04 <HAL_RCC_OscConfig>
 80007ca:	b108      	cbz	r0, 80007d0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80007cc:	f7ff ff30 	bl	8000630 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	9300      	str	r3, [sp, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2303      	movs	r3, #3
 80007d6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2100      	movs	r1, #0
 80007da:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007dc:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	9104      	str	r1, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e0:	4668      	mov	r0, sp
 80007e2:	f000 fe6b 	bl	80014bc <HAL_RCC_ClockConfig>
 80007e6:	b108      	cbz	r0, 80007ec <SystemClock_Config+0x70>
  {
    Error_Handler();
 80007e8:	f7ff ff22 	bl	8000630 <Error_Handler>
  }
}
 80007ec:	b017      	add	sp, #92	; 0x5c
 80007ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80007f2:	bf00      	nop

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN 1 */
   uint32_t dtw; // DTW time
/* --------------------- Type of RESET detection and dispatch ------------------------------------- */
  extern void* __appjump; // Defined in ldr.ld file
  /* Check type of RESET and set us on the correct journey. */
  uint32_t rcc_csr = RCC->CSR;  // Get reset flags
 80007f8:	4b6b      	ldr	r3, [pc, #428]	; (80009a8 <main+0x1b4>)
 80007fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
  RCC->CSR |= (1 << 23); // Bit 23 RMVF: Remove reset flag (prep for next RESET)
 80007fe:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8000802:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000806:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if (rcc_csr & (1 << 29))  // Was it Independent watchdog reset flag?
 800080a:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 800080e:	d008      	beq.n	8000822 <main+0x2e>
  { // Here, yes. This should be the result of a valid load process

    /* Shift vector table to new position. */
    *(uint32_t*)ADDR_SCB_VTOR = 0x8000;
 8000810:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000814:	4b65      	ldr	r3, [pc, #404]	; (80009ac <main+0x1b8>)
 8000816:	601a      	str	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000818:	f3bf 8f4f 	dsb	sy

    __DSB(); // Data barrier sync, JIC

    /* Jump to app. */
    (*(  (void (*)(void))__appjump)  )(); // Indirect via label in .ld file
 800081c:	4b64      	ldr	r3, [pc, #400]	; (80009b0 <main+0x1bc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4798      	blx	r3
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000822:	f000 fa2b 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000826:	f7ff ffa9 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082a:	f7ff febd 	bl	80005a8 <MX_GPIO_Init>
  MX_CAN1_Init();
 800082e:	f7ff ff01 	bl	8000634 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000832:	f7ff ff1f 	bl	8000674 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 8000836:	f7ff ff39 	bl	80006ac <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  DTW_counter_init();
 800083a:	f002 fdf9 	bl	8003430 <DTW_counter_init>

   printf("\n\n\n\r######### ldrfixedL431 STARTS");
 800083e:	485d      	ldr	r0, [pc, #372]	; (80009b4 <main+0x1c0>)
 8000840:	f002 fee6 	bl	8003610 <iprintf>

  #define DTW_INC_printf (1000 * 16000) // 16 MHz sysclock
  uint32_t DTW_next_LED = DTWTIME;
 8000844:	4f5c      	ldr	r7, [pc, #368]	; (80009b8 <main+0x1c4>)
 8000846:	683e      	ldr	r6, [r7, #0]
  #define DTW_INC_LED (250 * 16000)
  uint32_t DTW_next_printf = DTWTIME;
 8000848:	683d      	ldr	r5, [r7, #0]
 
  unsigned int mctr = 0;

  printf ("\n\rControl/status register (RCC_CSR) : %08x\n\r",(unsigned int)RCC->CSR);
 800084a:	4c57      	ldr	r4, [pc, #348]	; (80009a8 <main+0x1b4>)
 800084c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8000850:	485a      	ldr	r0, [pc, #360]	; (80009bc <main+0x1c8>)
 8000852:	f002 fedd 	bl	8003610 <iprintf>
  RCC->CSR |= (1 << 24);
 8000856:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800085a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800085e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  printf ("Control/status register (RCC_CSR) : %08x After RMVF written\n\r",(unsigned int)RCC->CSR);
 8000862:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8000866:	4856      	ldr	r0, [pc, #344]	; (80009c0 <main+0x1cc>)
 8000868:	f002 fed2 	bl	8003610 <iprintf>
  RCC->CSR |= (7 << 29);
 800086c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000870:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000874:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  printf ("Control/status register (RCC_CSR) : %08x After LPWR written\n\r",(unsigned int)RCC->CSR);
 8000878:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800087c:	4851      	ldr	r0, [pc, #324]	; (80009c4 <main+0x1d0>)
 800087e:	f002 fec7 	bl	8003610 <iprintf>

  flashblocksize1 = 2048; // 
 8000882:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000886:	4b50      	ldr	r3, [pc, #320]	; (80009c8 <main+0x1d4>)
 8000888:	601a      	str	r2, [r3, #0]
  unique_id[0] = *(uint32_t*)(ADDR_UNIQUE_ID+0);
 800088a:	4b50      	ldr	r3, [pc, #320]	; (80009cc <main+0x1d8>)
 800088c:	6819      	ldr	r1, [r3, #0]
 800088e:	4850      	ldr	r0, [pc, #320]	; (80009d0 <main+0x1dc>)
 8000890:	6001      	str	r1, [r0, #0]
  unique_id[1] = *(uint32_t*)(ADDR_UNIQUE_ID+1);
 8000892:	3301      	adds	r3, #1
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	6042      	str	r2, [r0, #4]
  unique_id[2] = *(uint32_t*)(ADDR_UNIQUE_ID+2);
 8000898:	3301      	adds	r3, #1
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6083      	str	r3, [r0, #8]
  flashsize = *(uint16_t*)ADDR_FLASH_SIZE;
 800089e:	484d      	ldr	r0, [pc, #308]	; (80009d4 <main+0x1e0>)
 80008a0:	8800      	ldrh	r0, [r0, #0]
 80008a2:	4c4d      	ldr	r4, [pc, #308]	; (80009d8 <main+0x1e4>)
 80008a4:	8020      	strh	r0, [r4, #0]
  printf("\n\rUnique ID : %08X%08X%08X",(unsigned int)unique_id[0],(unsigned int)unique_id[1],(unsigned int)unique_id[2]);
 80008a6:	484d      	ldr	r0, [pc, #308]	; (80009dc <main+0x1e8>)
 80008a8:	f002 feb2 	bl	8003610 <iprintf>
  printf("\n\rFlash size:     %uK\n\r",(unsigned int)flashsize);
 80008ac:	8821      	ldrh	r1, [r4, #0]
 80008ae:	484c      	ldr	r0, [pc, #304]	; (80009e0 <main+0x1ec>)
 80008b0:	f002 feae 	bl	8003610 <iprintf>
//  can_msg_reset_init(pctl1, IAMUNITNUMBER); // Specify CAN ID for this unit for msg caused RESET

// RX msgs begin immediately following enabling CAN interrupts.  Get 'peek' 'toss' of RX msgs going soon.
//  can_driver_enable_interrupts(); // Enable CAN interrupts
/* -------------- Get the program loader stuff setup -------------------------------------- */
  canwinch_ldrproto_init(IAMUNITNUMBER);
 80008b4:	484b      	ldr	r0, [pc, #300]	; (80009e4 <main+0x1f0>)
 80008b6:	f002 fe03 	bl	80034c0 <canwinch_ldrproto_init>
//  printf(  "(uint32_t)*pcrcblk: %08X\n\r", (unsigned int)*pcrcblk++ );

//  uint32_t flashincrement = SYSCLOCKFREQ/6;

  // for debug multipy the increment to give the hapless Op time to think
  uint32_t can_waitdelay_ct = (DTWTIME + 5*SYSCLOCKFREQ); // Set number secs to wait before jumping to app
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	4f4a      	ldr	r7, [pc, #296]	; (80009e8 <main+0x1f4>)
 80008be:	441f      	add	r7, r3

  printf("\n\r\nAddresses: &__appjump %08X   __appjump %08X\n\r\n",(unsigned int)&__appjump, (unsigned int)__appjump);
 80008c0:	4c3b      	ldr	r4, [pc, #236]	; (80009b0 <main+0x1bc>)
 80008c2:	6822      	ldr	r2, [r4, #0]
 80008c4:	4621      	mov	r1, r4
 80008c6:	4849      	ldr	r0, [pc, #292]	; (80009ec <main+0x1f8>)
 80008c8:	f002 fea2 	bl	8003610 <iprintf>
  #define DTW_INC_printf (1000 * 16000) // 16 MHz sysclock
  uint32_t DTW_next_LED = DTWTIME;
  #define DTW_INC_LED (250 * 16000)
  uint32_t DTW_next_printf = DTWTIME;
 
  unsigned int mctr = 0;
 80008cc:	2100      	movs	r1, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//    HAL_Delay(1000);

    if ((int32_t)(DTWTIME - DTW_next_printf) > 0)
 80008ce:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <main+0x1c4>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	1b5b      	subs	r3, r3, r5
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	dd09      	ble.n	80008ec <main+0xf8>
    {
      DTW_next_printf = DTW_next_printf + DTW_INC_printf;
 80008d8:	f505 0574 	add.w	r5, r5, #15990784	; 0xf40000
 80008dc:	f505 5510 	add.w	r5, r5, #9216	; 0x2400
      printf("\n\r%5u ldrfixedL431 waiting",mctr++);
 80008e0:	f101 0801 	add.w	r8, r1, #1
 80008e4:	4842      	ldr	r0, [pc, #264]	; (80009f0 <main+0x1fc>)
 80008e6:	f002 fe93 	bl	8003610 <iprintf>
 80008ea:	4641      	mov	r1, r8
    }

    /* LED blinking */
    if ((int32_t)(DTWTIME - DTW_next_LED) > 0)
 80008ec:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <main+0x1c4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	1b9b      	subs	r3, r3, r6
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	dd10      	ble.n	8000918 <main+0x124>
    {
      DTW_next_LED = DTW_next_LED + DTW_INC_LED;
 80008f6:	f506 1674 	add.w	r6, r6, #3997696	; 0x3d0000
 80008fa:	f506 6610 	add.w	r6, r6, #2304	; 0x900
      if ((GPIOB->ODR & (1<<1)) == 0) 
 80008fe:	4b3d      	ldr	r3, [pc, #244]	; (80009f4 <main+0x200>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f013 0f02 	tst.w	r3, #2
 8000906:	d103      	bne.n	8000910 <main+0x11c>
           GPIOB->BSRR = (1<<1);
 8000908:	2202      	movs	r2, #2
 800090a:	4b3a      	ldr	r3, [pc, #232]	; (80009f4 <main+0x200>)
 800090c:	619a      	str	r2, [r3, #24]
 800090e:	e003      	b.n	8000918 <main+0x124>
      else 
           GPIOB->BSRR = (1<<(1+16));
 8000910:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000914:	4b37      	ldr	r3, [pc, #220]	; (80009f4 <main+0x200>)
 8000916:	619a      	str	r2, [r3, #24]

    /* Do loader'ing, if there are applicable msgs. */
//    canwinch_ldrproto_poll();

    /* Have we written to flash?  If so, don't jump to the the app unless commanded. */
    if (ldr_phase == 0)
 8000918:	4b37      	ldr	r3, [pc, #220]	; (80009f8 <main+0x204>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1d6      	bne.n	80008ce <main+0xda>
    { // Here, we haven't done anything to disturb the integrity of the app
      if (  ((int)can_waitdelay_ct - (int)(DTWTIME)) < 0 )
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <main+0x1c4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	1afb      	subs	r3, r7, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	dad1      	bge.n	80008ce <main+0xda>
      { // We timed out.
        if (((unsigned int)&__appjump > (unsigned int)__appjump) || ((unsigned int)__appjump >= (unsigned int)0x08040000))
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <main+0x1bc>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4294      	cmp	r4, r2
 8000930:	d802      	bhi.n	8000938 <main+0x144>
 8000932:	4b32      	ldr	r3, [pc, #200]	; (80009fc <main+0x208>)
 8000934:	429a      	cmp	r2, r3
 8000936:	d910      	bls.n	800095a <main+0x166>
        { // Here, jump address is bogus
          printf("\n\r\n#### At offset %08X address %08X is bogus ####\n\r\n",(unsigned int)&__appjump, (unsigned int)__appjump);
 8000938:	4621      	mov	r1, r4
 800093a:	4831      	ldr	r0, [pc, #196]	; (8000a00 <main+0x20c>)
 800093c:	f002 fe68 	bl	8003610 <iprintf>
          dtw = (DTWTIME + (SYSCLOCKFREQ/2)); // Wait 1/2 sec for printf to complete
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <main+0x1c4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8000948:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
          while (  ((int)dtw - (int)(DTWTIME)) > 0 );
 800094c:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <main+0x1c4>)
 800094e:	6812      	ldr	r2, [r2, #0]
 8000950:	1a9a      	subs	r2, r3, r2
 8000952:	2a00      	cmp	r2, #0
 8000954:	dcfa      	bgt.n	800094c <main+0x158>
          system_reset(); // Software reset
 8000956:	f002 fd95 	bl	8003484 <system_reset>
        }
        dtw = (DTWTIME + (SYSCLOCKFREQ/2)); // Wait 1/2 sec for printf to complete
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <main+0x1c4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8000962:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        while (  ((int)dtw - (int)(DTWTIME)) > 0 );
 8000966:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <main+0x1c4>)
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	1a9a      	subs	r2, r3, r2
 800096c:	2a00      	cmp	r2, #0
 800096e:	dcfa      	bgt.n	8000966 <main+0x172>
        /* Set Indpendent Watch Dog and let it cause a reset. */
        RCC->CSR |= (1<<0);   // LSI enable, necessary for IWDG
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <main+0x1b4>)
 8000972:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        while ((RCC->CSR & (1<<1)) == 0);  // wait till LSI is ready
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <main+0x1b4>)
 8000980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000984:	f013 0f02 	tst.w	r3, #2
 8000988:	d0f9      	beq.n	800097e <main+0x18a>
          IWDG->KR  = 0x5555; // enable write to PR, RLR
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <main+0x210>)
 800098c:	f245 5255 	movw	r2, #21845	; 0x5555
 8000990:	601a      	str	r2, [r3, #0]
          IWDG->PR  = 0;      // Init prescaler
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
          IWDG->RLR = 0x02;   // Init RLR
 8000996:	2202      	movs	r2, #2
 8000998:	609a      	str	r2, [r3, #8]
          IWDG->KR  = 0xAAAA; // Reload the watchdog
 800099a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800099e:	601a      	str	r2, [r3, #0]
          IWDG->KR  = 0xCCCC; // Start the watchdog
 80009a0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	e7fe      	b.n	80009a6 <main+0x1b2>
 80009a8:	40021000 	.word	0x40021000
 80009ac:	e000ed08 	.word	0xe000ed08
 80009b0:	08008004 	.word	0x08008004
 80009b4:	08004498 	.word	0x08004498
 80009b8:	e0001004 	.word	0xe0001004
 80009bc:	080044bc 	.word	0x080044bc
 80009c0:	080044ec 	.word	0x080044ec
 80009c4:	0800452c 	.word	0x0800452c
 80009c8:	200009bc 	.word	0x200009bc
 80009cc:	1fff7590 	.word	0x1fff7590
 80009d0:	200009e8 	.word	0x200009e8
 80009d4:	1fff75e0 	.word	0x1fff75e0
 80009d8:	20000934 	.word	0x20000934
 80009dc:	0800456c 	.word	0x0800456c
 80009e0:	08004588 	.word	0x08004588
 80009e4:	b0a00000 	.word	0xb0a00000
 80009e8:	04c4b400 	.word	0x04c4b400
 80009ec:	080045a0 	.word	0x080045a0
 80009f0:	080045d4 	.word	0x080045d4
 80009f4:	48000400 	.word	0x48000400
 80009f8:	200008d8 	.word	0x200008d8
 80009fc:	0803ffff 	.word	0x0803ffff
 8000a00:	080045f0 	.word	0x080045f0
 8000a04:	40003000 	.word	0x40003000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	e7fe      	b.n	8000a08 <NMI_Handler>
 8000a0a:	bf00      	nop

08000a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0c:	e7fe      	b.n	8000a0c <HardFault_Handler>
 8000a0e:	bf00      	nop

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler>
 8000a12:	bf00      	nop

08000a14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a14:	e7fe      	b.n	8000a14 <BusFault_Handler>
 8000a16:	bf00      	nop

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler>
 8000a1a:	bf00      	nop

08000a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000a2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a2e:	4802      	ldr	r0, [pc, #8]	; (8000a38 <CAN1_TX_IRQHandler+0xc>)
 8000a30:	f001 fb18 	bl	8002064 <HAL_CAN_IRQHandler>
 8000a34:	bd08      	pop	{r3, pc}
 8000a36:	bf00      	nop
 8000a38:	200009c0 	.word	0x200009c0

08000a3c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a3e:	4802      	ldr	r0, [pc, #8]	; (8000a48 <CAN1_RX0_IRQHandler+0xc>)
 8000a40:	f001 fb10 	bl	8002064 <HAL_CAN_IRQHandler>
 8000a44:	bd08      	pop	{r3, pc}
 8000a46:	bf00      	nop
 8000a48:	200009c0 	.word	0x200009c0

08000a4c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000a4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a4e:	4802      	ldr	r0, [pc, #8]	; (8000a58 <CAN1_RX1_IRQHandler+0xc>)
 8000a50:	f001 fb08 	bl	8002064 <HAL_CAN_IRQHandler>
 8000a54:	bd08      	pop	{r3, pc}
 8000a56:	bf00      	nop
 8000a58:	200009c0 	.word	0x200009c0

08000a5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a5e:	4802      	ldr	r0, [pc, #8]	; (8000a68 <TIM1_UP_TIM16_IRQHandler+0xc>)
 8000a60:	f001 fd98 	bl	8002594 <HAL_TIM_IRQHandler>
 8000a64:	bd08      	pop	{r3, pc}
 8000a66:	bf00      	nop
 8000a68:	200009f4 	.word	0x200009f4

08000a6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a6e:	4802      	ldr	r0, [pc, #8]	; (8000a78 <USART1_IRQHandler+0xc>)
 8000a70:	f002 f89c 	bl	8002bac <HAL_UART_IRQHandler>
 8000a74:	bd08      	pop	{r3, pc}
 8000a76:	bf00      	nop
 8000a78:	20000938 	.word	0x20000938

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_MspInit+0x2c>)
 8000a80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a82:	f042 0201 	orr.w	r2, r2, #1
 8000a86:	661a      	str	r2, [r3, #96]	; 0x60
 8000a88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a8a:	f002 0201 	and.w	r2, r2, #1
 8000a8e:	9200      	str	r2, [sp, #0]
 8000a90:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a98:	659a      	str	r2, [r3, #88]	; 0x58
 8000a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa4:	b002      	add	sp, #8
 8000aa6:	4770      	bx	lr
 8000aa8:	40021000 	.word	0x40021000

08000aac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000aac:	b500      	push	{lr}
 8000aae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	9303      	str	r3, [sp, #12]
 8000ab4:	9304      	str	r3, [sp, #16]
 8000ab6:	9305      	str	r3, [sp, #20]
 8000ab8:	9306      	str	r3, [sp, #24]
 8000aba:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 8000abc:	6802      	ldr	r2, [r0, #0]
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <HAL_CAN_MspInit+0x90>)
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d138      	bne.n	8000b36 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ac4:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8000ac8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000ace:	659a      	str	r2, [r3, #88]	; 0x58
 8000ad0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ad2:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000ad6:	9201      	str	r2, [sp, #4]
 8000ad8:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000adc:	f042 0202 	orr.w	r2, r2, #2
 8000ae0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	9302      	str	r3, [sp, #8]
 8000aea:	9b02      	ldr	r3, [sp, #8]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000afa:	2309      	movs	r3, #9
 8000afc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	a903      	add	r1, sp, #12
 8000b00:	480f      	ldr	r0, [pc, #60]	; (8000b40 <HAL_CAN_MspInit+0x94>)
 8000b02:	f001 f821 	bl	8001b48 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2105      	movs	r1, #5
 8000b0a:	2013      	movs	r0, #19
 8000b0c:	f001 f9a6 	bl	8001e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000b10:	2013      	movs	r0, #19
 8000b12:	f001 f9d5 	bl	8001ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2105      	movs	r1, #5
 8000b1a:	2014      	movs	r0, #20
 8000b1c:	f001 f99e 	bl	8001e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b20:	2014      	movs	r0, #20
 8000b22:	f001 f9cd 	bl	8001ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2105      	movs	r1, #5
 8000b2a:	2015      	movs	r0, #21
 8000b2c:	f001 f996 	bl	8001e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b30:	2015      	movs	r0, #21
 8000b32:	f001 f9c5 	bl	8001ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b36:	b009      	add	sp, #36	; 0x24
 8000b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b3c:	40006400 	.word	0x40006400
 8000b40:	48000400 	.word	0x48000400

08000b44 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM15)
 8000b44:	6802      	ldr	r2, [r0, #0]
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_TIM_Base_MspInit+0x24>)
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d10c      	bne.n	8000b66 <HAL_TIM_Base_MspInit+0x22>
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b4c:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000b4e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8000b52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b58:	661a      	str	r2, [r3, #96]	; 0x60
 8000b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000b64:	b002      	add	sp, #8
 8000b66:	4770      	bx	lr
 8000b68:	40014000 	.word	0x40014000

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b510      	push	{r4, lr}
 8000b6e:	b09e      	sub	sp, #120	; 0x78
 8000b70:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	2100      	movs	r1, #0
 8000b74:	9119      	str	r1, [sp, #100]	; 0x64
 8000b76:	911a      	str	r1, [sp, #104]	; 0x68
 8000b78:	911b      	str	r1, [sp, #108]	; 0x6c
 8000b7a:	911c      	str	r1, [sp, #112]	; 0x70
 8000b7c:	911d      	str	r1, [sp, #116]	; 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7e:	225c      	movs	r2, #92	; 0x5c
 8000b80:	a802      	add	r0, sp, #8
 8000b82:	f002 fd3d 	bl	8003600 <memset>
  if(huart->Instance==USART1)
 8000b86:	6822      	ldr	r2, [r4, #0]
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_UART_MspInit+0x90>)
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d134      	bne.n	8000bf8 <HAL_UART_MspInit+0x8c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	9302      	str	r3, [sp, #8]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000b92:	2302      	movs	r3, #2
 8000b94:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b96:	a802      	add	r0, sp, #8
 8000b98:	f000 fe48 	bl	800182c <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	b108      	cbz	r0, 8000ba2 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8000b9e:	f7ff fd47 	bl	8000630 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_UART_MspInit+0x94>)
 8000ba4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000baa:	661a      	str	r2, [r3, #96]	; 0x60
 8000bac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000bb2:	9200      	str	r2, [sp, #0]
 8000bb4:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb8:	f042 0201 	orr.w	r2, r2, #1
 8000bbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	9b01      	ldr	r3, [sp, #4]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bc8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bcc:	9319      	str	r3, [sp, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2400      	movs	r4, #0
 8000bd4:	941b      	str	r4, [sp, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	931c      	str	r3, [sp, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	931d      	str	r3, [sp, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	a919      	add	r1, sp, #100	; 0x64
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f000 ffb0 	bl	8001b48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000be8:	4622      	mov	r2, r4
 8000bea:	4621      	mov	r1, r4
 8000bec:	2025      	movs	r0, #37	; 0x25
 8000bee:	f001 f935 	bl	8001e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bf2:	2025      	movs	r0, #37	; 0x25
 8000bf4:	f001 f964 	bl	8001ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bf8:	b01e      	add	sp, #120	; 0x78
 8000bfa:	bd10      	pop	{r4, pc}
 8000bfc:	40013800 	.word	0x40013800
 8000c00:	40021000 	.word	0x40021000

08000c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b500      	push	{lr}
 8000c06:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	2019      	movs	r0, #25
 8000c0e:	f001 f925 	bl	8001e5c <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c12:	2019      	movs	r0, #25
 8000c14:	f001 f954 	bl	8001ec0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_InitTick+0x68>)
 8000c1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c1c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c20:	661a      	str	r2, [r3, #96]	; 0x60
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c2c:	a902      	add	r1, sp, #8
 8000c2e:	a803      	add	r0, sp, #12
 8000c30:	f000 fd20 	bl	8001674 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c34:	f000 fd0c 	bl	8001650 <HAL_RCC_GetPCLK2Freq>
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_InitTick+0x6c>)
 8000c3a:	fba3 2300 	umull	r2, r3, r3, r0
 8000c3e:	0c9b      	lsrs	r3, r3, #18
 8000c40:	3b01      	subs	r3, #1

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000c42:	480c      	ldr	r0, [pc, #48]	; (8000c74 <HAL_InitTick+0x70>)
 8000c44:	4a0c      	ldr	r2, [pc, #48]	; (8000c78 <HAL_InitTick+0x74>)
 8000c46:	6002      	str	r2, [r0, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000c48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c4c:	60c2      	str	r2, [r0, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000c4e:	6043      	str	r3, [r0, #4]
  htim16.Init.ClockDivision = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	6103      	str	r3, [r0, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	6083      	str	r3, [r0, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8000c56:	f001 fd9d 	bl	8002794 <HAL_TIM_Base_Init>
 8000c5a:	b918      	cbnz	r0, 8000c64 <HAL_InitTick+0x60>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <HAL_InitTick+0x70>)
 8000c5e:	f001 fc59 	bl	8002514 <HAL_TIM_Base_Start_IT>
 8000c62:	e000      	b.n	8000c66 <HAL_InitTick+0x62>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c64:	2001      	movs	r0, #1
}
 8000c66:	b009      	add	sp, #36	; 0x24
 8000c68:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	431bde83 	.word	0x431bde83
 8000c74:	200009f4 	.word	0x200009f4
 8000c78:	40014400 	.word	0x40014400

08000c7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7e:	2003      	movs	r0, #3
 8000c80:	f001 f8da 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c84:	2000      	movs	r0, #0
 8000c86:	f7ff ffbd 	bl	8000c04 <HAL_InitTick>
 8000c8a:	b918      	cbnz	r0, 8000c94 <HAL_Init+0x18>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c8c:	f7ff fef6 	bl	8000a7c <HAL_MspInit>
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
  HAL_StatusTypeDef  status = HAL_OK;
 8000c90:	2000      	movs	r0, #0
 8000c92:	bd08      	pop	{r3, pc}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
  {
    status = HAL_ERROR;
 8000c94:	2001      	movs	r0, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8000c96:	bd08      	pop	{r3, pc}

08000c98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_IncTick+0x10>)
 8000c9a:	7819      	ldrb	r1, [r3, #0]
 8000c9c:	4a03      	ldr	r2, [pc, #12]	; (8000cac <HAL_IncTick+0x14>)
 8000c9e:	6813      	ldr	r3, [r2, #0]
 8000ca0:	440b      	add	r3, r1
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000004 	.word	0x20000004
 8000cac:	20000a40 	.word	0x20000a40

08000cb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cb0:	4b01      	ldr	r3, [pc, #4]	; (8000cb8 <HAL_GetTick+0x8>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000a40 	.word	0x20000a40

08000cbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000cbc:	b530      	push	{r4, r5, lr}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	4605      	mov	r5, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000cc2:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000cca:	d002      	beq.n	8000cd2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000ccc:	f001 f864 	bl	8001d98 <HAL_PWREx_GetVoltageRange>
 8000cd0:	e00f      	b.n	8000cf2 <RCC_SetFlashLatencyFromMSIRange+0x36>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4c1c      	ldr	r4, [pc, #112]	; (8000d44 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000cd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cda:	65a3      	str	r3, [r4, #88]	; 0x58
 8000cdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000ce6:	f001 f857 	bl	8001d98 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000cea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000cf2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000cf6:	d105      	bne.n	8000d04 <RCC_SetFlashLatencyFromMSIRange+0x48>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000cf8:	2d80      	cmp	r5, #128	; 0x80
 8000cfa:	d90a      	bls.n	8000d12 <RCC_SetFlashLatencyFromMSIRange+0x56>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000cfc:	2da0      	cmp	r5, #160	; 0xa0
 8000cfe:	d90a      	bls.n	8000d16 <RCC_SetFlashLatencyFromMSIRange+0x5a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000d00:	2102      	movs	r1, #2
 8000d02:	e00f      	b.n	8000d24 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8000d04:	2d80      	cmp	r5, #128	; 0x80
 8000d06:	d808      	bhi.n	8000d1a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8000d08:	d009      	beq.n	8000d1e <RCC_SetFlashLatencyFromMSIRange+0x62>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8000d0a:	2d70      	cmp	r5, #112	; 0x70
 8000d0c:	d009      	beq.n	8000d22 <RCC_SetFlashLatencyFromMSIRange+0x66>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000d0e:	2100      	movs	r1, #0
 8000d10:	e008      	b.n	8000d24 <RCC_SetFlashLatencyFromMSIRange+0x68>
 8000d12:	2100      	movs	r1, #0
 8000d14:	e006      	b.n	8000d24 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000d16:	2101      	movs	r1, #1
 8000d18:	e004      	b.n	8000d24 <RCC_SetFlashLatencyFromMSIRange+0x68>
    }
#else
    if(msirange > RCC_MSIRANGE_8)
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8000d1a:	2103      	movs	r1, #3
 8000d1c:	e002      	b.n	8000d24 <RCC_SetFlashLatencyFromMSIRange+0x68>
    else
    {
      if(msirange == RCC_MSIRANGE_8)
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000d1e:	2102      	movs	r1, #2
 8000d20:	e000      	b.n	8000d24 <RCC_SetFlashLatencyFromMSIRange+0x68>
      }
      else if(msirange == RCC_MSIRANGE_7)
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000d22:	2101      	movs	r1, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000d24:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8000d26:	6813      	ldr	r3, [r2, #0]
 8000d28:	f023 0307 	bic.w	r3, r3, #7
 8000d2c:	430b      	orrs	r3, r1
 8000d2e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000d30:	6813      	ldr	r3, [r2, #0]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d001      	beq.n	8000d3e <RCC_SetFlashLatencyFromMSIRange+0x82>
  {
    return HAL_ERROR;
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	e000      	b.n	8000d40 <RCC_SetFlashLatencyFromMSIRange+0x84>
  }

  return HAL_OK;
 8000d3e:	2000      	movs	r0, #0
}
 8000d40:	b003      	add	sp, #12
 8000d42:	bd30      	pop	{r4, r5, pc}
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d4c:	4a29      	ldr	r2, [pc, #164]	; (8000df4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8000d4e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d50:	68d2      	ldr	r2, [r2, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d52:	f013 030c 	ands.w	r3, r3, #12
 8000d56:	d005      	beq.n	8000d64 <HAL_RCC_GetSysClockFreq+0x18>
 8000d58:	f002 0203 	and.w	r2, r2, #3
 8000d5c:	2b0c      	cmp	r3, #12
 8000d5e:	d116      	bne.n	8000d8e <HAL_RCC_GetSysClockFreq+0x42>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000d60:	2a01      	cmp	r2, #1
 8000d62:	d114      	bne.n	8000d8e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000d64:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	f012 0f08 	tst.w	r2, #8
 8000d6c:	d105      	bne.n	8000d7a <HAL_RCC_GetSysClockFreq+0x2e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000d6e:	4a21      	ldr	r2, [pc, #132]	; (8000df4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8000d70:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8000d74:	f3c2 2203 	ubfx	r2, r2, #8, #4
 8000d78:	e003      	b.n	8000d82 <HAL_RCC_GetSysClockFreq+0x36>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000d7a:	4a1e      	ldr	r2, [pc, #120]	; (8000df4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	f3c2 1203 	ubfx	r2, r2, #4, #4
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000d82:	491d      	ldr	r1, [pc, #116]	; (8000df8 <HAL_RCC_GetSysClockFreq+0xac>)
 8000d84:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d88:	b143      	cbz	r3, 8000d9c <HAL_RCC_GetSysClockFreq+0x50>
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	e00d      	b.n	8000daa <HAL_RCC_GetSysClockFreq+0x5e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d006      	beq.n	8000da0 <HAL_RCC_GetSysClockFreq+0x54>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000d92:	2b08      	cmp	r3, #8
 8000d94:	d007      	beq.n	8000da6 <HAL_RCC_GetSysClockFreq+0x5a>
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000d96:	2000      	movs	r0, #0
 8000d98:	4601      	mov	r1, r0
 8000d9a:	e006      	b.n	8000daa <HAL_RCC_GetSysClockFreq+0x5e>
    msirange = MSIRangeTable[msirange];

    if(sysclk_source == RCC_CFGR_SWS_MSI)
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e004      	b.n	8000daa <HAL_RCC_GetSysClockFreq+0x5e>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000da0:	4816      	ldr	r0, [pc, #88]	; (8000dfc <HAL_RCC_GetSysClockFreq+0xb0>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000da2:	2100      	movs	r1, #0
 8000da4:	e001      	b.n	8000daa <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000da6:	4816      	ldr	r0, [pc, #88]	; (8000e00 <HAL_RCC_GetSysClockFreq+0xb4>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000da8:	2100      	movs	r1, #0
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000daa:	2b0c      	cmp	r3, #12
 8000dac:	d121      	bne.n	8000df2 <HAL_RCC_GetSysClockFreq+0xa6>
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000dae:	b410      	push	{r4}
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	f003 0303 	and.w	r3, r3, #3

    switch (pllsource)
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d002      	beq.n	8000dc2 <HAL_RCC_GetSysClockFreq+0x76>
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d002      	beq.n	8000dc6 <HAL_RCC_GetSysClockFreq+0x7a>
 8000dc0:	e002      	b.n	8000dc8 <HAL_RCC_GetSysClockFreq+0x7c>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8000dc2:	490e      	ldr	r1, [pc, #56]	; (8000dfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8000dc4:	e000      	b.n	8000dc8 <HAL_RCC_GetSysClockFreq+0x7c>
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <HAL_RCC_GetSysClockFreq+0xb4>)
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
      break;
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8000dca:	68e0      	ldr	r0, [r4, #12]
 8000dcc:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8000dd0:	3001      	adds	r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000dd2:	68e2      	ldr	r2, [r4, #12]
 8000dd4:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8000dd8:	fb02 f301 	mul.w	r3, r2, r1
 8000ddc:	fbb3 f3f0 	udiv	r3, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000de0:	68e0      	ldr	r0, [r4, #12]
 8000de2:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8000de6:	3001      	adds	r0, #1
 8000de8:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8000dea:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 8000dee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000
 8000df8:	08004660 	.word	0x08004660
 8000dfc:	00f42400 	.word	0x00f42400
 8000e00:	007a1200 	.word	0x007a1200

08000e04 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e04:	2800      	cmp	r0, #0
 8000e06:	f000 831c 	beq.w	8001442 <HAL_RCC_OscConfig+0x63e>
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e10:	4ba4      	ldr	r3, [pc, #656]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e12:	689d      	ldr	r5, [r3, #8]
 8000e14:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e18:	68de      	ldr	r6, [r3, #12]
 8000e1a:	f006 0603 	and.w	r6, r6, #3

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e1e:	6803      	ldr	r3, [r0, #0]
 8000e20:	f013 0f10 	tst.w	r3, #16
 8000e24:	f000 80a3 	beq.w	8000f6e <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e28:	b11d      	cbz	r5, 8000e32 <HAL_RCC_OscConfig+0x2e>
 8000e2a:	2d0c      	cmp	r5, #12
 8000e2c:	d162      	bne.n	8000ef4 <HAL_RCC_OscConfig+0xf0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e2e:	2e01      	cmp	r6, #1
 8000e30:	d160      	bne.n	8000ef4 <HAL_RCC_OscConfig+0xf0>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e32:	4b9c      	ldr	r3, [pc, #624]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f013 0f02 	tst.w	r3, #2
 8000e3a:	d003      	beq.n	8000e44 <HAL_RCC_OscConfig+0x40>
 8000e3c:	69a3      	ldr	r3, [r4, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8301 	beq.w	8001446 <HAL_RCC_OscConfig+0x642>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e44:	6a20      	ldr	r0, [r4, #32]
 8000e46:	4b97      	ldr	r3, [pc, #604]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f013 0f08 	tst.w	r3, #8
 8000e4e:	d004      	beq.n	8000e5a <HAL_RCC_OscConfig+0x56>
 8000e50:	4b94      	ldr	r3, [pc, #592]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e58:	e005      	b.n	8000e66 <HAL_RCC_OscConfig+0x62>
 8000e5a:	4b92      	ldr	r3, [pc, #584]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e60:	091b      	lsrs	r3, r3, #4
 8000e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e66:	4283      	cmp	r3, r0
 8000e68:	d217      	bcs.n	8000e9a <HAL_RCC_OscConfig+0x96>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e6a:	f7ff ff27 	bl	8000cbc <RCC_SetFlashLatencyFromMSIRange>
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	f040 82eb 	bne.w	800144a <HAL_RCC_OscConfig+0x646>
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e74:	4b8b      	ldr	r3, [pc, #556]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	f042 0208 	orr.w	r2, r2, #8
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8000e84:	6a22      	ldr	r2, [r4, #32]
 8000e86:	430a      	orrs	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000e90:	69e1      	ldr	r1, [r4, #28]
 8000e92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	e018      	b.n	8000ecc <HAL_RCC_OscConfig+0xc8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e9a:	4b82      	ldr	r3, [pc, #520]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	f042 0208 	orr.w	r2, r2, #8
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8000eaa:	6a22      	ldr	r2, [r4, #32]
 8000eac:	430a      	orrs	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000eb6:	69e1      	ldr	r1, [r4, #28]
 8000eb8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ebc:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000ebe:	b92d      	cbnz	r5, 8000ecc <HAL_RCC_OscConfig+0xc8>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ec0:	6a20      	ldr	r0, [r4, #32]
 8000ec2:	f7ff fefb 	bl	8000cbc <RCC_SetFlashLatencyFromMSIRange>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	f040 82c1 	bne.w	800144e <HAL_RCC_OscConfig+0x64a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ecc:	f7ff ff3e 	bl	8000d4c <HAL_RCC_GetSysClockFreq>
 8000ed0:	4b74      	ldr	r3, [pc, #464]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ed8:	4a73      	ldr	r2, [pc, #460]	; (80010a8 <HAL_RCC_OscConfig+0x2a4>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	f003 031f 	and.w	r3, r3, #31
 8000ee0:	40d8      	lsrs	r0, r3
 8000ee2:	4b72      	ldr	r3, [pc, #456]	; (80010ac <HAL_RCC_OscConfig+0x2a8>)
 8000ee4:	6018      	str	r0, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000ee6:	4b72      	ldr	r3, [pc, #456]	; (80010b0 <HAL_RCC_OscConfig+0x2ac>)
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	f7ff fe8b 	bl	8000c04 <HAL_InitTick>
        if(status != HAL_OK)
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d03d      	beq.n	8000f6e <HAL_RCC_OscConfig+0x16a>
 8000ef2:	e2ae      	b.n	8001452 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ef4:	69a3      	ldr	r3, [r4, #24]
 8000ef6:	b333      	cbz	r3, 8000f46 <HAL_RCC_OscConfig+0x142>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ef8:	4a6a      	ldr	r2, [pc, #424]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000efa:	6813      	ldr	r3, [r2, #0]
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f02:	f7ff fed5 	bl	8000cb0 <HAL_GetTick>
 8000f06:	4607      	mov	r7, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f08:	e005      	b.n	8000f16 <HAL_RCC_OscConfig+0x112>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f0a:	f7ff fed1 	bl	8000cb0 <HAL_GetTick>
 8000f0e:	1bc0      	subs	r0, r0, r7
 8000f10:	2802      	cmp	r0, #2
 8000f12:	f200 829f 	bhi.w	8001454 <HAL_RCC_OscConfig+0x650>

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f16:	4b63      	ldr	r3, [pc, #396]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f013 0f02 	tst.w	r3, #2
 8000f1e:	d0f4      	beq.n	8000f0a <HAL_RCC_OscConfig+0x106>
          {
            return HAL_TIMEOUT;
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f20:	4b60      	ldr	r3, [pc, #384]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	f042 0208 	orr.w	r2, r2, #8
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8000f30:	6a22      	ldr	r2, [r4, #32]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000f3c:	69e1      	ldr	r1, [r4, #28]
 8000f3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	e013      	b.n	8000f6e <HAL_RCC_OscConfig+0x16a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f46:	4a57      	ldr	r2, [pc, #348]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f48:	6813      	ldr	r3, [r2, #0]
 8000f4a:	f023 0301 	bic.w	r3, r3, #1
 8000f4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f50:	f7ff feae 	bl	8000cb0 <HAL_GetTick>
 8000f54:	4607      	mov	r7, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f56:	e005      	b.n	8000f64 <HAL_RCC_OscConfig+0x160>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f58:	f7ff feaa 	bl	8000cb0 <HAL_GetTick>
 8000f5c:	1bc0      	subs	r0, r0, r7
 8000f5e:	2802      	cmp	r0, #2
 8000f60:	f200 827a 	bhi.w	8001458 <HAL_RCC_OscConfig+0x654>

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f64:	4b4f      	ldr	r3, [pc, #316]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f013 0f02 	tst.w	r3, #2
 8000f6c:	d1f4      	bne.n	8000f58 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	f013 0f01 	tst.w	r3, #1
 8000f74:	d052      	beq.n	800101c <HAL_RCC_OscConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f76:	2d08      	cmp	r5, #8
 8000f78:	d003      	beq.n	8000f82 <HAL_RCC_OscConfig+0x17e>
 8000f7a:	2d0c      	cmp	r5, #12
 8000f7c:	d10a      	bne.n	8000f94 <HAL_RCC_OscConfig+0x190>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f7e:	2e03      	cmp	r6, #3
 8000f80:	d108      	bne.n	8000f94 <HAL_RCC_OscConfig+0x190>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f82:	4b48      	ldr	r3, [pc, #288]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f8a:	d047      	beq.n	800101c <HAL_RCC_OscConfig+0x218>
 8000f8c:	6863      	ldr	r3, [r4, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d144      	bne.n	800101c <HAL_RCC_OscConfig+0x218>
 8000f92:	e263      	b.n	800145c <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f94:	6863      	ldr	r3, [r4, #4]
 8000f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9a:	d105      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x1a4>
 8000f9c:	4a41      	ldr	r2, [pc, #260]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000f9e:	6813      	ldr	r3, [r2, #0]
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e018      	b.n	8000fda <HAL_RCC_OscConfig+0x1d6>
 8000fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x1c4>
 8000fae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fb2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x1d6>
 8000fc8:	4b36      	ldr	r3, [pc, #216]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fd8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fda:	6863      	ldr	r3, [r4, #4]
 8000fdc:	b17b      	cbz	r3, 8000ffe <HAL_RCC_OscConfig+0x1fa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fde:	f7ff fe67 	bl	8000cb0 <HAL_GetTick>
 8000fe2:	4607      	mov	r7, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fe4:	e005      	b.n	8000ff2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe6:	f7ff fe63 	bl	8000cb0 <HAL_GetTick>
 8000fea:	1bc0      	subs	r0, r0, r7
 8000fec:	2864      	cmp	r0, #100	; 0x64
 8000fee:	f200 8237 	bhi.w	8001460 <HAL_RCC_OscConfig+0x65c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ffa:	d0f4      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x1e2>
 8000ffc:	e00e      	b.n	800101c <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fe57 	bl	8000cb0 <HAL_GetTick>
 8001002:	4607      	mov	r7, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001004:	e005      	b.n	8001012 <HAL_RCC_OscConfig+0x20e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001006:	f7ff fe53 	bl	8000cb0 <HAL_GetTick>
 800100a:	1bc0      	subs	r0, r0, r7
 800100c:	2864      	cmp	r0, #100	; 0x64
 800100e:	f200 8229 	bhi.w	8001464 <HAL_RCC_OscConfig+0x660>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001012:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800101a:	d1f4      	bne.n	8001006 <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	f013 0f02 	tst.w	r3, #2
 8001022:	d052      	beq.n	80010ca <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001024:	2d04      	cmp	r5, #4
 8001026:	d003      	beq.n	8001030 <HAL_RCC_OscConfig+0x22c>
 8001028:	2d0c      	cmp	r5, #12
 800102a:	d113      	bne.n	8001054 <HAL_RCC_OscConfig+0x250>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800102c:	2e02      	cmp	r6, #2
 800102e:	d111      	bne.n	8001054 <HAL_RCC_OscConfig+0x250>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001038:	d003      	beq.n	8001042 <HAL_RCC_OscConfig+0x23e>
 800103a:	68e3      	ldr	r3, [r4, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 8213 	beq.w	8001468 <HAL_RCC_OscConfig+0x664>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001042:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8001044:	6853      	ldr	r3, [r2, #4]
 8001046:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800104a:	6921      	ldr	r1, [r4, #16]
 800104c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001050:	6053      	str	r3, [r2, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001052:	e03a      	b.n	80010ca <HAL_RCC_OscConfig+0x2c6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001054:	68e3      	ldr	r3, [r4, #12]
 8001056:	b1e3      	cbz	r3, 8001092 <HAL_RCC_OscConfig+0x28e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 800105a:	6813      	ldr	r3, [r2, #0]
 800105c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001062:	f7ff fe25 	bl	8000cb0 <HAL_GetTick>
 8001066:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001068:	e005      	b.n	8001076 <HAL_RCC_OscConfig+0x272>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106a:	f7ff fe21 	bl	8000cb0 <HAL_GetTick>
 800106e:	1b80      	subs	r0, r0, r6
 8001070:	2802      	cmp	r0, #2
 8001072:	f200 81fb 	bhi.w	800146c <HAL_RCC_OscConfig+0x668>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800107e:	d0f4      	beq.n	800106a <HAL_RCC_OscConfig+0x266>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8001082:	6853      	ldr	r3, [r2, #4]
 8001084:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001088:	6921      	ldr	r1, [r4, #16]
 800108a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800108e:	6053      	str	r3, [r2, #4]
 8001090:	e01b      	b.n	80010ca <HAL_RCC_OscConfig+0x2c6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_RCC_OscConfig+0x2a0>)
 8001094:	6813      	ldr	r3, [r2, #0]
 8001096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800109a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109c:	f7ff fe08 	bl	8000cb0 <HAL_GetTick>
 80010a0:	4606      	mov	r6, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010a2:	e00d      	b.n	80010c0 <HAL_RCC_OscConfig+0x2bc>
 80010a4:	40021000 	.word	0x40021000
 80010a8:	08004648 	.word	0x08004648
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b4:	f7ff fdfc 	bl	8000cb0 <HAL_GetTick>
 80010b8:	1b80      	subs	r0, r0, r6
 80010ba:	2802      	cmp	r0, #2
 80010bc:	f200 81d8 	bhi.w	8001470 <HAL_RCC_OscConfig+0x66c>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010c0:	4bba      	ldr	r3, [pc, #744]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80010c8:	d1f4      	bne.n	80010b4 <HAL_RCC_OscConfig+0x2b0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	f013 0f08 	tst.w	r3, #8
 80010d0:	d030      	beq.n	8001134 <HAL_RCC_OscConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d2:	6963      	ldr	r3, [r4, #20]
 80010d4:	b1bb      	cbz	r3, 8001106 <HAL_RCC_OscConfig+0x302>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d6:	4ab5      	ldr	r2, [pc, #724]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 80010d8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e4:	f7ff fde4 	bl	8000cb0 <HAL_GetTick>
 80010e8:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010ea:	e005      	b.n	80010f8 <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ec:	f7ff fde0 	bl	8000cb0 <HAL_GetTick>
 80010f0:	1b80      	subs	r0, r0, r6
 80010f2:	2802      	cmp	r0, #2
 80010f4:	f200 81be 	bhi.w	8001474 <HAL_RCC_OscConfig+0x670>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010f8:	4bac      	ldr	r3, [pc, #688]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 80010fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010fe:	f013 0f02 	tst.w	r3, #2
 8001102:	d0f3      	beq.n	80010ec <HAL_RCC_OscConfig+0x2e8>
 8001104:	e016      	b.n	8001134 <HAL_RCC_OscConfig+0x330>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001106:	4aa9      	ldr	r2, [pc, #676]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 8001108:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800110c:	f023 0301 	bic.w	r3, r3, #1
 8001110:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001114:	f7ff fdcc 	bl	8000cb0 <HAL_GetTick>
 8001118:	4606      	mov	r6, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800111a:	e005      	b.n	8001128 <HAL_RCC_OscConfig+0x324>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800111c:	f7ff fdc8 	bl	8000cb0 <HAL_GetTick>
 8001120:	1b80      	subs	r0, r0, r6
 8001122:	2802      	cmp	r0, #2
 8001124:	f200 81a8 	bhi.w	8001478 <HAL_RCC_OscConfig+0x674>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001128:	4ba0      	ldr	r3, [pc, #640]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 800112a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112e:	f013 0f02 	tst.w	r3, #2
 8001132:	d1f3      	bne.n	800111c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	f013 0f04 	tst.w	r3, #4
 800113a:	d07f      	beq.n	800123c <HAL_RCC_OscConfig+0x438>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800113c:	4b9b      	ldr	r3, [pc, #620]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001140:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001144:	d10b      	bne.n	800115e <HAL_RCC_OscConfig+0x35a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b99      	ldr	r3, [pc, #612]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 8001148:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800114a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800114e:	659a      	str	r2, [r3, #88]	; 0x58
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800115a:	2601      	movs	r6, #1
 800115c:	e000      	b.n	8001160 <HAL_RCC_OscConfig+0x35c>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 800115e:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001160:	4b93      	ldr	r3, [pc, #588]	; (80013b0 <HAL_RCC_OscConfig+0x5ac>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001168:	d113      	bne.n	8001192 <HAL_RCC_OscConfig+0x38e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800116a:	4a91      	ldr	r2, [pc, #580]	; (80013b0 <HAL_RCC_OscConfig+0x5ac>)
 800116c:	6813      	ldr	r3, [r2, #0]
 800116e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001172:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001174:	f7ff fd9c 	bl	8000cb0 <HAL_GetTick>
 8001178:	4607      	mov	r7, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800117a:	e005      	b.n	8001188 <HAL_RCC_OscConfig+0x384>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800117c:	f7ff fd98 	bl	8000cb0 <HAL_GetTick>
 8001180:	1bc0      	subs	r0, r0, r7
 8001182:	2802      	cmp	r0, #2
 8001184:	f200 817a 	bhi.w	800147c <HAL_RCC_OscConfig+0x678>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001188:	4b89      	ldr	r3, [pc, #548]	; (80013b0 <HAL_RCC_OscConfig+0x5ac>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001190:	d0f4      	beq.n	800117c <HAL_RCC_OscConfig+0x378>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001192:	68a3      	ldr	r3, [r4, #8]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d107      	bne.n	80011a8 <HAL_RCC_OscConfig+0x3a4>
 8001198:	4a84      	ldr	r2, [pc, #528]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 800119a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011a6:	e01c      	b.n	80011e2 <HAL_RCC_OscConfig+0x3de>
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	d10d      	bne.n	80011c8 <HAL_RCC_OscConfig+0x3c4>
 80011ac:	4b7f      	ldr	r3, [pc, #508]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 80011ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80011b2:	f042 0204 	orr.w	r2, r2, #4
 80011b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80011ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80011be:	f042 0201 	orr.w	r2, r2, #1
 80011c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80011c6:	e00c      	b.n	80011e2 <HAL_RCC_OscConfig+0x3de>
 80011c8:	4b78      	ldr	r3, [pc, #480]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 80011ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80011ce:	f022 0201 	bic.w	r2, r2, #1
 80011d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80011d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80011da:	f022 0204 	bic.w	r2, r2, #4
 80011de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e2:	68a3      	ldr	r3, [r4, #8]
 80011e4:	b193      	cbz	r3, 800120c <HAL_RCC_OscConfig+0x408>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e6:	f7ff fd63 	bl	8000cb0 <HAL_GetTick>
 80011ea:	4607      	mov	r7, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ec:	e007      	b.n	80011fe <HAL_RCC_OscConfig+0x3fa>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ee:	f7ff fd5f 	bl	8000cb0 <HAL_GetTick>
 80011f2:	1bc0      	subs	r0, r0, r7
 80011f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80011f8:	4298      	cmp	r0, r3
 80011fa:	f200 8141 	bhi.w	8001480 <HAL_RCC_OscConfig+0x67c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011fe:	4b6b      	ldr	r3, [pc, #428]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 8001200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001204:	f013 0f02 	tst.w	r3, #2
 8001208:	d0f1      	beq.n	80011ee <HAL_RCC_OscConfig+0x3ea>
 800120a:	e011      	b.n	8001230 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120c:	f7ff fd50 	bl	8000cb0 <HAL_GetTick>
 8001210:	4607      	mov	r7, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001212:	e007      	b.n	8001224 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f7ff fd4c 	bl	8000cb0 <HAL_GetTick>
 8001218:	1bc0      	subs	r0, r0, r7
 800121a:	f241 3388 	movw	r3, #5000	; 0x1388
 800121e:	4298      	cmp	r0, r3
 8001220:	f200 8130 	bhi.w	8001484 <HAL_RCC_OscConfig+0x680>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001224:	4b61      	ldr	r3, [pc, #388]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 8001226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122a:	f013 0f02 	tst.w	r3, #2
 800122e:	d1f1      	bne.n	8001214 <HAL_RCC_OscConfig+0x410>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001230:	b126      	cbz	r6, 800123c <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001232:	4a5e      	ldr	r2, [pc, #376]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 8001234:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800123a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	f013 0f20 	tst.w	r3, #32
 8001242:	d030      	beq.n	80012a6 <HAL_RCC_OscConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001244:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001246:	b1bb      	cbz	r3, 8001278 <HAL_RCC_OscConfig+0x474>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001248:	4a58      	ldr	r2, [pc, #352]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 800124a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001256:	f7ff fd2b 	bl	8000cb0 <HAL_GetTick>
 800125a:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800125c:	e005      	b.n	800126a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800125e:	f7ff fd27 	bl	8000cb0 <HAL_GetTick>
 8001262:	1b80      	subs	r0, r0, r6
 8001264:	2802      	cmp	r0, #2
 8001266:	f200 810f 	bhi.w	8001488 <HAL_RCC_OscConfig+0x684>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800126a:	4b50      	ldr	r3, [pc, #320]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 800126c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001270:	f013 0f02 	tst.w	r3, #2
 8001274:	d0f3      	beq.n	800125e <HAL_RCC_OscConfig+0x45a>
 8001276:	e016      	b.n	80012a6 <HAL_RCC_OscConfig+0x4a2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001278:	4a4c      	ldr	r2, [pc, #304]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 800127a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800127e:	f023 0301 	bic.w	r3, r3, #1
 8001282:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001286:	f7ff fd13 	bl	8000cb0 <HAL_GetTick>
 800128a:	4606      	mov	r6, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800128c:	e005      	b.n	800129a <HAL_RCC_OscConfig+0x496>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800128e:	f7ff fd0f 	bl	8000cb0 <HAL_GetTick>
 8001292:	1b80      	subs	r0, r0, r6
 8001294:	2802      	cmp	r0, #2
 8001296:	f200 80f9 	bhi.w	800148c <HAL_RCC_OscConfig+0x688>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800129a:	4b44      	ldr	r3, [pc, #272]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 800129c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012a0:	f013 0f02 	tst.w	r3, #2
 80012a4:	d1f3      	bne.n	800128e <HAL_RCC_OscConfig+0x48a>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80f1 	beq.w	8001490 <HAL_RCC_OscConfig+0x68c>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	f040 80a0 	bne.w	80013f4 <HAL_RCC_OscConfig+0x5f0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012b4:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 80012b6:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b8:	f003 0103 	and.w	r1, r3, #3
 80012bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012be:	4291      	cmp	r1, r2
 80012c0:	d122      	bne.n	8001308 <HAL_RCC_OscConfig+0x504>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80012c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80012c8:	3901      	subs	r1, #1
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ca:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80012ce:	d11b      	bne.n	8001308 <HAL_RCC_OscConfig+0x504>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012d6:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80012da:	d115      	bne.n	8001308 <HAL_RCC_OscConfig+0x504>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012dc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80012e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012e2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80012e6:	d10f      	bne.n	8001308 <HAL_RCC_OscConfig+0x504>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012e8:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80012ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80012ee:	0852      	lsrs	r2, r2, #1
 80012f0:	3a01      	subs	r2, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012f2:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80012f6:	d107      	bne.n	8001308 <HAL_RCC_OscConfig+0x504>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012f8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80012fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80012fe:	0852      	lsrs	r2, r2, #1
 8001300:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001302:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001306:	d057      	beq.n	80013b8 <HAL_RCC_OscConfig+0x5b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001308:	2d0c      	cmp	r5, #12
 800130a:	f000 80c3 	beq.w	8001494 <HAL_RCC_OscConfig+0x690>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800130e:	4b27      	ldr	r3, [pc, #156]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001316:	f040 80bf 	bne.w	8001498 <HAL_RCC_OscConfig+0x694>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800131a:	4a24      	ldr	r2, [pc, #144]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 800131c:	6813      	ldr	r3, [r2, #0]
 800131e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001322:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001324:	f7ff fcc4 	bl	8000cb0 <HAL_GetTick>
 8001328:	4605      	mov	r5, r0

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800132a:	e005      	b.n	8001338 <HAL_RCC_OscConfig+0x534>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132c:	f7ff fcc0 	bl	8000cb0 <HAL_GetTick>
 8001330:	1b40      	subs	r0, r0, r5
 8001332:	2802      	cmp	r0, #2
 8001334:	f200 80b2 	bhi.w	800149c <HAL_RCC_OscConfig+0x698>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001340:	d1f4      	bne.n	800132c <HAL_RCC_OscConfig+0x528>
                return HAL_TIMEOUT;
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001342:	491a      	ldr	r1, [pc, #104]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 8001344:	68cb      	ldr	r3, [r1, #12]
 8001346:	4d1b      	ldr	r5, [pc, #108]	; (80013b4 <HAL_RCC_OscConfig+0x5b0>)
 8001348:	401d      	ands	r5, r3
 800134a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800134c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800134e:	3a01      	subs	r2, #1
 8001350:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001354:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001356:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800135a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800135c:	0840      	lsrs	r0, r0, #1
 800135e:	3801      	subs	r0, #1
 8001360:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001364:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001366:	0840      	lsrs	r0, r0, #1
 8001368:	1e43      	subs	r3, r0, #1
 800136a:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
 800136e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001370:	ea42 63c3 	orr.w	r3, r2, r3, lsl #27
 8001374:	432b      	orrs	r3, r5
 8001376:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001378:	680b      	ldr	r3, [r1, #0]
 800137a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800137e:	600b      	str	r3, [r1, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001380:	68cb      	ldr	r3, [r1, #12]
 8001382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001386:	60cb      	str	r3, [r1, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001388:	f7ff fc92 	bl	8000cb0 <HAL_GetTick>
 800138c:	4604      	mov	r4, r0

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800138e:	e005      	b.n	800139c <HAL_RCC_OscConfig+0x598>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001390:	f7ff fc8e 	bl	8000cb0 <HAL_GetTick>
 8001394:	1b00      	subs	r0, r0, r4
 8001396:	2802      	cmp	r0, #2
 8001398:	f200 8082 	bhi.w	80014a0 <HAL_RCC_OscConfig+0x69c>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_RCC_OscConfig+0x5a8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013a4:	d0f4      	beq.n	8001390 <HAL_RCC_OscConfig+0x58c>
        /* PLL is already used as System core clock */
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80013a6:	2000      	movs	r0, #0
 80013a8:	e083      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40007000 	.word	0x40007000
 80013b4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013b8:	4b3f      	ldr	r3, [pc, #252]	; (80014b8 <HAL_RCC_OscConfig+0x6b4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013c0:	d170      	bne.n	80014a4 <HAL_RCC_OscConfig+0x6a0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <HAL_RCC_OscConfig+0x6b4>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80013ca:	601a      	str	r2, [r3, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80013d2:	60da      	str	r2, [r3, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80013d4:	f7ff fc6c 	bl	8000cb0 <HAL_GetTick>
 80013d8:	4604      	mov	r4, r0

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013da:	e004      	b.n	80013e6 <HAL_RCC_OscConfig+0x5e2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff fc68 	bl	8000cb0 <HAL_GetTick>
 80013e0:	1b00      	subs	r0, r0, r4
 80013e2:	2802      	cmp	r0, #2
 80013e4:	d860      	bhi.n	80014a8 <HAL_RCC_OscConfig+0x6a4>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013e6:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <HAL_RCC_OscConfig+0x6b4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013ee:	d0f5      	beq.n	80013dc <HAL_RCC_OscConfig+0x5d8>
        /* PLL is already used as System core clock */
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80013f0:	2000      	movs	r0, #0
 80013f2:	e05e      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013f4:	2d0c      	cmp	r5, #12
 80013f6:	d059      	beq.n	80014ac <HAL_RCC_OscConfig+0x6a8>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f8:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <HAL_RCC_OscConfig+0x6b4>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001400:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001408:	d104      	bne.n	8001414 <HAL_RCC_OscConfig+0x610>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800140a:	4a2b      	ldr	r2, [pc, #172]	; (80014b8 <HAL_RCC_OscConfig+0x6b4>)
 800140c:	68d3      	ldr	r3, [r2, #12]
 800140e:	f023 0303 	bic.w	r3, r3, #3
 8001412:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001414:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <HAL_RCC_OscConfig+0x6b4>)
 8001416:	68d3      	ldr	r3, [r2, #12]
 8001418:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800141c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001420:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001422:	f7ff fc45 	bl	8000cb0 <HAL_GetTick>
 8001426:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001428:	e004      	b.n	8001434 <HAL_RCC_OscConfig+0x630>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff fc41 	bl	8000cb0 <HAL_GetTick>
 800142e:	1b00      	subs	r0, r0, r4
 8001430:	2802      	cmp	r0, #2
 8001432:	d83d      	bhi.n	80014b0 <HAL_RCC_OscConfig+0x6ac>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_RCC_OscConfig+0x6b4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800143c:	d1f5      	bne.n	800142a <HAL_RCC_OscConfig+0x626>
        /* PLL is already used as System core clock */
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800143e:	2000      	movs	r0, #0
 8001440:	e037      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
  {
    return HAL_ERROR;
 8001442:	2001      	movs	r0, #1
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8001444:	4770      	bx	lr
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
      {
        return HAL_ERROR;
 8001446:	2001      	movs	r0, #1
 8001448:	e033      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
          {
            return HAL_ERROR;
 800144a:	2001      	movs	r0, #1
 800144c:	e031      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
            {
              return HAL_ERROR;
 800144e:	2001      	movs	r0, #1
 8001450:	e02f      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
 8001452:	e02e      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001454:	2003      	movs	r0, #3
 8001456:	e02c      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001458:	2003      	movs	r0, #3
 800145a:	e02a      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 800145c:	2001      	movs	r0, #1
 800145e:	e028      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001460:	2003      	movs	r0, #3
 8001462:	e026      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001464:	2003      	movs	r0, #3
 8001466:	e024      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
      {
        return HAL_ERROR;
 8001468:	2001      	movs	r0, #1
 800146a:	e022      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 800146c:	2003      	movs	r0, #3
 800146e:	e020      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001470:	2003      	movs	r0, #3
 8001472:	e01e      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001474:	2003      	movs	r0, #3
 8001476:	e01c      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001478:	2003      	movs	r0, #3
 800147a:	e01a      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800147c:	2003      	movs	r0, #3
 800147e:	e018      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001480:	2003      	movs	r0, #3
 8001482:	e016      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001484:	2003      	movs	r0, #3
 8001486:	e014      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8001488:	2003      	movs	r0, #3
 800148a:	e012      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 800148c:	2003      	movs	r0, #3
 800148e:	e010      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
        /* PLL is already used as System core clock */
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001490:	2000      	movs	r0, #0
 8001492:	e00e      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001494:	2001      	movs	r0, #1
 8001496:	e00c      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001498:	2001      	movs	r0, #1
 800149a:	e00a      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
              {
                return HAL_TIMEOUT;
 800149c:	2003      	movs	r0, #3
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
              {
                return HAL_TIMEOUT;
 80014a0:	2003      	movs	r0, #3
 80014a2:	e006      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
        /* PLL is already used as System core clock */
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80014a4:	2000      	movs	r0, #0
 80014a6:	e004      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
            {
              return HAL_TIMEOUT;
 80014a8:	2003      	movs	r0, #3
 80014aa:	e002      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014ac:	2001      	movs	r0, #1
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x6ae>
        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 80014b0:	2003      	movs	r0, #3
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 80014b2:	b003      	add	sp, #12
 80014b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <HAL_RCC_ClockConfig>:
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014bc:	2800      	cmp	r0, #0
 80014be:	f000 8094 	beq.w	80015ea <HAL_RCC_ClockConfig+0x12e>
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c2:	b570      	push	{r4, r5, r6, lr}
 80014c4:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014c6:	4b51      	ldr	r3, [pc, #324]	; (800160c <HAL_RCC_ClockConfig+0x150>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	428b      	cmp	r3, r1
 80014d0:	d20b      	bcs.n	80014ea <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	4a4e      	ldr	r2, [pc, #312]	; (800160c <HAL_RCC_ClockConfig+0x150>)
 80014d4:	6813      	ldr	r3, [r2, #0]
 80014d6:	f023 0307 	bic.w	r3, r3, #7
 80014da:	430b      	orrs	r3, r1
 80014dc:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014de:	6813      	ldr	r3, [r2, #0]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	4299      	cmp	r1, r3
 80014e6:	f040 8082 	bne.w	80015ee <HAL_RCC_ClockConfig+0x132>
 80014ea:	460d      	mov	r5, r1
      return HAL_ERROR;
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	f013 0f01 	tst.w	r3, #1
 80014f2:	d035      	beq.n	8001560 <HAL_RCC_ClockConfig+0xa4>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f4:	6863      	ldr	r3, [r4, #4]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d105      	bne.n	8001506 <HAL_RCC_ClockConfig+0x4a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014fa:	4a45      	ldr	r2, [pc, #276]	; (8001610 <HAL_RCC_ClockConfig+0x154>)
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001502:	d114      	bne.n	800152e <HAL_RCC_ClockConfig+0x72>
 8001504:	e075      	b.n	80015f2 <HAL_RCC_ClockConfig+0x136>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001506:	2b02      	cmp	r3, #2
 8001508:	d105      	bne.n	8001516 <HAL_RCC_ClockConfig+0x5a>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150a:	4a41      	ldr	r2, [pc, #260]	; (8001610 <HAL_RCC_ClockConfig+0x154>)
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001512:	d10c      	bne.n	800152e <HAL_RCC_ClockConfig+0x72>
 8001514:	e06f      	b.n	80015f6 <HAL_RCC_ClockConfig+0x13a>
        {
          return HAL_ERROR;
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001516:	b92b      	cbnz	r3, 8001524 <HAL_RCC_ClockConfig+0x68>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001518:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <HAL_RCC_ClockConfig+0x154>)
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	f012 0f02 	tst.w	r2, #2
 8001520:	d105      	bne.n	800152e <HAL_RCC_ClockConfig+0x72>
 8001522:	e06a      	b.n	80015fa <HAL_RCC_ClockConfig+0x13e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001524:	4a3a      	ldr	r2, [pc, #232]	; (8001610 <HAL_RCC_ClockConfig+0x154>)
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800152c:	d067      	beq.n	80015fe <HAL_RCC_ClockConfig+0x142>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800152e:	4938      	ldr	r1, [pc, #224]	; (8001610 <HAL_RCC_ClockConfig+0x154>)
 8001530:	688a      	ldr	r2, [r1, #8]
 8001532:	f022 0203 	bic.w	r2, r2, #3
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800153a:	f7ff fbb9 	bl	8000cb0 <HAL_GetTick>
 800153e:	4606      	mov	r6, r0

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001540:	e006      	b.n	8001550 <HAL_RCC_ClockConfig+0x94>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001542:	f7ff fbb5 	bl	8000cb0 <HAL_GetTick>
 8001546:	1b80      	subs	r0, r0, r6
 8001548:	f241 3388 	movw	r3, #5000	; 0x1388
 800154c:	4298      	cmp	r0, r3
 800154e:	d858      	bhi.n	8001602 <HAL_RCC_ClockConfig+0x146>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <HAL_RCC_ClockConfig+0x154>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	6862      	ldr	r2, [r4, #4]
 800155a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_ClockConfig+0x86>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001560:	6823      	ldr	r3, [r4, #0]
 8001562:	f013 0f02 	tst.w	r3, #2
 8001566:	d006      	beq.n	8001576 <HAL_RCC_ClockConfig+0xba>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001568:	4929      	ldr	r1, [pc, #164]	; (8001610 <HAL_RCC_ClockConfig+0x154>)
 800156a:	688b      	ldr	r3, [r1, #8]
 800156c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001570:	68a3      	ldr	r3, [r4, #8]
 8001572:	4313      	orrs	r3, r2
 8001574:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <HAL_RCC_ClockConfig+0x150>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	429d      	cmp	r5, r3
 8001580:	d20a      	bcs.n	8001598 <HAL_RCC_ClockConfig+0xdc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4a22      	ldr	r2, [pc, #136]	; (800160c <HAL_RCC_ClockConfig+0x150>)
 8001584:	6813      	ldr	r3, [r2, #0]
 8001586:	f023 0307 	bic.w	r3, r3, #7
 800158a:	432b      	orrs	r3, r5
 800158c:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	6813      	ldr	r3, [r2, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	429d      	cmp	r5, r3
 8001596:	d136      	bne.n	8001606 <HAL_RCC_ClockConfig+0x14a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	f013 0f04 	tst.w	r3, #4
 800159e:	d006      	beq.n	80015ae <HAL_RCC_ClockConfig+0xf2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a0:	491b      	ldr	r1, [pc, #108]	; (8001610 <HAL_RCC_ClockConfig+0x154>)
 80015a2:	688b      	ldr	r3, [r1, #8]
 80015a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015a8:	68e3      	ldr	r3, [r4, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ae:	6823      	ldr	r3, [r4, #0]
 80015b0:	f013 0f08 	tst.w	r3, #8
 80015b4:	d007      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x10a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015b6:	4a16      	ldr	r2, [pc, #88]	; (8001610 <HAL_RCC_ClockConfig+0x154>)
 80015b8:	6893      	ldr	r3, [r2, #8]
 80015ba:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80015be:	6921      	ldr	r1, [r4, #16]
 80015c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015c4:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015c6:	f7ff fbc1 	bl	8000d4c <HAL_RCC_GetSysClockFreq>
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_RCC_ClockConfig+0x154>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <HAL_RCC_ClockConfig+0x158>)
 80015d4:	5cd3      	ldrb	r3, [r2, r3]
 80015d6:	f003 031f 	and.w	r3, r3, #31
 80015da:	40d8      	lsrs	r0, r3
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_RCC_ClockConfig+0x15c>)
 80015de:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015e0:	4b0e      	ldr	r3, [pc, #56]	; (800161c <HAL_RCC_ClockConfig+0x160>)
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	f7ff fb0e 	bl	8000c04 <HAL_InitTick>

  return status;
 80015e8:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
  {
    return HAL_ERROR;
 80015ea:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);

  return status;
}
 80015ec:	4770      	bx	lr

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
 80015f0:	bd70      	pop	{r4, r5, r6, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
      {
        return HAL_ERROR;
 80015f2:	2001      	movs	r0, #1
 80015f4:	bd70      	pop	{r4, r5, r6, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
        {
          return HAL_ERROR;
 80015f6:	2001      	movs	r0, #1
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
        {
          return HAL_ERROR;
 80015fa:	2001      	movs	r0, #1
 80015fc:	bd70      	pop	{r4, r5, r6, pc}
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
        {
          return HAL_ERROR;
 80015fe:	2001      	movs	r0, #1
 8001600:	bd70      	pop	{r4, r5, r6, pc}

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
      {
        return HAL_TIMEOUT;
 8001602:	2003      	movs	r0, #3
 8001604:	bd70      	pop	{r4, r5, r6, pc}

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    {
      return HAL_ERROR;
 8001606:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);

  return status;
}
 8001608:	bd70      	pop	{r4, r5, r6, pc}
 800160a:	bf00      	nop
 800160c:	40022000 	.word	0x40022000
 8001610:	40021000 	.word	0x40021000
 8001614:	08004648 	.word	0x08004648
 8001618:	20000008 	.word	0x20000008
 800161c:	20000000 	.word	0x20000000

08001620 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001620:	4b01      	ldr	r3, [pc, #4]	; (8001628 <HAL_RCC_GetHCLKFreq+0x8>)
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000008 	.word	0x20000008

0800162c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800162c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800162e:	f7ff fff7 	bl	8001620 <HAL_RCC_GetHCLKFreq>
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_RCC_GetPCLK1Freq+0x20>)
 800163c:	5cd3      	ldrb	r3, [r2, r3]
 800163e:	f003 031f 	and.w	r3, r3, #31
}
 8001642:	40d8      	lsrs	r0, r3
 8001644:	bd08      	pop	{r3, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	08004658 	.word	0x08004658

08001650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001650:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001652:	f7ff ffe5 	bl	8001620 <HAL_RCC_GetHCLKFreq>
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001660:	5cd3      	ldrb	r3, [r2, r3]
 8001662:	f003 031f 	and.w	r3, r3, #31
}
 8001666:	40d8      	lsrs	r0, r3
 8001668:	bd08      	pop	{r3, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	08004658 	.word	0x08004658

08001674 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001674:	230f      	movs	r3, #15
 8001676:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_RCC_GetClockConfig+0x34>)
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	f002 0203 	and.w	r2, r2, #3
 8001680:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001688:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001690:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	08db      	lsrs	r3, r3, #3
 8001696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800169a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_RCC_GetClockConfig+0x38>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	600b      	str	r3, [r1, #0]
 80016a6:	4770      	bx	lr
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40022000 	.word	0x40022000

080016b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80016b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80016b2:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f013 0f03 	tst.w	r3, #3
 80016ba:	d012      	beq.n	80016e2 <RCCEx_PLLSAI1_Config+0x32>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80016bc:	4b5a      	ldr	r3, [pc, #360]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	6802      	ldr	r2, [r0, #0]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d141      	bne.n	800174e <RCCEx_PLLSAI1_Config+0x9e>
       ||
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d041      	beq.n	8001752 <RCCEx_PLLSAI1_Config+0xa2>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80016ce:	4b56      	ldr	r3, [pc, #344]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80016d6:	3301      	adds	r3, #1
 80016d8:	6842      	ldr	r2, [r0, #4]
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
 80016da:	4293      	cmp	r3, r2
 80016dc:	d13b      	bne.n	8001756 <RCCEx_PLLSAI1_Config+0xa6>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80016de:	2400      	movs	r4, #0
 80016e0:	e03a      	b.n	8001758 <RCCEx_PLLSAI1_Config+0xa8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80016e2:	6803      	ldr	r3, [r0, #0]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d00a      	beq.n	80016fe <RCCEx_PLLSAI1_Config+0x4e>
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d00f      	beq.n	800170c <RCCEx_PLLSAI1_Config+0x5c>
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d119      	bne.n	8001724 <RCCEx_PLLSAI1_Config+0x74>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80016f0:	4a4d      	ldr	r2, [pc, #308]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	f012 0f02 	tst.w	r2, #2
 80016f8:	d016      	beq.n	8001728 <RCCEx_PLLSAI1_Config+0x78>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80016fa:	2400      	movs	r4, #0
 80016fc:	e01b      	b.n	8001736 <RCCEx_PLLSAI1_Config+0x86>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80016fe:	4a4a      	ldr	r2, [pc, #296]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001706:	d011      	beq.n	800172c <RCCEx_PLLSAI1_Config+0x7c>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001708:	2400      	movs	r4, #0
 800170a:	e014      	b.n	8001736 <RCCEx_PLLSAI1_Config+0x86>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800170c:	4a46      	ldr	r2, [pc, #280]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001714:	d10c      	bne.n	8001730 <RCCEx_PLLSAI1_Config+0x80>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001716:	4a44      	ldr	r2, [pc, #272]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800171e:	d009      	beq.n	8001734 <RCCEx_PLLSAI1_Config+0x84>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001720:	2400      	movs	r4, #0
 8001722:	e008      	b.n	8001736 <RCCEx_PLLSAI1_Config+0x86>
          status = HAL_ERROR;
        }
      }
      break;
    default:
      status = HAL_ERROR;
 8001724:	2401      	movs	r4, #1
 8001726:	e006      	b.n	8001736 <RCCEx_PLLSAI1_Config+0x86>
    switch(PllSai1->PLLSAI1Source)
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
      {
        status = HAL_ERROR;
 8001728:	2401      	movs	r4, #1
 800172a:	e004      	b.n	8001736 <RCCEx_PLLSAI1_Config+0x86>
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
      {
        status = HAL_ERROR;
 800172c:	2401      	movs	r4, #1
 800172e:	e002      	b.n	8001736 <RCCEx_PLLSAI1_Config+0x86>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001730:	2400      	movs	r4, #0
 8001732:	e000      	b.n	8001736 <RCCEx_PLLSAI1_Config+0x86>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
        {
          status = HAL_ERROR;
 8001734:	2401      	movs	r4, #1
    default:
      status = HAL_ERROR;
      break;
    }

    if(status == HAL_OK)
 8001736:	b97c      	cbnz	r4, 8001758 <RCCEx_PLLSAI1_Config+0xa8>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001738:	4e3b      	ldr	r6, [pc, #236]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 800173a:	68f2      	ldr	r2, [r6, #12]
 800173c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001740:	6845      	ldr	r5, [r0, #4]
 8001742:	3d01      	subs	r5, #1
 8001744:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001748:	4313      	orrs	r3, r2
 800174a:	60f3      	str	r3, [r6, #12]
 800174c:	e004      	b.n	8001758 <RCCEx_PLLSAI1_Config+0xa8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800174e:	2401      	movs	r4, #1
 8001750:	e002      	b.n	8001758 <RCCEx_PLLSAI1_Config+0xa8>
 8001752:	2401      	movs	r4, #1
 8001754:	e000      	b.n	8001758 <RCCEx_PLLSAI1_Config+0xa8>
 8001756:	2401      	movs	r4, #1
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8001758:	2c00      	cmp	r4, #0
 800175a:	d163      	bne.n	8001824 <RCCEx_PLLSAI1_Config+0x174>
 800175c:	460f      	mov	r7, r1
 800175e:	4605      	mov	r5, r0
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001760:	4a31      	ldr	r2, [pc, #196]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 8001762:	6813      	ldr	r3, [r2, #0]
 8001764:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800176a:	f7ff faa1 	bl	8000cb0 <HAL_GetTick>
 800176e:	4606      	mov	r6, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001770:	e004      	b.n	800177c <RCCEx_PLLSAI1_Config+0xcc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001772:	f7ff fa9d 	bl	8000cb0 <HAL_GetTick>
 8001776:	1b80      	subs	r0, r0, r6
 8001778:	2802      	cmp	r0, #2
 800177a:	d805      	bhi.n	8001788 <RCCEx_PLLSAI1_Config+0xd8>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001784:	d1f5      	bne.n	8001772 <RCCEx_PLLSAI1_Config+0xc2>
 8001786:	e000      	b.n	800178a <RCCEx_PLLSAI1_Config+0xda>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
 8001788:	2403      	movs	r4, #3
        break;
      }
    }

    if(status == HAL_OK)
 800178a:	2c00      	cmp	r4, #0
 800178c:	d14a      	bne.n	8001824 <RCCEx_PLLSAI1_Config+0x174>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800178e:	b96f      	cbnz	r7, 80017ac <RCCEx_PLLSAI1_Config+0xfc>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001790:	4925      	ldr	r1, [pc, #148]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 8001792:	690b      	ldr	r3, [r1, #16]
 8001794:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8001798:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800179c:	68a8      	ldr	r0, [r5, #8]
 800179e:	68eb      	ldr	r3, [r5, #12]
 80017a0:	06db      	lsls	r3, r3, #27
 80017a2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80017a6:	4313      	orrs	r3, r2
 80017a8:	610b      	str	r3, [r1, #16]
 80017aa:	e020      	b.n	80017ee <RCCEx_PLLSAI1_Config+0x13e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80017ac:	2f01      	cmp	r7, #1
 80017ae:	d10f      	bne.n	80017d0 <RCCEx_PLLSAI1_Config+0x120>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80017b0:	4e1d      	ldr	r6, [pc, #116]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 80017b2:	6933      	ldr	r3, [r6, #16]
 80017b4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80017b8:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 80017bc:	68a8      	ldr	r0, [r5, #8]
 80017be:	692b      	ldr	r3, [r5, #16]
 80017c0:	085a      	lsrs	r2, r3, #1
 80017c2:	3a01      	subs	r2, #1
 80017c4:	0552      	lsls	r2, r2, #21
 80017c6:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 80017ca:	430b      	orrs	r3, r1
 80017cc:	6133      	str	r3, [r6, #16]
 80017ce:	e00e      	b.n	80017ee <RCCEx_PLLSAI1_Config+0x13e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80017d0:	4e15      	ldr	r6, [pc, #84]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 80017d2:	6933      	ldr	r3, [r6, #16]
 80017d4:	f023 61c0 	bic.w	r1, r3, #100663296	; 0x6000000
 80017d8:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
 80017dc:	68a8      	ldr	r0, [r5, #8]
 80017de:	696b      	ldr	r3, [r5, #20]
 80017e0:	085a      	lsrs	r2, r3, #1
 80017e2:	3a01      	subs	r2, #1
 80017e4:	0652      	lsls	r2, r2, #25
 80017e6:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 80017ea:	430b      	orrs	r3, r1
 80017ec:	6133      	str	r3, [r6, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 80017f0:	6813      	ldr	r3, [r2, #0]
 80017f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80017f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff fa5a 	bl	8000cb0 <HAL_GetTick>
 80017fc:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80017fe:	e004      	b.n	800180a <RCCEx_PLLSAI1_Config+0x15a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001800:	f7ff fa56 	bl	8000cb0 <HAL_GetTick>
 8001804:	1b80      	subs	r0, r0, r6
 8001806:	2802      	cmp	r0, #2
 8001808:	d805      	bhi.n	8001816 <RCCEx_PLLSAI1_Config+0x166>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001812:	d0f5      	beq.n	8001800 <RCCEx_PLLSAI1_Config+0x150>
 8001814:	e000      	b.n	8001818 <RCCEx_PLLSAI1_Config+0x168>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
        {
          status = HAL_TIMEOUT;
 8001816:	2403      	movs	r4, #3
          break;
        }
      }

      if(status == HAL_OK)
 8001818:	b924      	cbnz	r4, 8001824 <RCCEx_PLLSAI1_Config+0x174>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800181a:	4a03      	ldr	r2, [pc, #12]	; (8001828 <RCCEx_PLLSAI1_Config+0x178>)
 800181c:	6911      	ldr	r1, [r2, #16]
 800181e:	69ab      	ldr	r3, [r5, #24]
 8001820:	430b      	orrs	r3, r1
 8001822:	6113      	str	r3, [r2, #16]
      }
    }
  }

  return status;
}
 8001824:	4620      	mov	r0, r4
 8001826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001828:	40021000 	.word	0x40021000

0800182c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001834:	6803      	ldr	r3, [r0, #0]
 8001836:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800183a:	d024      	beq.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800183c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800183e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001842:	d006      	beq.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001844:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001848:	d001      	beq.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x22>
 800184a:	b97b      	cbnz	r3, 800186c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800184c:	e008      	b.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x34>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800184e:	2600      	movs	r6, #0
 8001850:	e00d      	b.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x42>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001852:	4aa1      	ldr	r2, [pc, #644]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001854:	68d3      	ldr	r3, [r2, #12]
 8001856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185a:	60d3      	str	r3, [r2, #12]
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800185c:	2600      	movs	r6, #0
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800185e:	e006      	b.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x42>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001860:	2100      	movs	r1, #0
 8001862:	3004      	adds	r0, #4
 8001864:	f7ff ff24 	bl	80016b0 <RCCEx_PLLSAI1_Config>
 8001868:	4606      	mov	r6, r0
      /* SAI1 clock source config set later after clock selection check */
      break;
 800186a:	e000      	b.n	800186e <HAL_RCCEx_PeriphCLKConfig+0x42>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800186c:	2601      	movs	r6, #1
      break;
    }

    if(ret == HAL_OK)
 800186e:	b96e      	cbnz	r6, 800188c <HAL_RCCEx_PeriphCLKConfig+0x60>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001870:	4999      	ldr	r1, [pc, #612]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001872:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001876:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800187a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800187c:	4313      	orrs	r3, r2
 800187e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001882:	4637      	mov	r7, r6
 8001884:	e003      	b.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001886:	2700      	movs	r7, #0
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001888:	463e      	mov	r6, r7
 800188a:	e000      	b.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
    }
    else
    {
      /* set overall return value */
      status = ret;
 800188c:	4637      	mov	r7, r6
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001894:	d076      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x158>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001896:	4b90      	ldr	r3, [pc, #576]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800189e:	d101      	bne.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80018a4:	2300      	movs	r3, #0
 80018a6:	b163      	cbz	r3, 80018c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a8:	4b8b      	ldr	r3, [pc, #556]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80018aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018b0:	659a      	str	r2, [r3, #88]	; 0x58
 80018b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018bc:	f04f 0801 	mov.w	r8, #1
 80018c0:	e001      	b.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c2:	f04f 0800 	mov.w	r8, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c6:	4a85      	ldr	r2, [pc, #532]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80018c8:	6813      	ldr	r3, [r2, #0]
 80018ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018d0:	f7ff f9ee 	bl	8000cb0 <HAL_GetTick>
 80018d4:	4605      	mov	r5, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80018d6:	e004      	b.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d8:	f7ff f9ea 	bl	8000cb0 <HAL_GetTick>
 80018dc:	1b40      	subs	r0, r0, r5
 80018de:	2802      	cmp	r0, #2
 80018e0:	d805      	bhi.n	80018ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80018e2:	4b7e      	ldr	r3, [pc, #504]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018ea:	d0f5      	beq.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80018ec:	e000      	b.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 80018ee:	2603      	movs	r6, #3
        break;
      }
    }

    if(ret == HAL_OK)
 80018f0:	2e00      	cmp	r6, #0
 80018f2:	d13c      	bne.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x142>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80018f4:	4b78      	ldr	r3, [pc, #480]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80018fa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80018fe:	d015      	beq.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8001900:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001902:	4293      	cmp	r3, r2
 8001904:	d012      	beq.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x100>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001906:	4a74      	ldr	r2, [pc, #464]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001908:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800190c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001910:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8001914:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001918:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800191c:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8001920:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001924:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800192c:	f013 0f01 	tst.w	r3, #1
 8001930:	d012      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001932:	f7ff f9bd 	bl	8000cb0 <HAL_GetTick>
 8001936:	4605      	mov	r5, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001938:	e006      	b.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff f9b9 	bl	8000cb0 <HAL_GetTick>
 800193e:	1b40      	subs	r0, r0, r5
 8001940:	f241 3388 	movw	r3, #5000	; 0x1388
 8001944:	4298      	cmp	r0, r3
 8001946:	d806      	bhi.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001948:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	f013 0f02 	tst.w	r3, #2
 8001952:	d0f2      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8001954:	e000      	b.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
          {
            ret = HAL_TIMEOUT;
 8001956:	2603      	movs	r6, #3
            break;
          }
        }
      }

      if(ret == HAL_OK)
 8001958:	b95e      	cbnz	r6, 8001972 <HAL_RCCEx_PeriphCLKConfig+0x146>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800195a:	495f      	ldr	r1, [pc, #380]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800195c:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 8001960:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001964:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001966:	4313      	orrs	r3, r2
 8001968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800196c:	e002      	b.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800196e:	4637      	mov	r7, r6
 8001970:	e000      	b.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x148>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001972:	4637      	mov	r7, r6
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001974:	f1b8 0f00 	cmp.w	r8, #0
 8001978:	d004      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197a:	4a57      	ldr	r2, [pc, #348]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800197c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800197e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001982:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	f013 0f01 	tst.w	r3, #1
 800198a:	d008      	beq.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800198c:	4952      	ldr	r1, [pc, #328]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800198e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001992:	f023 0203 	bic.w	r2, r3, #3
 8001996:	6a23      	ldr	r3, [r4, #32]
 8001998:	4313      	orrs	r3, r2
 800199a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800199e:	6823      	ldr	r3, [r4, #0]
 80019a0:	f013 0f02 	tst.w	r3, #2
 80019a4:	d008      	beq.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019a6:	494c      	ldr	r1, [pc, #304]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80019a8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80019ac:	f023 020c 	bic.w	r2, r3, #12
 80019b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019b2:	4313      	orrs	r3, r2
 80019b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	f013 0f04 	tst.w	r3, #4
 80019be:	d008      	beq.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019c0:	4945      	ldr	r1, [pc, #276]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80019c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80019c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80019ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019cc:	4313      	orrs	r3, r2
 80019ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	f013 0f20 	tst.w	r3, #32
 80019d8:	d008      	beq.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80019da:	493f      	ldr	r1, [pc, #252]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80019dc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80019e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80019e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019e6:	4313      	orrs	r3, r2
 80019e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80019f2:	d008      	beq.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80019f4:	4938      	ldr	r1, [pc, #224]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80019f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80019fa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80019fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a00:	4313      	orrs	r3, r2
 8001a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a0c:	d008      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a0e:	4932      	ldr	r1, [pc, #200]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001a10:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001a26:	d008      	beq.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a28:	492b      	ldr	r1, [pc, #172]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001a2a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a34:	4313      	orrs	r3, r2
 8001a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a40:	d008      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001a42:	4925      	ldr	r1, [pc, #148]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001a44:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001a5c:	491e      	ldr	r1, [pc, #120]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001a5e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001a6e:	6823      	ldr	r3, [r4, #0]
 8001a70:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001a74:	d01a      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001a76:	4918      	ldr	r1, [pc, #96]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001a78:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001a80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a82:	4313      	orrs	r3, r2
 8001a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001a88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a8e:	d104      	bne.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001a90:	68cb      	ldr	r3, [r1, #12]
 8001a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a96:	60cb      	str	r3, [r1, #12]
 8001a98:	e008      	b.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001a9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a9e:	d105      	bne.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	1d20      	adds	r0, r4, #4
 8001aa4:	f7ff fe04 	bl	80016b0 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8001aa8:	b100      	cbz	r0, 8001aac <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* set overall return value */
        status = ret;
 8001aaa:	4607      	mov	r7, r0
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001ab2:	d01e      	beq.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ab4:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001ab6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001aba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001abe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ac6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001acc:	d108      	bne.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ace:	68cb      	ldr	r3, [r1, #12]
 8001ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ad4:	60cb      	str	r3, [r1, #12]
 8001ad6:	e00c      	b.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40007000 	.word	0x40007000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001ae0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ae4:	d105      	bne.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	1d20      	adds	r0, r4, #4
 8001aea:	f7ff fde1 	bl	80016b0 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8001aee:	b100      	cbz	r0, 8001af2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      {
        /* set overall return value */
        status = ret;
 8001af0:	4607      	mov	r7, r0
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001af2:	6823      	ldr	r3, [r4, #0]
 8001af4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001af8:	d012      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001afa:	4912      	ldr	r1, [pc, #72]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001afc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001b04:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001b06:	4313      	orrs	r3, r2
 8001b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001b0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001b0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b12:	d105      	bne.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001b14:	2102      	movs	r1, #2
 8001b16:	1d20      	adds	r0, r4, #4
 8001b18:	f7ff fdca 	bl	80016b0 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8001b1c:	b100      	cbz	r0, 8001b20 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* set overall return value */
        status = ret;
 8001b1e:	4607      	mov	r7, r0
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001b26:	d008      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001b28:	4906      	ldr	r1, [pc, #24]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001b2a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001b32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b34:	4313      	orrs	r3, r2
 8001b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 8001b3a:	4638      	mov	r0, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b4c:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8001b4e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b50:	e0bd      	b.n	8001cce <HAL_GPIO_Init+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b52:	2401      	movs	r4, #1
 8001b54:	409c      	lsls	r4, r3

    if (iocurrent != 0x00u)
 8001b56:	4022      	ands	r2, r4
 8001b58:	f000 80b8 	beq.w	8001ccc <HAL_GPIO_Init+0x184>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b5c:	684d      	ldr	r5, [r1, #4]
 8001b5e:	1e6e      	subs	r6, r5, #1
 8001b60:	2e01      	cmp	r6, #1
 8001b62:	d903      	bls.n	8001b6c <HAL_GPIO_Init+0x24>
 8001b64:	2d11      	cmp	r5, #17
 8001b66:	d001      	beq.n	8001b6c <HAL_GPIO_Init+0x24>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b68:	2d12      	cmp	r5, #18
 8001b6a:	d115      	bne.n	8001b98 <HAL_GPIO_Init+0x50>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b6c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b6e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001b72:	2603      	movs	r6, #3
 8001b74:	fa06 f60e 	lsl.w	r6, r6, lr
 8001b78:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b7c:	68cd      	ldr	r5, [r1, #12]
 8001b7e:	fa05 f50e 	lsl.w	r5, r5, lr
 8001b82:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001b84:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b86:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b88:	ea25 0404 	bic.w	r4, r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b8c:	684d      	ldr	r5, [r1, #4]
 8001b8e:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8001b92:	409d      	lsls	r5, r3
 8001b94:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001b96:	6044      	str	r4, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b98:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b9a:	005f      	lsls	r7, r3, #1
 8001b9c:	2403      	movs	r4, #3
 8001b9e:	40bc      	lsls	r4, r7
 8001ba0:	43e4      	mvns	r4, r4
 8001ba2:	ea05 0e04 	and.w	lr, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ba6:	688d      	ldr	r5, [r1, #8]
 8001ba8:	40bd      	lsls	r5, r7
 8001baa:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->PUPDR = temp;
 8001bae:	60c5      	str	r5, [r0, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb0:	684d      	ldr	r5, [r1, #4]
 8001bb2:	2d02      	cmp	r5, #2
 8001bb4:	d001      	beq.n	8001bba <HAL_GPIO_Init+0x72>
 8001bb6:	2d12      	cmp	r5, #18
 8001bb8:	d113      	bne.n	8001be2 <HAL_GPIO_Init+0x9a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bba:	08de      	lsrs	r6, r3, #3
 8001bbc:	3608      	adds	r6, #8
 8001bbe:	f850 8026 	ldr.w	r8, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bc2:	f003 0507 	and.w	r5, r3, #7
 8001bc6:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 8001bca:	250f      	movs	r5, #15
 8001bcc:	fa05 f50e 	lsl.w	r5, r5, lr
 8001bd0:	ea28 0c05 	bic.w	ip, r8, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bd4:	690d      	ldr	r5, [r1, #16]
 8001bd6:	fa05 f50e 	lsl.w	r5, r5, lr
 8001bda:	ea4c 0505 	orr.w	r5, ip, r5
        GPIOx->AFR[position >> 3u] = temp;
 8001bde:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be2:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001be4:	ea04 0605 	and.w	r6, r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001be8:	684c      	ldr	r4, [r1, #4]
 8001bea:	f004 0503 	and.w	r5, r4, #3
 8001bee:	fa05 f407 	lsl.w	r4, r5, r7
 8001bf2:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 8001bf4:	6004      	str	r4, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf6:	684c      	ldr	r4, [r1, #4]
 8001bf8:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001bfc:	d066      	beq.n	8001ccc <HAL_GPIO_Init+0x184>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	4c38      	ldr	r4, [pc, #224]	; (8001ce0 <HAL_GPIO_Init+0x198>)
 8001c00:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001c02:	f045 0501 	orr.w	r5, r5, #1
 8001c06:	6625      	str	r5, [r4, #96]	; 0x60
 8001c08:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8001c0a:	f004 0401 	and.w	r4, r4, #1
 8001c0e:	9401      	str	r4, [sp, #4]
 8001c10:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c12:	089e      	lsrs	r6, r3, #2
 8001c14:	1cb5      	adds	r5, r6, #2
 8001c16:	4c33      	ldr	r4, [pc, #204]	; (8001ce4 <HAL_GPIO_Init+0x19c>)
 8001c18:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c1c:	f003 0403 	and.w	r4, r3, #3
 8001c20:	00a4      	lsls	r4, r4, #2
 8001c22:	270f      	movs	r7, #15
 8001c24:	40a7      	lsls	r7, r4
 8001c26:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c2a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001c2e:	d010      	beq.n	8001c52 <HAL_GPIO_Init+0x10a>
 8001c30:	4d2d      	ldr	r5, [pc, #180]	; (8001ce8 <HAL_GPIO_Init+0x1a0>)
 8001c32:	42a8      	cmp	r0, r5
 8001c34:	d00f      	beq.n	8001c56 <HAL_GPIO_Init+0x10e>
 8001c36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c3a:	42a8      	cmp	r0, r5
 8001c3c:	d00d      	beq.n	8001c5a <HAL_GPIO_Init+0x112>
 8001c3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c42:	42a8      	cmp	r0, r5
 8001c44:	d00b      	beq.n	8001c5e <HAL_GPIO_Init+0x116>
 8001c46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c4a:	42a8      	cmp	r0, r5
 8001c4c:	d109      	bne.n	8001c62 <HAL_GPIO_Init+0x11a>
 8001c4e:	2504      	movs	r5, #4
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x11c>
 8001c52:	2500      	movs	r5, #0
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x11c>
 8001c56:	2501      	movs	r5, #1
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x11c>
 8001c5a:	2502      	movs	r5, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x11c>
 8001c5e:	2503      	movs	r5, #3
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x11c>
 8001c62:	2507      	movs	r5, #7
 8001c64:	fa05 f404 	lsl.w	r4, r5, r4
 8001c68:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c6a:	3602      	adds	r6, #2
 8001c6c:	4d1d      	ldr	r5, [pc, #116]	; (8001ce4 <HAL_GPIO_Init+0x19c>)
 8001c6e:	f845 4026 	str.w	r4, [r5, r6, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c72:	4c1e      	ldr	r4, [pc, #120]	; (8001cec <HAL_GPIO_Init+0x1a4>)
 8001c74:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001c76:	43d4      	mvns	r4, r2
 8001c78:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c7c:	684f      	ldr	r7, [r1, #4]
 8001c7e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001c82:	d001      	beq.n	8001c88 <HAL_GPIO_Init+0x140>
        {
          temp |= iocurrent;
 8001c84:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8001c88:	4d18      	ldr	r5, [pc, #96]	; (8001cec <HAL_GPIO_Init+0x1a4>)
 8001c8a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8001c8c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001c8e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c92:	684f      	ldr	r7, [r1, #4]
 8001c94:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001c98:	d001      	beq.n	8001c9e <HAL_GPIO_Init+0x156>
        {
          temp |= iocurrent;
 8001c9a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8001c9e:	4d13      	ldr	r5, [pc, #76]	; (8001cec <HAL_GPIO_Init+0x1a4>)
 8001ca0:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ca2:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8001ca4:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ca8:	684f      	ldr	r7, [r1, #4]
 8001caa:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001cae:	d001      	beq.n	8001cb4 <HAL_GPIO_Init+0x16c>
        {
          temp |= iocurrent;
 8001cb0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001cb4:	4d0d      	ldr	r5, [pc, #52]	; (8001cec <HAL_GPIO_Init+0x1a4>)
 8001cb6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001cb8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001cba:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cbc:	684e      	ldr	r6, [r1, #4]
 8001cbe:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001cc2:	d001      	beq.n	8001cc8 <HAL_GPIO_Init+0x180>
        {
          temp |= iocurrent;
 8001cc4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001cc8:	4a08      	ldr	r2, [pc, #32]	; (8001cec <HAL_GPIO_Init+0x1a4>)
 8001cca:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8001ccc:	3301      	adds	r3, #1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cce:	680a      	ldr	r2, [r1, #0]
 8001cd0:	fa32 f403 	lsrs.w	r4, r2, r3
 8001cd4:	f47f af3d 	bne.w	8001b52 <HAL_GPIO_Init+0xa>
      }
    }

    position++;
  }
}
 8001cd8:	b002      	add	sp, #8
 8001cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	40010400 	.word	0x40010400

08001cf0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	b10a      	cbz	r2, 8001cf6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cf2:	6181      	str	r1, [r0, #24]
 8001cf4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cf6:	6281      	str	r1, [r0, #40]	; 0x28
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop

08001cfc <HAL_DMA_Abort>:
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cfc:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d006      	beq.n	8001d14 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d06:	2304      	movs	r3, #4
 8001d08:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001d10:	2001      	movs	r0, #1
 8001d12:	4770      	bx	lr
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d14:	6802      	ldr	r2, [r0, #0]
 8001d16:	6813      	ldr	r3, [r2, #0]
 8001d18:	f023 030e 	bic.w	r3, r3, #14
 8001d1c:	6013      	str	r3, [r2, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d1e:	6802      	ldr	r2, [r0, #0]
 8001d20:	6813      	ldr	r3, [r2, #0]
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	6013      	str	r3, [r2, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d28:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001d2a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d2c:	f003 031c 	and.w	r3, r3, #28
 8001d30:	2201      	movs	r2, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	604b      	str	r3, [r1, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d38:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    return status;
 8001d42:	4618      	mov	r0, r3
  }
}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop

08001d48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d48:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d4a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d003      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d54:	2304      	movs	r3, #4
 8001d56:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001d58:	2001      	movs	r0, #1
 8001d5a:	bd08      	pop	{r3, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d5c:	6802      	ldr	r2, [r0, #0]
 8001d5e:	6813      	ldr	r3, [r2, #0]
 8001d60:	f023 030e 	bic.w	r3, r3, #14
 8001d64:	6013      	str	r3, [r2, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d66:	6802      	ldr	r2, [r0, #0]
 8001d68:	6813      	ldr	r3, [r2, #0]
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d70:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001d72:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d74:	f003 031c 	and.w	r3, r3, #28
 8001d78:	2201      	movs	r2, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	604b      	str	r3, [r1, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d80:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d84:	2300      	movs	r3, #0
 8001d86:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d8c:	b113      	cbz	r3, 8001d94 <HAL_DMA_Abort_IT+0x4c>
    {
      hdma->XferAbortCallback(hdma);
 8001d8e:	4798      	blx	r3
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 8001d90:	2000      	movs	r0, #0
 8001d92:	bd08      	pop	{r3, pc}
 8001d94:	2000      	movs	r0, #0
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001d96:	bd08      	pop	{r3, pc}

08001d98 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d98:	4b02      	ldr	r3, [pc, #8]	; (8001da4 <HAL_PWREx_GetVoltageRange+0xc>)
 8001d9a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001d9c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40007000 	.word	0x40007000

08001da8 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001dac:	d127      	bne.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x56>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dae:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dba:	d030      	beq.n	8001e1e <HAL_PWREx_ControlVoltageScaling+0x76>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001dbe:	6813      	ldr	r3, [r2, #0]
 8001dc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	2332      	movs	r3, #50	; 0x32
 8001dd0:	fb03 f302 	mul.w	r3, r3, r2
 8001dd4:	4a17      	ldr	r2, [pc, #92]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0c9b      	lsrs	r3, r3, #18
 8001ddc:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dde:	e000      	b.n	8001de2 <HAL_PWREx_ControlVoltageScaling+0x3a>
      {
        wait_loop_index--;
 8001de0:	3b01      	subs	r3, #1
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001de4:	6952      	ldr	r2, [r2, #20]
 8001de6:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001dea:	d001      	beq.n	8001df0 <HAL_PWREx_ControlVoltageScaling+0x48>
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f7      	bne.n	8001de0 <HAL_PWREx_ControlVoltageScaling+0x38>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001df8:	d013      	beq.n	8001e22 <HAL_PWREx_ControlVoltageScaling+0x7a>
      {
        return HAL_TIMEOUT;
 8001dfa:	2003      	movs	r0, #3
 8001dfc:	4770      	bx	lr
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e0a:	d00c      	beq.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e0c:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0x84>)
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e18:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	4770      	bx	lr
 8001e1e:	2000      	movs	r0, #0
 8001e20:	4770      	bx	lr
 8001e22:	2000      	movs	r0, #0
 8001e24:	4770      	bx	lr
 8001e26:	2000      	movs	r0, #0
}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	20000008 	.word	0x20000008
 8001e34:	431bde83 	.word	0x431bde83

08001e38 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e3a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e40:	041b      	lsls	r3, r3, #16
 8001e42:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e44:	0200      	lsls	r0, r0, #8
 8001e46:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4a:	4318      	orrs	r0, r3
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001e4c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001e50:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8001e54:	60d0      	str	r0, [r2, #12]
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e5e:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <HAL_NVIC_SetPriority+0x5c>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e66:	f1c3 0407 	rsb	r4, r3, #7
 8001e6a:	2c04      	cmp	r4, #4
 8001e6c:	bf28      	it	cs
 8001e6e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e70:	1d1d      	adds	r5, r3, #4
 8001e72:	2d06      	cmp	r5, #6
 8001e74:	d901      	bls.n	8001e7a <HAL_NVIC_SetPriority+0x1e>
 8001e76:	1edd      	subs	r5, r3, #3
 8001e78:	e000      	b.n	8001e7c <HAL_NVIC_SetPriority+0x20>
 8001e7a:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	fa03 f404 	lsl.w	r4, r3, r4
 8001e82:	3c01      	subs	r4, #1
 8001e84:	4021      	ands	r1, r4
 8001e86:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	40ab      	lsls	r3, r5
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	401a      	ands	r2, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001e8e:	430a      	orrs	r2, r1
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001e90:	2800      	cmp	r0, #0
 8001e92:	db08      	blt.n	8001ea6 <HAL_NVIC_SetPriority+0x4a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	0112      	lsls	r2, r2, #4
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001e9c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001ea0:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8001ea4:	e005      	b.n	8001eb2 <HAL_NVIC_SetPriority+0x56>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	f000 000f 	and.w	r0, r0, #15
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_NVIC_SetPriority+0x60>)
 8001eb0:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001eb2:	bc30      	pop	{r4, r5}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00
 8001ebc:	e000ed14 	.word	0xe000ed14

08001ec0 <HAL_NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	db08      	blt.n	8001ed6 <HAL_NVIC_EnableIRQ+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec4:	0942      	lsrs	r2, r0, #5
 8001ec6:	f000 001f 	and.w	r0, r0, #31
 8001eca:	2301      	movs	r3, #1
 8001ecc:	fa03 f000 	lsl.w	r0, r3, r0
 8001ed0:	4b01      	ldr	r3, [pc, #4]	; (8001ed8 <HAL_NVIC_EnableIRQ+0x18>)
 8001ed2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    __COMPILER_BARRIER();
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001edc:	2800      	cmp	r0, #0
 8001ede:	f000 80a4 	beq.w	800202a <HAL_CAN_Init+0x14e>
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ee2:	b538      	push	{r3, r4, r5, lr}
 8001ee4:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ee6:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001eea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001eee:	d101      	bne.n	8001ef4 <HAL_CAN_Init+0x18>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ef0:	f7fe fddc 	bl	8000aac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ef4:	6822      	ldr	r2, [r4, #0]
 8001ef6:	6813      	ldr	r3, [r2, #0]
 8001ef8:	f023 0302 	bic.w	r3, r3, #2
 8001efc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001efe:	f7fe fed7 	bl	8000cb0 <HAL_GetTick>
 8001f02:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f04:	e00d      	b.n	8001f22 <HAL_CAN_Init+0x46>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f06:	f7fe fed3 	bl	8000cb0 <HAL_GetTick>
 8001f0a:	1b40      	subs	r0, r0, r5
 8001f0c:	280a      	cmp	r0, #10
 8001f0e:	d908      	bls.n	8001f22 <HAL_CAN_Init+0x46>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f16:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f18:	2305      	movs	r3, #5
 8001f1a:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001f1e:	2001      	movs	r0, #1
 8001f20:	bd38      	pop	{r3, r4, r5, pc}

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	f012 0f02 	tst.w	r2, #2
 8001f2a:	d1ec      	bne.n	8001f06 <HAL_CAN_Init+0x2a>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f34:	f7fe febc 	bl	8000cb0 <HAL_GetTick>
 8001f38:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f3a:	e00d      	b.n	8001f58 <HAL_CAN_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f3c:	f7fe feb8 	bl	8000cb0 <HAL_GetTick>
 8001f40:	1b40      	subs	r0, r0, r5
 8001f42:	280a      	cmp	r0, #10
 8001f44:	d908      	bls.n	8001f58 <HAL_CAN_Init+0x7c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4c:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f4e:	2305      	movs	r3, #5
 8001f50:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001f54:	2001      	movs	r0, #1
 8001f56:	bd38      	pop	{r3, r4, r5, pc}

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	f012 0f01 	tst.w	r2, #1
 8001f60:	d0ec      	beq.n	8001f3c <HAL_CAN_Init+0x60>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f62:	7e22      	ldrb	r2, [r4, #24]
 8001f64:	2a01      	cmp	r2, #1
 8001f66:	d104      	bne.n	8001f72 <HAL_CAN_Init+0x96>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e003      	b.n	8001f7a <HAL_CAN_Init+0x9e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f7a:	7e63      	ldrb	r3, [r4, #25]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d105      	bne.n	8001f8c <HAL_CAN_Init+0xb0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f80:	6822      	ldr	r2, [r4, #0]
 8001f82:	6813      	ldr	r3, [r2, #0]
 8001f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e004      	b.n	8001f96 <HAL_CAN_Init+0xba>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f8c:	6822      	ldr	r2, [r4, #0]
 8001f8e:	6813      	ldr	r3, [r2, #0]
 8001f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f94:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f96:	7ea3      	ldrb	r3, [r4, #26]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d105      	bne.n	8001fa8 <HAL_CAN_Init+0xcc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f9c:	6822      	ldr	r2, [r4, #0]
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	f043 0320 	orr.w	r3, r3, #32
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e004      	b.n	8001fb2 <HAL_CAN_Init+0xd6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fa8:	6822      	ldr	r2, [r4, #0]
 8001faa:	6813      	ldr	r3, [r2, #0]
 8001fac:	f023 0320 	bic.w	r3, r3, #32
 8001fb0:	6013      	str	r3, [r2, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fb2:	7ee3      	ldrb	r3, [r4, #27]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d105      	bne.n	8001fc4 <HAL_CAN_Init+0xe8>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fb8:	6822      	ldr	r2, [r4, #0]
 8001fba:	6813      	ldr	r3, [r2, #0]
 8001fbc:	f023 0310 	bic.w	r3, r3, #16
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e004      	b.n	8001fce <HAL_CAN_Init+0xf2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fc4:	6822      	ldr	r2, [r4, #0]
 8001fc6:	6813      	ldr	r3, [r2, #0]
 8001fc8:	f043 0310 	orr.w	r3, r3, #16
 8001fcc:	6013      	str	r3, [r2, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fce:	7f23      	ldrb	r3, [r4, #28]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <HAL_CAN_Init+0x104>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fd4:	6822      	ldr	r2, [r4, #0]
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e004      	b.n	8001fea <HAL_CAN_Init+0x10e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fe0:	6822      	ldr	r2, [r4, #0]
 8001fe2:	6813      	ldr	r3, [r2, #0]
 8001fe4:	f023 0308 	bic.w	r3, r3, #8
 8001fe8:	6013      	str	r3, [r2, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fea:	7f63      	ldrb	r3, [r4, #29]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d105      	bne.n	8001ffc <HAL_CAN_Init+0x120>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ff0:	6822      	ldr	r2, [r4, #0]
 8001ff2:	6813      	ldr	r3, [r2, #0]
 8001ff4:	f043 0304 	orr.w	r3, r3, #4
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e004      	b.n	8002006 <HAL_CAN_Init+0x12a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ffc:	6822      	ldr	r2, [r4, #0]
 8001ffe:	6813      	ldr	r3, [r2, #0]
 8002000:	f023 0304 	bic.w	r3, r3, #4
 8002004:	6013      	str	r3, [r2, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002006:	6821      	ldr	r1, [r4, #0]
 8002008:	68a2      	ldr	r2, [r4, #8]
 800200a:	68e3      	ldr	r3, [r4, #12]
 800200c:	431a      	orrs	r2, r3
 800200e:	6923      	ldr	r3, [r4, #16]
 8002010:	431a      	orrs	r2, r3
 8002012:	6963      	ldr	r3, [r4, #20]
 8002014:	431a      	orrs	r2, r3
 8002016:	6863      	ldr	r3, [r4, #4]
 8002018:	3b01      	subs	r3, #1
 800201a:	4313      	orrs	r3, r2
 800201c:	61cb      	str	r3, [r1, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800201e:	2000      	movs	r0, #0
 8002020:	6260      	str	r0, [r4, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002022:	2301      	movs	r3, #1
 8002024:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8002028:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
  {
    return HAL_ERROR;
 800202a:	2001      	movs	r0, #1
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop

08002030 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop

08002038 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop

0800203c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop

08002040 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop

08002044 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop

08002048 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop

0800204c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop

08002050 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop

08002054 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop

08002058 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop

0800205c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop

08002060 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002068:	4605      	mov	r5, r0
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800206a:	6803      	ldr	r3, [r0, #0]
 800206c:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800206e:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002070:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002072:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002076:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800207a:	f8d3 a018 	ldr.w	sl, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800207e:	f014 0f01 	tst.w	r4, #1
 8002082:	d05a      	beq.n	800213a <HAL_CAN_IRQHandler+0xd6>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002084:	f016 0f01 	tst.w	r6, #1
 8002088:	d014      	beq.n	80020b4 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800208a:	2201      	movs	r2, #1
 800208c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800208e:	f016 0f02 	tst.w	r6, #2
 8002092:	d004      	beq.n	800209e <HAL_CAN_IRQHandler+0x3a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002094:	f7ff ffcc 	bl	8002030 <HAL_CAN_TxMailbox0CompleteCallback>
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002098:	f04f 0b00 	mov.w	fp, #0
 800209c:	e012      	b.n	80020c4 <HAL_CAN_IRQHandler+0x60>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800209e:	f016 0f04 	tst.w	r6, #4
 80020a2:	d10a      	bne.n	80020ba <HAL_CAN_IRQHandler+0x56>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80020a4:	f016 0f08 	tst.w	r6, #8
 80020a8:	d10a      	bne.n	80020c0 <HAL_CAN_IRQHandler+0x5c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020aa:	f7ff ffc7 	bl	800203c <HAL_CAN_TxMailbox0AbortCallback>
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020ae:	f04f 0b00 	mov.w	fp, #0
 80020b2:	e007      	b.n	80020c4 <HAL_CAN_IRQHandler+0x60>
 80020b4:	f04f 0b00 	mov.w	fp, #0
 80020b8:	e004      	b.n	80020c4 <HAL_CAN_IRQHandler+0x60>
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80020ba:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 80020be:	e001      	b.n	80020c4 <HAL_CAN_IRQHandler+0x60>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80020c0:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020c4:	f416 7f80 	tst.w	r6, #256	; 0x100
 80020c8:	d019      	beq.n	80020fe <HAL_CAN_IRQHandler+0x9a>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020ca:	682b      	ldr	r3, [r5, #0]
 80020cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020d2:	f416 7f00 	tst.w	r6, #512	; 0x200
 80020d6:	d003      	beq.n	80020e0 <HAL_CAN_IRQHandler+0x7c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020d8:	4628      	mov	r0, r5
 80020da:	f7ff ffab 	bl	8002034 <HAL_CAN_TxMailbox1CompleteCallback>
 80020de:	e00e      	b.n	80020fe <HAL_CAN_IRQHandler+0x9a>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020e0:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80020e4:	d002      	beq.n	80020ec <HAL_CAN_IRQHandler+0x88>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020e6:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
 80020ea:	e008      	b.n	80020fe <HAL_CAN_IRQHandler+0x9a>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020ec:	f416 6f00 	tst.w	r6, #2048	; 0x800
 80020f0:	d002      	beq.n	80020f8 <HAL_CAN_IRQHandler+0x94>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020f2:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 80020f6:	e002      	b.n	80020fe <HAL_CAN_IRQHandler+0x9a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020f8:	4628      	mov	r0, r5
 80020fa:	f7ff ffa1 	bl	8002040 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020fe:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002102:	d01c      	beq.n	800213e <HAL_CAN_IRQHandler+0xda>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002104:	682b      	ldr	r3, [r5, #0]
 8002106:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800210a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800210c:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8002110:	d003      	beq.n	800211a <HAL_CAN_IRQHandler+0xb6>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002112:	4628      	mov	r0, r5
 8002114:	f7ff ff90 	bl	8002038 <HAL_CAN_TxMailbox2CompleteCallback>
 8002118:	e011      	b.n	800213e <HAL_CAN_IRQHandler+0xda>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800211a:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 800211e:	d002      	beq.n	8002126 <HAL_CAN_IRQHandler+0xc2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002120:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 8002124:	e00b      	b.n	800213e <HAL_CAN_IRQHandler+0xda>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002126:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 800212a:	d002      	beq.n	8002132 <HAL_CAN_IRQHandler+0xce>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800212c:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 8002130:	e005      	b.n	800213e <HAL_CAN_IRQHandler+0xda>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002132:	4628      	mov	r0, r5
 8002134:	f7ff ff86 	bl	8002044 <HAL_CAN_TxMailbox2AbortCallback>
 8002138:	e001      	b.n	800213e <HAL_CAN_IRQHandler+0xda>
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800213a:	f04f 0b00 	mov.w	fp, #0
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800213e:	f014 0f08 	tst.w	r4, #8
 8002142:	d007      	beq.n	8002154 <HAL_CAN_IRQHandler+0xf0>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002144:	f019 0f10 	tst.w	r9, #16
 8002148:	d004      	beq.n	8002154 <HAL_CAN_IRQHandler+0xf0>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800214a:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800214e:	682b      	ldr	r3, [r5, #0]
 8002150:	2210      	movs	r2, #16
 8002152:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002154:	f014 0f04 	tst.w	r4, #4
 8002158:	d008      	beq.n	800216c <HAL_CAN_IRQHandler+0x108>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800215a:	f019 0f08 	tst.w	r9, #8
 800215e:	d005      	beq.n	800216c <HAL_CAN_IRQHandler+0x108>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002160:	682b      	ldr	r3, [r5, #0]
 8002162:	2208      	movs	r2, #8
 8002164:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002166:	4628      	mov	r0, r5
 8002168:	f7ff ff70 	bl	800204c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800216c:	f014 0f02 	tst.w	r4, #2
 8002170:	d007      	beq.n	8002182 <HAL_CAN_IRQHandler+0x11e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002172:	682b      	ldr	r3, [r5, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f013 0f03 	tst.w	r3, #3
 800217a:	d002      	beq.n	8002182 <HAL_CAN_IRQHandler+0x11e>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800217c:	4628      	mov	r0, r5
 800217e:	f7ff ff63 	bl	8002048 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002182:	f014 0f40 	tst.w	r4, #64	; 0x40
 8002186:	d007      	beq.n	8002198 <HAL_CAN_IRQHandler+0x134>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002188:	f018 0f10 	tst.w	r8, #16
 800218c:	d004      	beq.n	8002198 <HAL_CAN_IRQHandler+0x134>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800218e:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002192:	682b      	ldr	r3, [r5, #0]
 8002194:	2210      	movs	r2, #16
 8002196:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002198:	f014 0f20 	tst.w	r4, #32
 800219c:	d008      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x14c>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800219e:	f018 0f08 	tst.w	r8, #8
 80021a2:	d005      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x14c>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021a4:	682b      	ldr	r3, [r5, #0]
 80021a6:	2208      	movs	r2, #8
 80021a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021aa:	4628      	mov	r0, r5
 80021ac:	f7ff ff52 	bl	8002054 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021b0:	f014 0f10 	tst.w	r4, #16
 80021b4:	d007      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x162>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021b6:	682b      	ldr	r3, [r5, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f013 0f03 	tst.w	r3, #3
 80021be:	d002      	beq.n	80021c6 <HAL_CAN_IRQHandler+0x162>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021c0:	4628      	mov	r0, r5
 80021c2:	f7ff ff45 	bl	8002050 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80021c6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80021ca:	d008      	beq.n	80021de <HAL_CAN_IRQHandler+0x17a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80021cc:	f017 0f10 	tst.w	r7, #16
 80021d0:	d005      	beq.n	80021de <HAL_CAN_IRQHandler+0x17a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021d2:	682b      	ldr	r3, [r5, #0]
 80021d4:	2210      	movs	r2, #16
 80021d6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021d8:	4628      	mov	r0, r5
 80021da:	f7ff ff3d 	bl	8002058 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021de:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80021e2:	d008      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x192>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021e4:	f017 0f08 	tst.w	r7, #8
 80021e8:	d005      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021ea:	682b      	ldr	r3, [r5, #0]
 80021ec:	2208      	movs	r2, #8
 80021ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021f0:	4628      	mov	r0, r5
 80021f2:	f7ff ff33 	bl	800205c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021f6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80021fa:	d04e      	beq.n	800229a <HAL_CAN_IRQHandler+0x236>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021fc:	f017 0f04 	tst.w	r7, #4
 8002200:	d048      	beq.n	8002294 <HAL_CAN_IRQHandler+0x230>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002202:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002206:	d004      	beq.n	8002212 <HAL_CAN_IRQHandler+0x1ae>
 8002208:	f01a 0f01 	tst.w	sl, #1
 800220c:	d001      	beq.n	8002212 <HAL_CAN_IRQHandler+0x1ae>
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800220e:	f04b 0b01 	orr.w	fp, fp, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002212:	f414 7f00 	tst.w	r4, #512	; 0x200
 8002216:	d004      	beq.n	8002222 <HAL_CAN_IRQHandler+0x1be>
 8002218:	f01a 0f02 	tst.w	sl, #2
 800221c:	d001      	beq.n	8002222 <HAL_CAN_IRQHandler+0x1be>
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800221e:	f04b 0b02 	orr.w	fp, fp, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002222:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8002226:	d004      	beq.n	8002232 <HAL_CAN_IRQHandler+0x1ce>
 8002228:	f01a 0f04 	tst.w	sl, #4
 800222c:	d001      	beq.n	8002232 <HAL_CAN_IRQHandler+0x1ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800222e:	f04b 0b04 	orr.w	fp, fp, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002232:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8002236:	d02d      	beq.n	8002294 <HAL_CAN_IRQHandler+0x230>
 8002238:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 800223c:	d02a      	beq.n	8002294 <HAL_CAN_IRQHandler+0x230>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 800223e:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8002242:	d017      	beq.n	8002274 <HAL_CAN_IRQHandler+0x210>
 8002244:	d806      	bhi.n	8002254 <HAL_CAN_IRQHandler+0x1f0>
 8002246:	f1ba 0f10 	cmp.w	sl, #16
 800224a:	d00d      	beq.n	8002268 <HAL_CAN_IRQHandler+0x204>
 800224c:	f1ba 0f20 	cmp.w	sl, #32
 8002250:	d00d      	beq.n	800226e <HAL_CAN_IRQHandler+0x20a>
 8002252:	e01a      	b.n	800228a <HAL_CAN_IRQHandler+0x226>
 8002254:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8002258:	d012      	beq.n	8002280 <HAL_CAN_IRQHandler+0x21c>
 800225a:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 800225e:	d012      	beq.n	8002286 <HAL_CAN_IRQHandler+0x222>
 8002260:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8002264:	d111      	bne.n	800228a <HAL_CAN_IRQHandler+0x226>
 8002266:	e008      	b.n	800227a <HAL_CAN_IRQHandler+0x216>
        {
          case (CAN_ESR_LEC_0):
            /* Set CAN error code to Stuff error */
            errorcode |= HAL_CAN_ERROR_STF;
 8002268:	f04b 0b08 	orr.w	fp, fp, #8
            break;
 800226c:	e00d      	b.n	800228a <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_1):
            /* Set CAN error code to Form error */
            errorcode |= HAL_CAN_ERROR_FOR;
 800226e:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 8002272:	e00a      	b.n	800228a <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
            /* Set CAN error code to Acknowledgement error */
            errorcode |= HAL_CAN_ERROR_ACK;
 8002274:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 8002278:	e007      	b.n	800228a <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_2):
            /* Set CAN error code to Bit recessive error */
            errorcode |= HAL_CAN_ERROR_BR;
 800227a:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 800227e:	e004      	b.n	800228a <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
            /* Set CAN error code to Bit Dominant error */
            errorcode |= HAL_CAN_ERROR_BD;
 8002280:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 8002284:	e001      	b.n	800228a <HAL_CAN_IRQHandler+0x226>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
 8002286:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800228a:	682a      	ldr	r2, [r5, #0]
 800228c:	6993      	ldr	r3, [r2, #24]
 800228e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002292:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002294:	682b      	ldr	r3, [r5, #0]
 8002296:	2204      	movs	r2, #4
 8002298:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800229a:	f1bb 0f00 	cmp.w	fp, #0
 800229e:	d006      	beq.n	80022ae <HAL_CAN_IRQHandler+0x24a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80022a2:	ea4b 0303 	orr.w	r3, fp, r3
 80022a6:	626b      	str	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022a8:	4628      	mov	r0, r5
 80022aa:	f7ff fed9 	bl	8002060 <HAL_CAN_ErrorCallback>
 80022ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022b2:	bf00      	nop

080022b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022b4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b6:	6a03      	ldr	r3, [r0, #32]
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022be:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022c2:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c8:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022cc:	680c      	ldr	r4, [r1, #0]
 80022ce:	4323      	orrs	r3, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022d0:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022d4:	688c      	ldr	r4, [r1, #8]
 80022d6:	4322      	orrs	r2, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022d8:	4c14      	ldr	r4, [pc, #80]	; (800232c <TIM_OC1_SetConfig+0x78>)
 80022da:	42a0      	cmp	r0, r4
 80022dc:	d007      	beq.n	80022ee <TIM_OC1_SetConfig+0x3a>
 80022de:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 80022e2:	42a0      	cmp	r0, r4
 80022e4:	d003      	beq.n	80022ee <TIM_OC1_SetConfig+0x3a>
 80022e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80022ea:	42a0      	cmp	r0, r4
 80022ec:	d105      	bne.n	80022fa <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022ee:	f022 0208 	bic.w	r2, r2, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022f2:	68cc      	ldr	r4, [r1, #12]
 80022f4:	4322      	orrs	r2, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022f6:	f022 0204 	bic.w	r2, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022fa:	4c0c      	ldr	r4, [pc, #48]	; (800232c <TIM_OC1_SetConfig+0x78>)
 80022fc:	42a0      	cmp	r0, r4
 80022fe:	d007      	beq.n	8002310 <TIM_OC1_SetConfig+0x5c>
 8002300:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8002304:	42a0      	cmp	r0, r4
 8002306:	d003      	beq.n	8002310 <TIM_OC1_SetConfig+0x5c>
 8002308:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800230c:	42a0      	cmp	r0, r4
 800230e:	d105      	bne.n	800231c <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002310:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002314:	694c      	ldr	r4, [r1, #20]
 8002316:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002318:	698d      	ldr	r5, [r1, #24]
 800231a:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800231c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800231e:	6183      	str	r3, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002320:	684b      	ldr	r3, [r1, #4]
 8002322:	6343      	str	r3, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002324:	6202      	str	r2, [r0, #32]
}
 8002326:	bc30      	pop	{r4, r5}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40012c00 	.word	0x40012c00

08002330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002330:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002332:	6a03      	ldr	r3, [r0, #32]
 8002334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002338:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800233a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800233c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800233e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002340:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002344:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002348:	680d      	ldr	r5, [r1, #0]
 800234a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800234c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002350:	688d      	ldr	r5, [r1, #8]
 8002352:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002356:	4d12      	ldr	r5, [pc, #72]	; (80023a0 <TIM_OC3_SetConfig+0x70>)
 8002358:	42a8      	cmp	r0, r5
 800235a:	d106      	bne.n	800236a <TIM_OC3_SetConfig+0x3a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800235c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002360:	68cd      	ldr	r5, [r1, #12]
 8002362:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800236a:	4d0d      	ldr	r5, [pc, #52]	; (80023a0 <TIM_OC3_SetConfig+0x70>)
 800236c:	42a8      	cmp	r0, r5
 800236e:	d007      	beq.n	8002380 <TIM_OC3_SetConfig+0x50>
 8002370:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002374:	42a8      	cmp	r0, r5
 8002376:	d003      	beq.n	8002380 <TIM_OC3_SetConfig+0x50>
 8002378:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800237c:	42a8      	cmp	r0, r5
 800237e:	d107      	bne.n	8002390 <TIM_OC3_SetConfig+0x60>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002380:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002384:	694d      	ldr	r5, [r1, #20]
 8002386:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800238a:	698d      	ldr	r5, [r1, #24]
 800238c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002390:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002392:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002394:	684a      	ldr	r2, [r1, #4]
 8002396:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002398:	6203      	str	r3, [r0, #32]
}
 800239a:	bc30      	pop	{r4, r5}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40012c00 	.word	0x40012c00

080023a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023a4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023a6:	6a03      	ldr	r3, [r0, #32]
 80023a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ae:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023b2:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b8:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023bc:	680d      	ldr	r5, [r1, #0]
 80023be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023c6:	688d      	ldr	r5, [r1, #8]
 80023c8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023cc:	4d0b      	ldr	r5, [pc, #44]	; (80023fc <TIM_OC4_SetConfig+0x58>)
 80023ce:	42a8      	cmp	r0, r5
 80023d0:	d007      	beq.n	80023e2 <TIM_OC4_SetConfig+0x3e>
 80023d2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80023d6:	42a8      	cmp	r0, r5
 80023d8:	d003      	beq.n	80023e2 <TIM_OC4_SetConfig+0x3e>
 80023da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023de:	42a8      	cmp	r0, r5
 80023e0:	d104      	bne.n	80023ec <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023e2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023e6:	694d      	ldr	r5, [r1, #20]
 80023e8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023ee:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023f0:	684b      	ldr	r3, [r1, #4]
 80023f2:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f4:	6202      	str	r2, [r0, #32]
}
 80023f6:	bc30      	pop	{r4, r5}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40012c00 	.word	0x40012c00

08002400 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002400:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002402:	6a03      	ldr	r3, [r0, #32]
 8002404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002408:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800240a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800240c:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800240e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002410:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002414:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002418:	680c      	ldr	r4, [r1, #0]
 800241a:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800241c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002420:	688c      	ldr	r4, [r1, #8]
 8002422:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002426:	4c0b      	ldr	r4, [pc, #44]	; (8002454 <TIM_OC5_SetConfig+0x54>)
 8002428:	42a0      	cmp	r0, r4
 800242a:	d007      	beq.n	800243c <TIM_OC5_SetConfig+0x3c>
 800242c:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
 8002430:	42a0      	cmp	r0, r4
 8002432:	d003      	beq.n	800243c <TIM_OC5_SetConfig+0x3c>
 8002434:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002438:	42a0      	cmp	r0, r4
 800243a:	d104      	bne.n	8002446 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800243c:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002440:	694c      	ldr	r4, [r1, #20]
 8002442:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002446:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002448:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800244a:	684a      	ldr	r2, [r1, #4]
 800244c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800244e:	6203      	str	r3, [r0, #32]
}
 8002450:	bc30      	pop	{r4, r5}
 8002452:	4770      	bx	lr
 8002454:	40012c00 	.word	0x40012c00

08002458 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002458:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800245a:	6a03      	ldr	r3, [r0, #32]
 800245c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002460:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002462:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002464:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002466:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800246c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002470:	680d      	ldr	r5, [r1, #0]
 8002472:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002476:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800247a:	688d      	ldr	r5, [r1, #8]
 800247c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002480:	4d0b      	ldr	r5, [pc, #44]	; (80024b0 <TIM_OC6_SetConfig+0x58>)
 8002482:	42a8      	cmp	r0, r5
 8002484:	d007      	beq.n	8002496 <TIM_OC6_SetConfig+0x3e>
 8002486:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800248a:	42a8      	cmp	r0, r5
 800248c:	d003      	beq.n	8002496 <TIM_OC6_SetConfig+0x3e>
 800248e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002492:	42a8      	cmp	r0, r5
 8002494:	d104      	bne.n	80024a0 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002496:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800249a:	694d      	ldr	r5, [r1, #20]
 800249c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024a2:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80024a4:	684b      	ldr	r3, [r1, #4]
 80024a6:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a8:	6202      	str	r2, [r0, #32]
}
 80024aa:	bc30      	pop	{r4, r5}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40012c00 	.word	0x40012c00

080024b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024b4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024b6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024b8:	6a04      	ldr	r4, [r0, #32]
 80024ba:	f024 0401 	bic.w	r4, r4, #1
 80024be:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024c0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024c2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024c6:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ca:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80024ce:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024d0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80024d2:	6201      	str	r1, [r0, #32]
}
 80024d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop

080024dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024dc:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024de:	6a03      	ldr	r3, [r0, #32]
 80024e0:	f023 0310 	bic.w	r3, r3, #16
 80024e4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80024e8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024ea:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024ee:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80024f6:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024fa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80024fc:	6201      	str	r1, [r0, #32]
}
 80024fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002502:	4770      	bx	lr

08002504 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002504:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800250a:	4319      	orrs	r1, r3
 800250c:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002510:	6081      	str	r1, [r0, #8]
 8002512:	4770      	bx	lr

08002514 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002514:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d126      	bne.n	800256c <HAL_TIM_Base_Start_IT+0x58>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251e:	2302      	movs	r3, #2
 8002520:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002524:	6802      	ldr	r2, [r0, #0]
 8002526:	68d3      	ldr	r3, [r2, #12]
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800252e:	6803      	ldr	r3, [r0, #0]
 8002530:	4a11      	ldr	r2, [pc, #68]	; (8002578 <HAL_TIM_Base_Start_IT+0x64>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d006      	beq.n	8002544 <HAL_TIM_Base_Start_IT+0x30>
 8002536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253a:	d003      	beq.n	8002544 <HAL_TIM_Base_Start_IT+0x30>
 800253c:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002540:	4293      	cmp	r3, r2
 8002542:	d10d      	bne.n	8002560 <HAL_TIM_Base_Start_IT+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002544:	6899      	ldr	r1, [r3, #8]
 8002546:	4a0d      	ldr	r2, [pc, #52]	; (800257c <HAL_TIM_Base_Start_IT+0x68>)
 8002548:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254a:	2a06      	cmp	r2, #6
 800254c:	d010      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x5c>
 800254e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002552:	d00f      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x60>
    {
      __HAL_TIM_ENABLE(htim);
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800255c:	2000      	movs	r0, #0
 800255e:	4770      	bx	lr
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002568:	2000      	movs	r0, #0
 800256a:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
  {
    return HAL_ERROR;
 800256c:	2001      	movs	r0, #1
 800256e:	4770      	bx	lr
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8002570:	2000      	movs	r0, #0
 8002572:	4770      	bx	lr
 8002574:	2000      	movs	r0, #0
}
 8002576:	4770      	bx	lr
 8002578:	40012c00 	.word	0x40012c00
 800257c:	00010007 	.word	0x00010007

08002580 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop

08002584 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop

08002588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop

0800258c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop

08002590 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop

08002594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002594:	b510      	push	{r4, lr}
 8002596:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002598:	6803      	ldr	r3, [r0, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	f012 0f02 	tst.w	r2, #2
 80025a0:	d017      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x3e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	f012 0f02 	tst.w	r2, #2
 80025a8:	d013      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x3e>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025aa:	f06f 0202 	mvn.w	r2, #2
 80025ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b0:	2301      	movs	r3, #1
 80025b2:	7703      	strb	r3, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025b4:	6803      	ldr	r3, [r0, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f013 0f03 	tst.w	r3, #3
 80025bc:	d002      	beq.n	80025c4 <HAL_TIM_IRQHandler+0x30>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025be:	f7ff ffe3 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 80025c2:	e004      	b.n	80025ce <HAL_TIM_IRQHandler+0x3a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c4:	f7ff ffde 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	4620      	mov	r0, r4
 80025ca:	f7ff ffdf 	bl	800258c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	2300      	movs	r3, #0
 80025d0:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	f012 0f04 	tst.w	r2, #4
 80025da:	d019      	beq.n	8002610 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	f012 0f04 	tst.w	r2, #4
 80025e2:	d015      	beq.n	8002610 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025e4:	f06f 0204 	mvn.w	r2, #4
 80025e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ea:	2302      	movs	r3, #2
 80025ec:	7723      	strb	r3, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80025f6:	d003      	beq.n	8002600 <HAL_TIM_IRQHandler+0x6c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f8:	4620      	mov	r0, r4
 80025fa:	f7ff ffc5 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 80025fe:	e005      	b.n	800260c <HAL_TIM_IRQHandler+0x78>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002600:	4620      	mov	r0, r4
 8002602:	f7ff ffbf 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002606:	4620      	mov	r0, r4
 8002608:	f7ff ffc0 	bl	800258c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260c:	2300      	movs	r3, #0
 800260e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	f012 0f08 	tst.w	r2, #8
 8002618:	d019      	beq.n	800264e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	f012 0f08 	tst.w	r2, #8
 8002620:	d015      	beq.n	800264e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002622:	f06f 0208 	mvn.w	r2, #8
 8002626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002628:	2304      	movs	r3, #4
 800262a:	7723      	strb	r3, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f013 0f03 	tst.w	r3, #3
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	4620      	mov	r0, r4
 8002638:	f7ff ffa6 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0xb6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	4620      	mov	r0, r4
 8002640:	f7ff ffa0 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	4620      	mov	r0, r4
 8002646:	f7ff ffa1 	bl	800258c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	2300      	movs	r3, #0
 800264c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	f012 0f10 	tst.w	r2, #16
 8002656:	d019      	beq.n	800268c <HAL_TIM_IRQHandler+0xf8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	f012 0f10 	tst.w	r2, #16
 800265e:	d015      	beq.n	800268c <HAL_TIM_IRQHandler+0xf8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002660:	f06f 0210 	mvn.w	r2, #16
 8002664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002666:	2308      	movs	r3, #8
 8002668:	7723      	strb	r3, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002672:	d003      	beq.n	800267c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002674:	4620      	mov	r0, r4
 8002676:	f7ff ff87 	bl	8002588 <HAL_TIM_IC_CaptureCallback>
 800267a:	e005      	b.n	8002688 <HAL_TIM_IRQHandler+0xf4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267c:	4620      	mov	r0, r4
 800267e:	f7ff ff81 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002682:	4620      	mov	r0, r4
 8002684:	f7ff ff82 	bl	800258c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002688:	2300      	movs	r3, #0
 800268a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	f012 0f01 	tst.w	r2, #1
 8002694:	d009      	beq.n	80026aa <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	f012 0f01 	tst.w	r2, #1
 800269c:	d005      	beq.n	80026aa <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800269e:	f06f 0201 	mvn.w	r2, #1
 80026a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7fd ffb9 	bl	800061c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	f012 0f80 	tst.w	r2, #128	; 0x80
 80026b2:	d009      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x134>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80026ba:	d005      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x134>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026c2:	4620      	mov	r0, r4
 80026c4:	f000 fa38 	bl	8002b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80026d0:	d009      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x152>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80026d8:	d005      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x152>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80026de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026e0:	4620      	mov	r0, r4
 80026e2:	f000 fa2b 	bl	8002b3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	f012 0f40 	tst.w	r2, #64	; 0x40
 80026ee:	d009      	beq.n	8002704 <HAL_TIM_IRQHandler+0x170>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80026f6:	d005      	beq.n	8002704 <HAL_TIM_IRQHandler+0x170>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026fe:	4620      	mov	r0, r4
 8002700:	f7ff ff46 	bl	8002590 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	f012 0f20 	tst.w	r2, #32
 800270c:	d009      	beq.n	8002722 <HAL_TIM_IRQHandler+0x18e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	f012 0f20 	tst.w	r2, #32
 8002714:	d005      	beq.n	8002722 <HAL_TIM_IRQHandler+0x18e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002716:	f06f 0220 	mvn.w	r2, #32
 800271a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800271c:	4620      	mov	r0, r4
 800271e:	f000 fa09 	bl	8002b34 <HAL_TIMEx_CommutCallback>
 8002722:	bd10      	pop	{r4, pc}

08002724 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002724:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002726:	4a1a      	ldr	r2, [pc, #104]	; (8002790 <TIM_Base_SetConfig+0x6c>)
 8002728:	4290      	cmp	r0, r2
 800272a:	d002      	beq.n	8002732 <TIM_Base_SetConfig+0xe>
 800272c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002730:	d103      	bne.n	800273a <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002736:	684a      	ldr	r2, [r1, #4]
 8002738:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800273a:	4a15      	ldr	r2, [pc, #84]	; (8002790 <TIM_Base_SetConfig+0x6c>)
 800273c:	4290      	cmp	r0, r2
 800273e:	d00a      	beq.n	8002756 <TIM_Base_SetConfig+0x32>
 8002740:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002744:	d007      	beq.n	8002756 <TIM_Base_SetConfig+0x32>
 8002746:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800274a:	4290      	cmp	r0, r2
 800274c:	d003      	beq.n	8002756 <TIM_Base_SetConfig+0x32>
 800274e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002752:	4290      	cmp	r0, r2
 8002754:	d103      	bne.n	800275e <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800275a:	68ca      	ldr	r2, [r1, #12]
 800275c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800275e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002762:	694a      	ldr	r2, [r1, #20]
 8002764:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002766:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002768:	688b      	ldr	r3, [r1, #8]
 800276a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800276c:	680b      	ldr	r3, [r1, #0]
 800276e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <TIM_Base_SetConfig+0x6c>)
 8002772:	4298      	cmp	r0, r3
 8002774:	d007      	beq.n	8002786 <TIM_Base_SetConfig+0x62>
 8002776:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800277a:	4298      	cmp	r0, r3
 800277c:	d003      	beq.n	8002786 <TIM_Base_SetConfig+0x62>
 800277e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002782:	4298      	cmp	r0, r3
 8002784:	d101      	bne.n	800278a <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002786:	690b      	ldr	r3, [r1, #16]
 8002788:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800278a:	2301      	movs	r3, #1
 800278c:	6143      	str	r3, [r0, #20]
 800278e:	4770      	bx	lr
 8002790:	40012c00 	.word	0x40012c00

08002794 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002794:	b368      	cbz	r0, 80027f2 <HAL_TIM_Base_Init+0x5e>
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002796:	b510      	push	{r4, lr}
 8002798:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800279a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800279e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80027a2:	d104      	bne.n	80027ae <HAL_TIM_Base_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027aa:	f7fe f9cb 	bl	8000b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b4:	1d21      	adds	r1, r4, #4
 80027b6:	6820      	ldr	r0, [r4, #0]
 80027b8:	f7ff ffb4 	bl	8002724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027bc:	2301      	movs	r3, #1
 80027be:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80027c6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80027ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80027ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80027d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80027de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027e2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80027e6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 80027ee:	2000      	movs	r0, #0
 80027f0:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 80027f2:	2001      	movs	r0, #1
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop

080027f8 <HAL_TIM_OC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f8:	b368      	cbz	r0, 8002856 <HAL_TIM_OC_Init+0x5e>
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80027fa:	b510      	push	{r4, lr}
 80027fc:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002802:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002806:	d104      	bne.n	8002812 <HAL_TIM_OC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002808:	2300      	movs	r3, #0
 800280a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800280e:	f7ff feb7 	bl	8002580 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002812:	2302      	movs	r3, #2
 8002814:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002818:	1d21      	adds	r1, r4, #4
 800281a:	6820      	ldr	r0, [r4, #0]
 800281c:	f7ff ff82 	bl	8002724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002820:	2301      	movs	r3, #1
 8002822:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002826:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800282a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800282e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002832:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002836:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800283a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002842:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002846:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800284a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800284e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8002852:	2000      	movs	r0, #0
 8002854:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 8002856:	2001      	movs	r0, #1
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop

0800285c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800285c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800285e:	6a03      	ldr	r3, [r0, #32]
 8002860:	f023 0310 	bic.w	r3, r3, #16
 8002864:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002866:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002868:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800286a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800286c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002870:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002874:	680d      	ldr	r5, [r1, #0]
 8002876:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800287a:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800287e:	688d      	ldr	r5, [r1, #8]
 8002880:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002884:	4d11      	ldr	r5, [pc, #68]	; (80028cc <TIM_OC2_SetConfig+0x70>)
 8002886:	42a8      	cmp	r0, r5
 8002888:	d106      	bne.n	8002898 <TIM_OC2_SetConfig+0x3c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800288a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800288e:	68cd      	ldr	r5, [r1, #12]
 8002890:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002894:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002898:	4d0c      	ldr	r5, [pc, #48]	; (80028cc <TIM_OC2_SetConfig+0x70>)
 800289a:	42a8      	cmp	r0, r5
 800289c:	d007      	beq.n	80028ae <TIM_OC2_SetConfig+0x52>
 800289e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80028a2:	42a8      	cmp	r0, r5
 80028a4:	d003      	beq.n	80028ae <TIM_OC2_SetConfig+0x52>
 80028a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028aa:	42a8      	cmp	r0, r5
 80028ac:	d107      	bne.n	80028be <TIM_OC2_SetConfig+0x62>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028ae:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028b2:	694d      	ldr	r5, [r1, #20]
 80028b4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028b8:	698d      	ldr	r5, [r1, #24]
 80028ba:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028be:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028c0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028c2:	684a      	ldr	r2, [r1, #4]
 80028c4:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c6:	6203      	str	r3, [r0, #32]
}
 80028c8:	bc30      	pop	{r4, r5}
 80028ca:	4770      	bx	lr
 80028cc:	40012c00 	.word	0x40012c00

080028d0 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d02e      	beq.n	8002936 <HAL_TIM_OC_ConfigChannel+0x66>
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80028d8:	b510      	push	{r4, lr}
 80028da:	4604      	mov	r4, r0
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028dc:	2301      	movs	r3, #1
 80028de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  switch (Channel)
 80028e2:	2a14      	cmp	r2, #20
 80028e4:	d823      	bhi.n	800292e <HAL_TIM_OC_ConfigChannel+0x5e>
 80028e6:	e8df f002 	tbb	[pc, r2]
 80028ea:	220b      	.short	0x220b
 80028ec:	220f2222 	.word	0x220f2222
 80028f0:	22132222 	.word	0x22132222
 80028f4:	22172222 	.word	0x22172222
 80028f8:	221b2222 	.word	0x221b2222
 80028fc:	2222      	.short	0x2222
 80028fe:	1f          	.byte	0x1f
 80028ff:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002900:	6800      	ldr	r0, [r0, #0]
 8002902:	f7ff fcd7 	bl	80022b4 <TIM_OC1_SetConfig>
      break;
 8002906:	e012      	b.n	800292e <HAL_TIM_OC_ConfigChannel+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002908:	6800      	ldr	r0, [r0, #0]
 800290a:	f7ff ffa7 	bl	800285c <TIM_OC2_SetConfig>
      break;
 800290e:	e00e      	b.n	800292e <HAL_TIM_OC_ConfigChannel+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002910:	6800      	ldr	r0, [r0, #0]
 8002912:	f7ff fd0d 	bl	8002330 <TIM_OC3_SetConfig>
      break;
 8002916:	e00a      	b.n	800292e <HAL_TIM_OC_ConfigChannel+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002918:	6800      	ldr	r0, [r0, #0]
 800291a:	f7ff fd43 	bl	80023a4 <TIM_OC4_SetConfig>
      break;
 800291e:	e006      	b.n	800292e <HAL_TIM_OC_ConfigChannel+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002920:	6800      	ldr	r0, [r0, #0]
 8002922:	f7ff fd6d 	bl	8002400 <TIM_OC5_SetConfig>
      break;
 8002926:	e002      	b.n	800292e <HAL_TIM_OC_ConfigChannel+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002928:	6800      	ldr	r0, [r0, #0]
 800292a:	f7ff fd95 	bl	8002458 <TIM_OC6_SetConfig>

    default:
      break;
  }

  __HAL_UNLOCK(htim);
 800292e:	2000      	movs	r0, #0
 8002930:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8002934:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002936:	2002      	movs	r0, #2
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop

0800293c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800293c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800293e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002940:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002944:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002948:	4319      	orrs	r1, r3
 800294a:	ea44 0301 	orr.w	r3, r4, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800294e:	6083      	str	r3, [r0, #8]
}
 8002950:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop

08002958 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002958:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d068      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0xda>
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002960:	b510      	push	{r4, lr}
 8002962:	4604      	mov	r4, r0
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002964:	2301      	movs	r3, #1
 8002966:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800296a:	2302      	movs	r3, #2
 800296c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002970:	6802      	ldr	r2, [r0, #0]
 8002972:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002974:	4b30      	ldr	r3, [pc, #192]	; (8002a38 <HAL_TIM_ConfigClockSource+0xe0>)
 8002976:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002978:	6093      	str	r3, [r2, #8]

  switch (sClockSourceConfig->ClockSource)
 800297a:	680b      	ldr	r3, [r1, #0]
 800297c:	2b40      	cmp	r3, #64	; 0x40
 800297e:	d043      	beq.n	8002a08 <HAL_TIM_ConfigClockSource+0xb0>
 8002980:	d80a      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x40>
 8002982:	2b10      	cmp	r3, #16
 8002984:	d04a      	beq.n	8002a1c <HAL_TIM_ConfigClockSource+0xc4>
 8002986:	d802      	bhi.n	800298e <HAL_TIM_ConfigClockSource+0x36>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d047      	beq.n	8002a1c <HAL_TIM_ConfigClockSource+0xc4>
 800298c:	e04a      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0xcc>
 800298e:	2b20      	cmp	r3, #32
 8002990:	d044      	beq.n	8002a1c <HAL_TIM_ConfigClockSource+0xc4>
 8002992:	2b30      	cmp	r3, #48	; 0x30
 8002994:	d042      	beq.n	8002a1c <HAL_TIM_ConfigClockSource+0xc4>
 8002996:	e045      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0xcc>
 8002998:	2b60      	cmp	r3, #96	; 0x60
 800299a:	d02b      	beq.n	80029f4 <HAL_TIM_ConfigClockSource+0x9c>
 800299c:	d802      	bhi.n	80029a4 <HAL_TIM_ConfigClockSource+0x4c>
 800299e:	2b50      	cmp	r3, #80	; 0x50
 80029a0:	d01e      	beq.n	80029e0 <HAL_TIM_ConfigClockSource+0x88>
 80029a2:	e03f      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0xcc>
 80029a4:	2b70      	cmp	r3, #112	; 0x70
 80029a6:	d003      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0x58>
 80029a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ac:	d00c      	beq.n	80029c8 <HAL_TIM_ConfigClockSource+0x70>
 80029ae:	e039      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0xcc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b0:	68cb      	ldr	r3, [r1, #12]
 80029b2:	684a      	ldr	r2, [r1, #4]
 80029b4:	6889      	ldr	r1, [r1, #8]
 80029b6:	6820      	ldr	r0, [r4, #0]
 80029b8:	f7ff ffc0 	bl	800293c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029bc:	6822      	ldr	r2, [r4, #0]
 80029be:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029c4:	6093      	str	r3, [r2, #8]
      break;
 80029c6:	e02d      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0xcc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029c8:	68cb      	ldr	r3, [r1, #12]
 80029ca:	684a      	ldr	r2, [r1, #4]
 80029cc:	6889      	ldr	r1, [r1, #8]
 80029ce:	6820      	ldr	r0, [r4, #0]
 80029d0:	f7ff ffb4 	bl	800293c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029d4:	6822      	ldr	r2, [r4, #0]
 80029d6:	6893      	ldr	r3, [r2, #8]
 80029d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029dc:	6093      	str	r3, [r2, #8]
      break;
 80029de:	e021      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0xcc>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e0:	68ca      	ldr	r2, [r1, #12]
 80029e2:	6849      	ldr	r1, [r1, #4]
 80029e4:	6820      	ldr	r0, [r4, #0]
 80029e6:	f7ff fd65 	bl	80024b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029ea:	2150      	movs	r1, #80	; 0x50
 80029ec:	6820      	ldr	r0, [r4, #0]
 80029ee:	f7ff fd89 	bl	8002504 <TIM_ITRx_SetConfig>
      break;
 80029f2:	e017      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0xcc>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029f4:	68ca      	ldr	r2, [r1, #12]
 80029f6:	6849      	ldr	r1, [r1, #4]
 80029f8:	6820      	ldr	r0, [r4, #0]
 80029fa:	f7ff fd6f 	bl	80024dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029fe:	2160      	movs	r1, #96	; 0x60
 8002a00:	6820      	ldr	r0, [r4, #0]
 8002a02:	f7ff fd7f 	bl	8002504 <TIM_ITRx_SetConfig>
      break;
 8002a06:	e00d      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0xcc>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a08:	68ca      	ldr	r2, [r1, #12]
 8002a0a:	6849      	ldr	r1, [r1, #4]
 8002a0c:	6820      	ldr	r0, [r4, #0]
 8002a0e:	f7ff fd51 	bl	80024b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a12:	2140      	movs	r1, #64	; 0x40
 8002a14:	6820      	ldr	r0, [r4, #0]
 8002a16:	f7ff fd75 	bl	8002504 <TIM_ITRx_SetConfig>
      break;
 8002a1a:	e003      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0xcc>
    case TIM_CLOCKSOURCE_ITR3:
      {
        /* Check whether or not the timer instance supports internal trigger input */
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6820      	ldr	r0, [r4, #0]
 8002a20:	f7ff fd70 	bl	8002504 <TIM_ITRx_SetConfig>
      }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8002a30:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a32:	2002      	movs	r0, #2
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	fffe0088 	.word	0xfffe0088

08002a3c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a3c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d02d      	beq.n	8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a44:	b430      	push	{r4, r5}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a46:	2301      	movs	r3, #1
 8002a48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a52:	6803      	ldr	r3, [r0, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a56:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a58:	4c13      	ldr	r4, [pc, #76]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002a5a:	42a3      	cmp	r3, r4
 8002a5c:	d103      	bne.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a62:	684c      	ldr	r4, [r1, #4]
 8002a64:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a6a:	680c      	ldr	r4, [r1, #0]
 8002a6c:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a70:	6803      	ldr	r3, [r0, #0]
 8002a72:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d006      	beq.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8002a7e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d104      	bne.n	8002a90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a86:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a8a:	688a      	ldr	r2, [r1, #8]
 8002a8c:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a8e:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a96:	2300      	movs	r3, #0
 8002a98:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	e001      	b.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aa0:	2002      	movs	r0, #2
 8002aa2:	4770      	bx	lr
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002aa4:	bc30      	pop	{r4, r5}
 8002aa6:	4770      	bx	lr
 8002aa8:	40012c00 	.word	0x40012c00

08002aac <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d038      	beq.n	8002b26 <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ab4:	b410      	push	{r4}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002abc:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002abe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ac2:	688b      	ldr	r3, [r1, #8]
 8002ac4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ac6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002aca:	684b      	ldr	r3, [r1, #4]
 8002acc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ace:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ad2:	680b      	ldr	r3, [r1, #0]
 8002ad4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ada:	690b      	ldr	r3, [r1, #16]
 8002adc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ade:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ae2:	694b      	ldr	r3, [r1, #20]
 8002ae4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ae6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002aea:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002aec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002aee:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002af2:	698a      	ldr	r2, [r1, #24]
 8002af4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002af8:	6802      	ldr	r2, [r0, #0]
 8002afa:	4c0d      	ldr	r4, [pc, #52]	; (8002b30 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
 8002afc:	42a2      	cmp	r2, r4
 8002afe:	d10c      	bne.n	8002b1a <HAL_TIMEx_ConfigBreakDeadTime+0x6e>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002b00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002b04:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8002b06:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	69cc      	ldr	r4, [r1, #28]
 8002b10:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002b12:	f023 7400 	bic.w	r4, r3, #33554432	; 0x2000000
 8002b16:	6a0b      	ldr	r3, [r1, #32]
 8002b18:	4323      	orrs	r3, r4
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b1a:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002b22:	4618      	mov	r0, r3
 8002b24:	e001      	b.n	8002b2a <HAL_TIMEx_ConfigBreakDeadTime+0x7e>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b26:	2002      	movs	r0, #2
 8002b28:	4770      	bx	lr
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	40012c00 	.word	0x40012c00

08002b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop

08002b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop

08002b3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop

08002b40 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b40:	6802      	ldr	r2, [r0, #0]
 8002b42:	6813      	ldr	r3, [r2, #0]
 8002b44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b48:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4a:	6802      	ldr	r2, [r0, #0]
 8002b4c:	6893      	ldr	r3, [r2, #8]
 8002b4e:	f023 0301 	bic.w	r3, r3, #1
 8002b52:	6093      	str	r3, [r2, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b54:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d104      	bne.n	8002b64 <UART_EndRxTransfer+0x24>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b5a:	6802      	ldr	r2, [r0, #0]
 8002b5c:	6813      	ldr	r3, [r2, #0]
 8002b5e:	f023 0310 	bic.w	r3, r3, #16
 8002b62:	6013      	str	r3, [r2, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b64:	2320      	movs	r3, #32
 8002b66:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b6c:	6643      	str	r3, [r0, #100]	; 0x64
 8002b6e:	4770      	bx	lr

08002b70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop

08002b74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b74:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002b76:	6801      	ldr	r1, [r0, #0]
 8002b78:	680a      	ldr	r2, [r1, #0]
 8002b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b7e:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b80:	2220      	movs	r2, #32
 8002b82:	6782      	str	r2, [r0, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002b84:	2200      	movs	r2, #0
 8002b86:	6682      	str	r2, [r0, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b88:	f7ff fff2 	bl	8002b70 <HAL_UART_TxCpltCallback>
 8002b8c:	bd08      	pop	{r3, pc}
 8002b8e:	bf00      	nop

08002b90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop

08002b94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b94:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b96:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002b9e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ba2:	f7ff fff5 	bl	8002b90 <HAL_UART_ErrorCallback>
 8002ba6:	bd08      	pop	{r3, pc}

08002ba8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop

08002bac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bb0:	6801      	ldr	r1, [r0, #0]
 8002bb2:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bb4:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bb6:	688d      	ldr	r5, [r1, #8]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002bb8:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	d10c      	bne.n	8002bda <HAL_UART_IRQHandler+0x2e>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bc0:	f013 0f20 	tst.w	r3, #32
 8002bc4:	d009      	beq.n	8002bda <HAL_UART_IRQHandler+0x2e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bc6:	f010 0f20 	tst.w	r0, #32
 8002bca:	d006      	beq.n	8002bda <HAL_UART_IRQHandler+0x2e>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002bcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8121 	beq.w	8002e16 <HAL_UART_IRQHandler+0x26a>
      {
        huart->RxISR(huart);
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	4798      	blx	r3
 8002bd8:	bd70      	pop	{r4, r5, r6, pc}
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002bda:	2a00      	cmp	r2, #0
 8002bdc:	f000 808f 	beq.w	8002cfe <HAL_UART_IRQHandler+0x152>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002be0:	f015 0201 	ands.w	r2, r5, #1
 8002be4:	d103      	bne.n	8002bee <HAL_UART_IRQHandler+0x42>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002be6:	4e8c      	ldr	r6, [pc, #560]	; (8002e18 <HAL_UART_IRQHandler+0x26c>)
 8002be8:	4230      	tst	r0, r6
 8002bea:	f000 8088 	beq.w	8002cfe <HAL_UART_IRQHandler+0x152>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bee:	f013 0f01 	tst.w	r3, #1
 8002bf2:	d009      	beq.n	8002c08 <HAL_UART_IRQHandler+0x5c>
 8002bf4:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002bf8:	d006      	beq.n	8002c08 <HAL_UART_IRQHandler+0x5c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bfa:	2501      	movs	r5, #1
 8002bfc:	620d      	str	r5, [r1, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bfe:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002c02:	4329      	orrs	r1, r5
 8002c04:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c08:	f013 0f02 	tst.w	r3, #2
 8002c0c:	d009      	beq.n	8002c22 <HAL_UART_IRQHandler+0x76>
 8002c0e:	b142      	cbz	r2, 8002c22 <HAL_UART_IRQHandler+0x76>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c10:	6821      	ldr	r1, [r4, #0]
 8002c12:	2502      	movs	r5, #2
 8002c14:	620d      	str	r5, [r1, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c16:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002c1a:	f041 0104 	orr.w	r1, r1, #4
 8002c1e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c22:	f013 0f04 	tst.w	r3, #4
 8002c26:	d009      	beq.n	8002c3c <HAL_UART_IRQHandler+0x90>
 8002c28:	b142      	cbz	r2, 8002c3c <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c2a:	6821      	ldr	r1, [r4, #0]
 8002c2c:	2504      	movs	r5, #4
 8002c2e:	620d      	str	r5, [r1, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c30:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002c34:	f041 0102 	orr.w	r1, r1, #2
 8002c38:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c3c:	f013 0f08 	tst.w	r3, #8
 8002c40:	d00b      	beq.n	8002c5a <HAL_UART_IRQHandler+0xae>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c42:	f010 0f20 	tst.w	r0, #32
 8002c46:	d100      	bne.n	8002c4a <HAL_UART_IRQHandler+0x9e>
 8002c48:	b13a      	cbz	r2, 8002c5a <HAL_UART_IRQHandler+0xae>
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c4a:	6822      	ldr	r2, [r4, #0]
 8002c4c:	2108      	movs	r1, #8
 8002c4e:	6211      	str	r1, [r2, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c50:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8002c54:	430a      	orrs	r2, r1
 8002c56:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c5a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002c5e:	d00c      	beq.n	8002c7a <HAL_UART_IRQHandler+0xce>
 8002c60:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8002c64:	d009      	beq.n	8002c7a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c6c:	6211      	str	r1, [r2, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c6e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8002c72:	f042 0220 	orr.w	r2, r2, #32
 8002c76:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c7a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8002c7e:	2a00      	cmp	r2, #0
 8002c80:	f000 80c9 	beq.w	8002e16 <HAL_UART_IRQHandler+0x26a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c84:	f013 0f20 	tst.w	r3, #32
 8002c88:	d006      	beq.n	8002c98 <HAL_UART_IRQHandler+0xec>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c8a:	f010 0f20 	tst.w	r0, #32
 8002c8e:	d003      	beq.n	8002c98 <HAL_UART_IRQHandler+0xec>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002c90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c92:	b10b      	cbz	r3, 8002c98 <HAL_UART_IRQHandler+0xec>
        {
          huart->RxISR(huart);
 8002c94:	4620      	mov	r0, r4
 8002c96:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c98:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ca4:	d102      	bne.n	8002cac <HAL_UART_IRQHandler+0x100>
 8002ca6:	f012 0f28 	tst.w	r2, #40	; 0x28
 8002caa:	d021      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x144>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cac:	4620      	mov	r0, r4
 8002cae:	f7ff ff47 	bl	8002b40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002cba:	d015      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x13c>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cc4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002cc6:	b15b      	cbz	r3, 8002ce0 <HAL_UART_IRQHandler+0x134>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cc8:	4a54      	ldr	r2, [pc, #336]	; (8002e1c <HAL_UART_IRQHandler+0x270>)
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ccc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002cce:	f7ff f83b 	bl	8001d48 <HAL_DMA_Abort_IT>
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	f000 809f 	beq.w	8002e16 <HAL_UART_IRQHandler+0x26a>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cd8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002cda:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002cdc:	4798      	blx	r3
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f7ff ff55 	bl	8002b90 <HAL_UART_ErrorCallback>
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f7ff ff51 	bl	8002b90 <HAL_UART_ErrorCallback>
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	f7ff ff4d 	bl	8002b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8002cfc:	bd70      	pop	{r4, r5, r6, pc}

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cfe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002d00:	2a01      	cmp	r2, #1
 8002d02:	d167      	bne.n	8002dd4 <HAL_UART_IRQHandler+0x228>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002d04:	f013 0f10 	tst.w	r3, #16
 8002d08:	d064      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x228>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002d0a:	f010 0f10 	tst.w	r0, #16
 8002d0e:	d061      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x228>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d10:	2310      	movs	r3, #16
 8002d12:	620b      	str	r3, [r1, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	6822      	ldr	r2, [r4, #0]
 8002d16:	6893      	ldr	r3, [r2, #8]
 8002d18:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d1c:	d035      	beq.n	8002d8a <HAL_UART_IRQHandler+0x1de>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d1e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002d20:	680b      	ldr	r3, [r1, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d075      	beq.n	8002e16 <HAL_UART_IRQHandler+0x26a>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002d2a:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
 8002d2e:	4283      	cmp	r3, r0
 8002d30:	d271      	bcs.n	8002e16 <HAL_UART_IRQHandler+0x26a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d32:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d36:	680b      	ldr	r3, [r1, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f013 0f20 	tst.w	r3, #32
 8002d3e:	d119      	bne.n	8002d74 <HAL_UART_IRQHandler+0x1c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d40:	6813      	ldr	r3, [r2, #0]
 8002d42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d46:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d48:	6822      	ldr	r2, [r4, #0]
 8002d4a:	6893      	ldr	r3, [r2, #8]
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6093      	str	r3, [r2, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d52:	6822      	ldr	r2, [r4, #0]
 8002d54:	6893      	ldr	r3, [r2, #8]
 8002d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d5a:	6093      	str	r3, [r2, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d60:	2300      	movs	r3, #0
 8002d62:	6623      	str	r3, [r4, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d64:	6822      	ldr	r2, [r4, #0]
 8002d66:	6813      	ldr	r3, [r2, #0]
 8002d68:	f023 0310 	bic.w	r3, r3, #16
 8002d6c:	6013      	str	r3, [r2, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d6e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8002d70:	f7fe ffc4 	bl	8001cfc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d74:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8002d78:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8002d7c:	b289      	uxth	r1, r1
 8002d7e:	1a59      	subs	r1, r3, r1
 8002d80:	b289      	uxth	r1, r1
 8002d82:	4620      	mov	r0, r4
 8002d84:	f7ff ff10 	bl	8002ba8 <HAL_UARTEx_RxEventCallback>
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d8a:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8002d8e:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8002d92:	b289      	uxth	r1, r1
 8002d94:	1a59      	subs	r1, r3, r1
 8002d96:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8002d98:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d039      	beq.n	8002e16 <HAL_UART_IRQHandler+0x26a>
          &&(nb_rx_data > 0U) )
 8002da2:	2900      	cmp	r1, #0
 8002da4:	d037      	beq.n	8002e16 <HAL_UART_IRQHandler+0x26a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002da6:	6813      	ldr	r3, [r2, #0]
 8002da8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dac:	6013      	str	r3, [r2, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dae:	6822      	ldr	r2, [r4, #0]
 8002db0:	6893      	ldr	r3, [r2, #8]
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6093      	str	r3, [r2, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002db8:	2320      	movs	r3, #32
 8002dba:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	6623      	str	r3, [r4, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002dc0:	6663      	str	r3, [r4, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc2:	6822      	ldr	r2, [r4, #0]
 8002dc4:	6813      	ldr	r3, [r2, #0]
 8002dc6:	f023 0310 	bic.w	r3, r3, #16
 8002dca:	6013      	str	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f7ff feeb 	bl	8002ba8 <HAL_UARTEx_RxEventCallback>
 8002dd2:	bd70      	pop	{r4, r5, r6, pc}
      return;
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002dd4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002dd8:	d009      	beq.n	8002dee <HAL_UART_IRQHandler+0x242>
 8002dda:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8002dde:	d006      	beq.n	8002dee <HAL_UART_IRQHandler+0x242>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002de0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002de4:	620b      	str	r3, [r1, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002de6:	4620      	mov	r0, r4
 8002de8:	f000 fafe 	bl	80033e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dec:	bd70      	pop	{r4, r5, r6, pc}
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002dee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002df2:	d007      	beq.n	8002e04 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002df4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002df8:	d004      	beq.n	8002e04 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002dfa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002dfc:	b15b      	cbz	r3, 8002e16 <HAL_UART_IRQHandler+0x26a>
    {
      huart->TxISR(huart);
 8002dfe:	4620      	mov	r0, r4
 8002e00:	4798      	blx	r3
 8002e02:	bd70      	pop	{r4, r5, r6, pc}
    }
    return;
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e04:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e08:	d005      	beq.n	8002e16 <HAL_UART_IRQHandler+0x26a>
 8002e0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e0e:	d002      	beq.n	8002e16 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8002e10:	4620      	mov	r0, r4
 8002e12:	f7ff feaf 	bl	8002b74 <UART_EndTransmit_IT>
 8002e16:	bd70      	pop	{r4, r5, r6, pc}
 8002e18:	04000120 	.word	0x04000120
 8002e1c:	08002b95 	.word	0x08002b95

08002e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e20:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002e24:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e26:	6882      	ldr	r2, [r0, #8]
 8002e28:	6903      	ldr	r3, [r0, #16]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	6943      	ldr	r3, [r0, #20]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	69c3      	ldr	r3, [r0, #28]
 8002e32:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e34:	6801      	ldr	r1, [r0, #0]
 8002e36:	6808      	ldr	r0, [r1, #0]
 8002e38:	4b99      	ldr	r3, [pc, #612]	; (80030a0 <UART_SetConfig+0x280>)
 8002e3a:	4003      	ands	r3, r0
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e40:	6821      	ldr	r1, [r4, #0]
 8002e42:	684b      	ldr	r3, [r1, #4]
 8002e44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e48:	68e3      	ldr	r3, [r4, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e4e:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e50:	6822      	ldr	r2, [r4, #0]
 8002e52:	4b94      	ldr	r3, [pc, #592]	; (80030a4 <UART_SetConfig+0x284>)
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <UART_SetConfig+0x3c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e58:	6a23      	ldr	r3, [r4, #32]
 8002e5a:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e5c:	6893      	ldr	r3, [r2, #8]
 8002e5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e62:	430b      	orrs	r3, r1
 8002e64:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	4a8f      	ldr	r2, [pc, #572]	; (80030a8 <UART_SetConfig+0x288>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d113      	bne.n	8002e96 <UART_SetConfig+0x76>
 8002e6e:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8002e72:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002e76:	f002 0203 	and.w	r2, r2, #3
 8002e7a:	2a03      	cmp	r2, #3
 8002e7c:	d809      	bhi.n	8002e92 <UART_SetConfig+0x72>
 8002e7e:	e8df f002 	tbb	[pc, r2]
 8002e82:	0402      	.short	0x0402
 8002e84:	065f      	.short	0x065f
 8002e86:	2201      	movs	r2, #1
 8002e88:	e063      	b.n	8002f52 <UART_SetConfig+0x132>
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	e061      	b.n	8002f52 <UART_SetConfig+0x132>
 8002e8e:	2208      	movs	r2, #8
 8002e90:	e05f      	b.n	8002f52 <UART_SetConfig+0x132>
 8002e92:	2210      	movs	r2, #16
 8002e94:	e05d      	b.n	8002f52 <UART_SetConfig+0x132>
 8002e96:	4a85      	ldr	r2, [pc, #532]	; (80030ac <UART_SetConfig+0x28c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d118      	bne.n	8002ece <UART_SetConfig+0xae>
 8002e9c:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8002ea0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002ea4:	f002 020c 	and.w	r2, r2, #12
 8002ea8:	2a0c      	cmp	r2, #12
 8002eaa:	d80e      	bhi.n	8002eca <UART_SetConfig+0xaa>
 8002eac:	e8df f002 	tbb	[pc, r2]
 8002eb0:	0d0d0d07 	.word	0x0d0d0d07
 8002eb4:	0d0d0d09 	.word	0x0d0d0d09
 8002eb8:	0d0d0d4a 	.word	0x0d0d0d4a
 8002ebc:	0b          	.byte	0x0b
 8002ebd:	00          	.byte	0x00
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	e047      	b.n	8002f52 <UART_SetConfig+0x132>
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	e045      	b.n	8002f52 <UART_SetConfig+0x132>
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	e043      	b.n	8002f52 <UART_SetConfig+0x132>
 8002eca:	2210      	movs	r2, #16
 8002ecc:	e041      	b.n	8002f52 <UART_SetConfig+0x132>
 8002ece:	4a78      	ldr	r2, [pc, #480]	; (80030b0 <UART_SetConfig+0x290>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d117      	bne.n	8002f04 <UART_SetConfig+0xe4>
 8002ed4:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8002ed8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002edc:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002ee0:	2a10      	cmp	r2, #16
 8002ee2:	d009      	beq.n	8002ef8 <UART_SetConfig+0xd8>
 8002ee4:	d801      	bhi.n	8002eea <UART_SetConfig+0xca>
 8002ee6:	b12a      	cbz	r2, 8002ef4 <UART_SetConfig+0xd4>
 8002ee8:	e00a      	b.n	8002f00 <UART_SetConfig+0xe0>
 8002eea:	2a20      	cmp	r2, #32
 8002eec:	d02c      	beq.n	8002f48 <UART_SetConfig+0x128>
 8002eee:	2a30      	cmp	r2, #48	; 0x30
 8002ef0:	d004      	beq.n	8002efc <UART_SetConfig+0xdc>
 8002ef2:	e005      	b.n	8002f00 <UART_SetConfig+0xe0>
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	e02c      	b.n	8002f52 <UART_SetConfig+0x132>
 8002ef8:	2204      	movs	r2, #4
 8002efa:	e02a      	b.n	8002f52 <UART_SetConfig+0x132>
 8002efc:	2208      	movs	r2, #8
 8002efe:	e028      	b.n	8002f52 <UART_SetConfig+0x132>
 8002f00:	2210      	movs	r2, #16
 8002f02:	e026      	b.n	8002f52 <UART_SetConfig+0x132>
 8002f04:	4a67      	ldr	r2, [pc, #412]	; (80030a4 <UART_SetConfig+0x284>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d120      	bne.n	8002f4c <UART_SetConfig+0x12c>
 8002f0a:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8002f0e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002f12:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002f16:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002f1a:	d00b      	beq.n	8002f34 <UART_SetConfig+0x114>
 8002f1c:	d801      	bhi.n	8002f22 <UART_SetConfig+0x102>
 8002f1e:	b13a      	cbz	r2, 8002f30 <UART_SetConfig+0x110>
 8002f20:	e00c      	b.n	8002f3c <UART_SetConfig+0x11c>
 8002f22:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002f26:	d013      	beq.n	8002f50 <UART_SetConfig+0x130>
 8002f28:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002f2c:	d004      	beq.n	8002f38 <UART_SetConfig+0x118>
 8002f2e:	e005      	b.n	8002f3c <UART_SetConfig+0x11c>
 8002f30:	2200      	movs	r2, #0
 8002f32:	e00e      	b.n	8002f52 <UART_SetConfig+0x132>
 8002f34:	2204      	movs	r2, #4
 8002f36:	e00c      	b.n	8002f52 <UART_SetConfig+0x132>
 8002f38:	2208      	movs	r2, #8
 8002f3a:	e00a      	b.n	8002f52 <UART_SetConfig+0x132>
 8002f3c:	2210      	movs	r2, #16
 8002f3e:	e008      	b.n	8002f52 <UART_SetConfig+0x132>
 8002f40:	2202      	movs	r2, #2
 8002f42:	e006      	b.n	8002f52 <UART_SetConfig+0x132>
 8002f44:	2202      	movs	r2, #2
 8002f46:	e004      	b.n	8002f52 <UART_SetConfig+0x132>
 8002f48:	2202      	movs	r2, #2
 8002f4a:	e002      	b.n	8002f52 <UART_SetConfig+0x132>
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	e000      	b.n	8002f52 <UART_SetConfig+0x132>
 8002f50:	2202      	movs	r2, #2

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f52:	4954      	ldr	r1, [pc, #336]	; (80030a4 <UART_SetConfig+0x284>)
 8002f54:	428b      	cmp	r3, r1
 8002f56:	d138      	bne.n	8002fca <UART_SetConfig+0x1aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f58:	2a08      	cmp	r2, #8
 8002f5a:	d811      	bhi.n	8002f80 <UART_SetConfig+0x160>
 8002f5c:	e8df f002 	tbb	[pc, r2]
 8002f60:	10051008 	.word	0x10051008
 8002f64:	1010100c 	.word	0x1010100c
 8002f68:	13          	.byte	0x13
 8002f69:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f6a:	4852      	ldr	r0, [pc, #328]	; (80030b4 <UART_SetConfig+0x294>)
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f6c:	2500      	movs	r5, #0
 8002f6e:	e00d      	b.n	8002f8c <UART_SetConfig+0x16c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f70:	f7fe fb5c 	bl	800162c <HAL_RCC_GetPCLK1Freq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f74:	2500      	movs	r5, #0
    /* Retrieve frequency clock */
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
 8002f76:	e009      	b.n	8002f8c <UART_SetConfig+0x16c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f78:	f7fd fee8 	bl	8000d4c <HAL_RCC_GetSysClockFreq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f7c:	2500      	movs	r5, #0
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
 8002f7e:	e005      	b.n	8002f8c <UART_SetConfig+0x16c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
 8002f80:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 8002f82:	2501      	movs	r5, #1
        break;
 8002f84:	e002      	b.n	8002f8c <UART_SetConfig+0x16c>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f86:	f44f 4000 	mov.w	r0, #32768	; 0x8000
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f8a:	2500      	movs	r5, #0
        ret = HAL_ERROR;
        break;
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	f000 809a 	beq.w	80030c6 <UART_SetConfig+0x2a6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f92:	6862      	ldr	r2, [r4, #4]
 8002f94:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002f98:	4298      	cmp	r0, r3
 8002f9a:	d37d      	bcc.n	8003098 <UART_SetConfig+0x278>
 8002f9c:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002fa0:	d87c      	bhi.n	800309c <UART_SetConfig+0x27c>
      {
        ret = HAL_ERROR;
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	0e07      	lsrs	r7, r0, #24
 8002fa6:	0206      	lsls	r6, r0, #8
 8002fa8:	0850      	lsrs	r0, r2, #1
 8002faa:	eb16 0b00 	adds.w	fp, r6, r0
 8002fae:	f147 0c00 	adc.w	ip, r7, #0
 8002fb2:	4658      	mov	r0, fp
 8002fb4:	4661      	mov	r1, ip
 8002fb6:	f7fd f96b 	bl	8000290 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fba:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002fbe:	4b3e      	ldr	r3, [pc, #248]	; (80030b8 <UART_SetConfig+0x298>)
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d87b      	bhi.n	80030bc <UART_SetConfig+0x29c>
        {
          huart->Instance->BRR = usartdiv;
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	60d8      	str	r0, [r3, #12]
 8002fc8:	e07d      	b.n	80030c6 <UART_SetConfig+0x2a6>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fca:	69e3      	ldr	r3, [r4, #28]
 8002fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd0:	d134      	bne.n	800303c <UART_SetConfig+0x21c>
  {
    switch (clocksource)
 8002fd2:	2a08      	cmp	r2, #8
 8002fd4:	d815      	bhi.n	8003002 <UART_SetConfig+0x1e2>
 8002fd6:	e8df f002 	tbb	[pc, r2]
 8002fda:	0c08      	.short	0x0c08
 8002fdc:	14101405 	.word	0x14101405
 8002fe0:	1414      	.short	0x1414
 8002fe2:	17          	.byte	0x17
 8002fe3:	00          	.byte	0x00
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe4:	4833      	ldr	r0, [pc, #204]	; (80030b4 <UART_SetConfig+0x294>)
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fe6:	2500      	movs	r5, #0
 8002fe8:	e011      	b.n	800300e <UART_SetConfig+0x1ee>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fea:	f7fe fb1f 	bl	800162c <HAL_RCC_GetPCLK1Freq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fee:	2500      	movs	r5, #0
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
 8002ff0:	e00d      	b.n	800300e <UART_SetConfig+0x1ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff2:	f7fe fb2d 	bl	8001650 <HAL_RCC_GetPCLK2Freq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ff6:	2500      	movs	r5, #0
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
 8002ff8:	e009      	b.n	800300e <UART_SetConfig+0x1ee>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ffa:	f7fd fea7 	bl	8000d4c <HAL_RCC_GetSysClockFreq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ffe:	2500      	movs	r5, #0
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
 8003000:	e005      	b.n	800300e <UART_SetConfig+0x1ee>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
 8003002:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 8003004:	2501      	movs	r5, #1
        break;
 8003006:	e002      	b.n	800300e <UART_SetConfig+0x1ee>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003008:	f44f 4000 	mov.w	r0, #32768	; 0x8000
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800300c:	2500      	movs	r5, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800300e:	2800      	cmp	r0, #0
 8003010:	d059      	beq.n	80030c6 <UART_SetConfig+0x2a6>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003012:	6862      	ldr	r2, [r4, #4]
 8003014:	0853      	lsrs	r3, r2, #1
 8003016:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800301a:	fbb0 f0f2 	udiv	r0, r0, r2
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800301e:	b283      	uxth	r3, r0
 8003020:	3b10      	subs	r3, #16
 8003022:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003026:	4293      	cmp	r3, r2
 8003028:	d84a      	bhi.n	80030c0 <UART_SetConfig+0x2a0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800302a:	b283      	uxth	r3, r0
 800302c:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003030:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8003034:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	60d8      	str	r0, [r3, #12]
 800303a:	e044      	b.n	80030c6 <UART_SetConfig+0x2a6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800303c:	2a08      	cmp	r2, #8
 800303e:	d815      	bhi.n	800306c <UART_SetConfig+0x24c>
 8003040:	e8df f002 	tbb	[pc, r2]
 8003044:	14050c08 	.word	0x14050c08
 8003048:	14141410 	.word	0x14141410
 800304c:	17          	.byte	0x17
 800304d:	00          	.byte	0x00
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800304e:	4819      	ldr	r0, [pc, #100]	; (80030b4 <UART_SetConfig+0x294>)
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003050:	2500      	movs	r5, #0
 8003052:	e011      	b.n	8003078 <UART_SetConfig+0x258>
  else
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003054:	f7fe faea 	bl	800162c <HAL_RCC_GetPCLK1Freq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003058:	2500      	movs	r5, #0
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
 800305a:	e00d      	b.n	8003078 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800305c:	f7fe faf8 	bl	8001650 <HAL_RCC_GetPCLK2Freq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003060:	2500      	movs	r5, #0
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
        break;
 8003062:	e009      	b.n	8003078 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003064:	f7fd fe72 	bl	8000d4c <HAL_RCC_GetSysClockFreq>
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003068:	2500      	movs	r5, #0
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
 800306a:	e005      	b.n	8003078 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
 800306c:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 800306e:	2501      	movs	r5, #1
        break;
 8003070:	e002      	b.n	8003078 <UART_SetConfig+0x258>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003072:	f44f 4000 	mov.w	r0, #32768	; 0x8000
{
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003076:	2500      	movs	r5, #0
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8003078:	b328      	cbz	r0, 80030c6 <UART_SetConfig+0x2a6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800307a:	6863      	ldr	r3, [r4, #4]
 800307c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003080:	fbb0 f0f3 	udiv	r0, r0, r3
 8003084:	b280      	uxth	r0, r0
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003086:	f1a0 0210 	sub.w	r2, r0, #16
 800308a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800308e:	429a      	cmp	r2, r3
 8003090:	d818      	bhi.n	80030c4 <UART_SetConfig+0x2a4>
      {
        huart->Instance->BRR = usartdiv;
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	60d8      	str	r0, [r3, #12]
 8003096:	e016      	b.n	80030c6 <UART_SetConfig+0x2a6>
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
          (pclk > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8003098:	2501      	movs	r5, #1
 800309a:	e014      	b.n	80030c6 <UART_SetConfig+0x2a6>
 800309c:	2501      	movs	r5, #1
 800309e:	e012      	b.n	80030c6 <UART_SetConfig+0x2a6>
 80030a0:	efff69f3 	.word	0xefff69f3
 80030a4:	40008000 	.word	0x40008000
 80030a8:	40013800 	.word	0x40013800
 80030ac:	40004400 	.word	0x40004400
 80030b0:	40004800 	.word	0x40004800
 80030b4:	00f42400 	.word	0x00f42400
 80030b8:	000ffcff 	.word	0x000ffcff
        {
          huart->Instance->BRR = usartdiv;
        }
        else
        {
          ret = HAL_ERROR;
 80030bc:	2501      	movs	r5, #1
 80030be:	e002      	b.n	80030c6 <UART_SetConfig+0x2a6>
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
        huart->Instance->BRR = brrtemp;
      }
      else
      {
        ret = HAL_ERROR;
 80030c0:	2501      	movs	r5, #1
 80030c2:	e000      	b.n	80030c6 <UART_SetConfig+0x2a6>
      {
        huart->Instance->BRR = usartdiv;
      }
      else
      {
        ret = HAL_ERROR;
 80030c4:	2501      	movs	r5, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 80030ca:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 80030cc:	4628      	mov	r0, r5
 80030ce:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80030d2:	bf00      	nop

080030d4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030d6:	f013 0f01 	tst.w	r3, #1
 80030da:	d006      	beq.n	80030ea <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030dc:	6801      	ldr	r1, [r0, #0]
 80030de:	684b      	ldr	r3, [r1, #4]
 80030e0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030ec:	f013 0f02 	tst.w	r3, #2
 80030f0:	d006      	beq.n	8003100 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030f2:	6801      	ldr	r1, [r0, #0]
 80030f4:	684b      	ldr	r3, [r1, #4]
 80030f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003100:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003102:	f013 0f04 	tst.w	r3, #4
 8003106:	d006      	beq.n	8003116 <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003108:	6801      	ldr	r1, [r0, #0]
 800310a:	684b      	ldr	r3, [r1, #4]
 800310c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003110:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003116:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003118:	f013 0f08 	tst.w	r3, #8
 800311c:	d006      	beq.n	800312c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800311e:	6801      	ldr	r1, [r0, #0]
 8003120:	684b      	ldr	r3, [r1, #4]
 8003122:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003126:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800312c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800312e:	f013 0f10 	tst.w	r3, #16
 8003132:	d006      	beq.n	8003142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003134:	6801      	ldr	r1, [r0, #0]
 8003136:	688b      	ldr	r3, [r1, #8]
 8003138:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800313c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003142:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003144:	f013 0f20 	tst.w	r3, #32
 8003148:	d006      	beq.n	8003158 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800314a:	6801      	ldr	r1, [r0, #0]
 800314c:	688b      	ldr	r3, [r1, #8]
 800314e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003152:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003154:	4313      	orrs	r3, r2
 8003156:	608b      	str	r3, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003158:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800315a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800315e:	d011      	beq.n	8003184 <UART_AdvFeatureConfig+0xb0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003160:	6801      	ldr	r1, [r0, #0]
 8003162:	684b      	ldr	r3, [r1, #4]
 8003164:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003168:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800316a:	4313      	orrs	r3, r2
 800316c:	604b      	str	r3, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800316e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003174:	d106      	bne.n	8003184 <UART_AdvFeatureConfig+0xb0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003176:	6801      	ldr	r1, [r0, #0]
 8003178:	684b      	ldr	r3, [r1, #4]
 800317a:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
 800317e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003184:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003186:	f013 0f80 	tst.w	r3, #128	; 0x80
 800318a:	d006      	beq.n	800319a <UART_AdvFeatureConfig+0xc6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800318c:	6801      	ldr	r1, [r0, #0]
 800318e:	684b      	ldr	r3, [r1, #4]
 8003190:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003194:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
 800319a:	4770      	bx	lr

0800319c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800319c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031a0:	4604      	mov	r4, r0
 80031a2:	460f      	mov	r7, r1
 80031a4:	4616      	mov	r6, r2
 80031a6:	4698      	mov	r8, r3
 80031a8:	9d06      	ldr	r5, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031aa:	e03d      	b.n	8003228 <UART_WaitOnFlagUntilTimeout+0x8c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ac:	f1b5 3fff 	cmp.w	r5, #4294967295
 80031b0:	d03a      	beq.n	8003228 <UART_WaitOnFlagUntilTimeout+0x8c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7fd fd7d 	bl	8000cb0 <HAL_GetTick>
 80031b6:	ebc8 0000 	rsb	r0, r8, r0
 80031ba:	4285      	cmp	r5, r0
 80031bc:	d300      	bcc.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x24>
 80031be:	b995      	cbnz	r5, 80031e6 <UART_WaitOnFlagUntilTimeout+0x4a>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031c0:	6822      	ldr	r2, [r4, #0]
 80031c2:	6813      	ldr	r3, [r2, #0]
 80031c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031c8:	6013      	str	r3, [r2, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ca:	6822      	ldr	r2, [r4, #0]
 80031cc:	6893      	ldr	r3, [r2, #8]
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031d4:	2320      	movs	r3, #32
 80031d6:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031d8:	67e3      	str	r3, [r4, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031da:	2300      	movs	r3, #0
 80031dc:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74

        return HAL_TIMEOUT;
 80031e0:	2003      	movs	r0, #3
 80031e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	f012 0f04 	tst.w	r2, #4
 80031ee:	d01b      	beq.n	8003228 <UART_WaitOnFlagUntilTimeout+0x8c>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80031f6:	d017      	beq.n	8003228 <UART_WaitOnFlagUntilTimeout+0x8c>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031fc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031fe:	6822      	ldr	r2, [r4, #0]
 8003200:	6813      	ldr	r3, [r2, #0]
 8003202:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003206:	6013      	str	r3, [r2, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003208:	6822      	ldr	r2, [r4, #0]
 800320a:	6893      	ldr	r3, [r2, #8]
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003212:	2320      	movs	r3, #32
 8003214:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003216:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003218:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800321c:	2300      	movs	r3, #0
 800321e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74

          return HAL_TIMEOUT;
 8003222:	2003      	movs	r0, #3
 8003224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	ea37 0303 	bics.w	r3, r7, r3
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	42b3      	cmp	r3, r6
 8003238:	d0b8      	beq.n	80031ac <UART_WaitOnFlagUntilTimeout+0x10>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800323a:	2000      	movs	r0, #0
}
 800323c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003240 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	461e      	mov	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003248:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800324a:	2b20      	cmp	r3, #32
 800324c:	d157      	bne.n	80032fe <HAL_UART_Transmit+0xbe>
 800324e:	4604      	mov	r4, r0
 8003250:	460d      	mov	r5, r1
 8003252:	4690      	mov	r8, r2
  {
    if ((pData == NULL) || (Size == 0U))
 8003254:	2900      	cmp	r1, #0
 8003256:	d054      	beq.n	8003302 <HAL_UART_Transmit+0xc2>
 8003258:	2a00      	cmp	r2, #0
 800325a:	d054      	beq.n	8003306 <HAL_UART_Transmit+0xc6>
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800325c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8003260:	2b01      	cmp	r3, #1
 8003262:	d052      	beq.n	800330a <HAL_UART_Transmit+0xca>
 8003264:	2301      	movs	r3, #1
 8003266:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326a:	2300      	movs	r3, #0
 800326c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003270:	2321      	movs	r3, #33	; 0x21
 8003272:	6783      	str	r3, [r0, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003274:	f7fd fd1c 	bl	8000cb0 <HAL_GetTick>
 8003278:	4607      	mov	r7, r0

    huart->TxXferSize  = Size;
 800327a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800327e:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003288:	d104      	bne.n	8003294 <HAL_UART_Transmit+0x54>
 800328a:	6923      	ldr	r3, [r4, #16]
 800328c:	b12b      	cbz	r3, 800329a <HAL_UART_Transmit+0x5a>
      pdata16bits = (uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 800328e:	f04f 0800 	mov.w	r8, #0
 8003292:	e004      	b.n	800329e <HAL_UART_Transmit+0x5e>
 8003294:	f04f 0800 	mov.w	r8, #0
 8003298:	e001      	b.n	800329e <HAL_UART_Transmit+0x5e>

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
    {
      pdata8bits  = NULL;
      pdata16bits = (uint16_t *) pData;
 800329a:	46a8      	mov	r8, r5
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
    {
      pdata8bits  = NULL;
 800329c:	2500      	movs	r5, #0
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);
 800329e:	2300      	movs	r3, #0
 80032a0:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80032a4:	e01a      	b.n	80032dc <HAL_UART_Transmit+0x9c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032a6:	9600      	str	r6, [sp, #0]
 80032a8:	463b      	mov	r3, r7
 80032aa:	2200      	movs	r2, #0
 80032ac:	2180      	movs	r1, #128	; 0x80
 80032ae:	4620      	mov	r0, r4
 80032b0:	f7ff ff74 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 80032b4:	bb58      	cbnz	r0, 800330e <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
      }
      if (pdata8bits == NULL)
 80032b6:	b935      	cbnz	r5, 80032c6 <HAL_UART_Transmit+0x86>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	f838 3b02 	ldrh.w	r3, [r8], #2
 80032be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c2:	8513      	strh	r3, [r2, #40]	; 0x28
 80032c4:	e003      	b.n	80032ce <HAL_UART_Transmit+0x8e>
        pdata16bits++;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80032cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
      }
      huart->TxXferCount--;
 80032ce:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 80032dc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1df      	bne.n	80032a6 <HAL_UART_Transmit+0x66>
        pdata8bits++;
      }
      huart->TxXferCount--;
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032e6:	9600      	str	r6, [sp, #0]
 80032e8:	463b      	mov	r3, r7
 80032ea:	2200      	movs	r2, #0
 80032ec:	2140      	movs	r1, #64	; 0x40
 80032ee:	4620      	mov	r0, r4
 80032f0:	f7ff ff54 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	b960      	cbnz	r0, 8003312 <HAL_UART_Transmit+0xd2>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032f8:	2220      	movs	r2, #32
 80032fa:	67a2      	str	r2, [r4, #120]	; 0x78

    return HAL_OK;
 80032fc:	e00a      	b.n	8003314 <HAL_UART_Transmit+0xd4>
  }
  else
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
 8003300:	e008      	b.n	8003314 <HAL_UART_Transmit+0xd4>
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
  {
    if ((pData == NULL) || (Size == 0U))
    {
      return  HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e006      	b.n	8003314 <HAL_UART_Transmit+0xd4>
 8003306:	2301      	movs	r3, #1
 8003308:	e004      	b.n	8003314 <HAL_UART_Transmit+0xd4>
    }

    __HAL_LOCK(huart);
 800330a:	2302      	movs	r3, #2
 800330c:	e002      	b.n	8003314 <HAL_UART_Transmit+0xd4>

    while (huart->TxXferCount > 0U)
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e000      	b.n	8003314 <HAL_UART_Transmit+0xd4>
      huart->TxXferCount--;
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
    {
      return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003314:	4618      	mov	r0, r3
 8003316:	b002      	add	sp, #8
 8003318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800331c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800331c:	b530      	push	{r4, r5, lr}
 800331e:	b083      	sub	sp, #12
 8003320:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003322:	2300      	movs	r3, #0
 8003324:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003328:	f7fd fcc2 	bl	8000cb0 <HAL_GetTick>
 800332c:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f013 0f08 	tst.w	r3, #8
 8003336:	d00a      	beq.n	800334e <UART_CheckIdleState+0x32>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	4603      	mov	r3, r0
 8003340:	2200      	movs	r2, #0
 8003342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003346:	4620      	mov	r0, r4
 8003348:	f7ff ff28 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 800334c:	b9b8      	cbnz	r0, 800337e <UART_CheckIdleState+0x62>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f013 0f04 	tst.w	r3, #4
 8003356:	d00a      	beq.n	800336e <UART_CheckIdleState+0x52>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	462b      	mov	r3, r5
 8003360:	2200      	movs	r2, #0
 8003362:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003366:	4620      	mov	r0, r4
 8003368:	f7ff ff18 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 800336c:	b948      	cbnz	r0, 8003382 <UART_CheckIdleState+0x66>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800336e:	2320      	movs	r3, #32
 8003370:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003372:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003374:	2000      	movs	r0, #0
 8003376:	6620      	str	r0, [r4, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003378:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74

  return HAL_OK;
 800337c:	e002      	b.n	8003384 <UART_CheckIdleState+0x68>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800337e:	2003      	movs	r0, #3
 8003380:	e000      	b.n	8003384 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003382:	2003      	movs	r0, #3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8003384:	b003      	add	sp, #12
 8003386:	bd30      	pop	{r4, r5, pc}

08003388 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003388:	b358      	cbz	r0, 80033e2 <HAL_UART_Init+0x5a>
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800338a:	b510      	push	{r4, lr}
 800338c:	4604      	mov	r4, r0
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800338e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003390:	b91b      	cbnz	r3, 800339a <HAL_UART_Init+0x12>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003392:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003396:	f7fd fbe9 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800339a:	2324      	movs	r3, #36	; 0x24
 800339c:	67a3      	str	r3, [r4, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800339e:	6822      	ldr	r2, [r4, #0]
 80033a0:	6813      	ldr	r3, [r2, #0]
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033a8:	4620      	mov	r0, r4
 80033aa:	f7ff fd39 	bl	8002e20 <UART_SetConfig>
 80033ae:	2801      	cmp	r0, #1
 80033b0:	d019      	beq.n	80033e6 <HAL_UART_Init+0x5e>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033b4:	b113      	cbz	r3, 80033bc <HAL_UART_Init+0x34>
  {
    UART_AdvFeatureConfig(huart);
 80033b6:	4620      	mov	r0, r4
 80033b8:	f7ff fe8c 	bl	80030d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033bc:	6822      	ldr	r2, [r4, #0]
 80033be:	6853      	ldr	r3, [r2, #4]
 80033c0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80033c4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c6:	6822      	ldr	r2, [r4, #0]
 80033c8:	6893      	ldr	r3, [r2, #8]
 80033ca:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80033ce:	6093      	str	r3, [r2, #8]

  __HAL_UART_ENABLE(huart);
 80033d0:	6822      	ldr	r2, [r4, #0]
 80033d2:	6813      	ldr	r3, [r2, #0]
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6013      	str	r3, [r2, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033da:	4620      	mov	r0, r4
 80033dc:	f7ff ff9e 	bl	800331c <UART_CheckIdleState>
 80033e0:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
  {
    return HAL_ERROR;
 80033e2:	2001      	movs	r0, #1
 80033e4:	4770      	bx	lr

  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 80033e6:	bd10      	pop	{r4, pc}

080033e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop

080033ec <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80033ec:	4a0e      	ldr	r2, [pc, #56]	; (8003428 <SystemInit+0x3c>)
 80033ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80033f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <SystemInit+0x40>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003404:	2100      	movs	r1, #0
 8003406:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800340e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003412:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003414:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003418:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003420:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003422:	6199      	str	r1, [r3, #24]
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	e000ed00 	.word	0xe000ed00
 800342c:	40021000 	.word	0x40021000

08003430 <DTW_counter_init>:
void DTW_counter_init(void)
{
/* Use DTW_CYCCNT counter for timing */
/* CYCCNT counter is in the Cortex-M-series core.  See the following for details 
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0337g/BABJFFGJ.html */
	*(volatile unsigned int*)0xE000EDFC |= 0x01000000; // SCB_DEMCR = 0x01000000;
 8003430:	4a05      	ldr	r2, [pc, #20]	; (8003448 <DTW_counter_init+0x18>)
 8003432:	6813      	ldr	r3, [r2, #0]
 8003434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003438:	6013      	str	r3, [r2, #0]
	*(volatile unsigned int*)0xE0001000 |= 0x1;	// Enable DTW_CYCCNT (Data Watch cycle counter)
 800343a:	4a04      	ldr	r2, [pc, #16]	; (800344c <DTW_counter_init+0x1c>)
 800343c:	6813      	ldr	r3, [r2, #0]
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000edfc 	.word	0xe000edfc
 800344c:	e0001000 	.word	0xe0001000

08003450 <_write>:
#include "stm32l4xx_hal.h"

extern UART_HandleTypeDef huart1;

int _write(int file, char *data, int len)
{
 8003450:	b510      	push	{r4, lr}
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8003452:	3801      	subs	r0, #1
 8003454:	2801      	cmp	r0, #1
 8003456:	d906      	bls.n	8003466 <_write+0x16>
   {
      errno = EBADF;
 8003458:	f000 f8a6 	bl	80035a8 <__errno>
 800345c:	2309      	movs	r3, #9
 800345e:	6003      	str	r3, [r0, #0]
      return -1;
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	bd10      	pop	{r4, pc}
 8003466:	4614      	mov	r4, r2
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
 8003468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800346c:	b292      	uxth	r2, r2
 800346e:	4804      	ldr	r0, [pc, #16]	; (8003480 <_write+0x30>)
 8003470:	f7ff fee6 	bl	8003240 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 8003474:	b108      	cbz	r0, 800347a <_write+0x2a>
 8003476:	2000      	movs	r0, #0
 8003478:	bd10      	pop	{r4, pc}
 800347a:	4620      	mov	r0, r4
 800347c:	bd10      	pop	{r4, pc}
 800347e:	bf00      	nop
 8003480:	20000938 	.word	0x20000938

08003484 <system_reset>:
      0: No system reset request
      1: Asserts a signal to the outer system that requests a reset.
*/
//	SCB_AIRCR = (0x5FA << 16) | SCB_AIRCR_SYSRESETREQ;	// Cause a RESET
      #define SCB_AIRCR 0xE000ED0C
	*(unsigned int*)SCB_AIRCR = (0x5FA << 16) | 0x4;	// Cause a RESET
 8003484:	4a01      	ldr	r2, [pc, #4]	; (800348c <system_reset+0x8>)
 8003486:	4b02      	ldr	r3, [pc, #8]	; (8003490 <system_reset+0xc>)
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e7fe      	b.n	800348a <system_reset+0x6>
 800348c:	05fa0004 	.word	0x05fa0004
 8003490:	e000ed0c 	.word	0xe000ed0c

08003494 <flbblkbuff_init>:
 * ************************************************************************************** */
static void flbblkbuff_init(void)
{

	/* Assure start address for block is on an even boundary */
	flblkbuff.base = (uint8_t*)((uint32_t)(padd) & (flashblocksize - 1));
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <flbblkbuff_init+0x20>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	3a01      	subs	r2, #1
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <flbblkbuff_init+0x24>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	401a      	ands	r2, r3
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <flbblkbuff_init+0x28>)
 80034a2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

	flblkbuff.p = &flblkbuff.fb.u8[0]; // Pointer into flash block
 80034a6:	f8c3 3808 	str.w	r3, [r3, #2056]	; 0x808
	flblkbuff.sw = 0;	// need to write, or erase and write, switch
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8a3 280c 	strh.w	r2, [r3, #2060]	; 0x80c
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	2000000c 	.word	0x2000000c
 80034b8:	20000a44 	.word	0x20000a44
 80034bc:	200000c8 	.word	0x200000c8

080034c0 <canwinch_ldrproto_init>:
 * void canwinch_ldrproto_init(uint32_t iamunitnumber);
 * @brief	: Initialization for loader
 * @param	: Unit number 
 * ************************************************************************************** */
void canwinch_ldrproto_init(uint32_t iamunitnumber)
{
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	4604      	mov	r4, r0
	padd = (uint8_t*)(0x08000000);	// Set to something that doesn't give a bad address error
 80034c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034c8:	4b15      	ldr	r3, [pc, #84]	; (8003520 <canwinch_ldrproto_init+0x60>)
 80034ca:	601a      	str	r2, [r3, #0]

	/* Flash block size */
	flashblocksize = 2048;	// XL series flash block size
 80034cc:	4e15      	ldr	r6, [pc, #84]	; (8003524 <canwinch_ldrproto_init+0x64>)
 80034ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034d2:	6033      	str	r3, [r6, #0]

	/* Highest flash address plus one = lowest + (flash size(kbytes) * 1024)  */
	flash_hi = (uint8_t*)(0x08000000 + (*(uint16_t*)ADDR_FLASH_SIZE << 10) );
 80034d4:	4b14      	ldr	r3, [pc, #80]	; (8003528 <canwinch_ldrproto_init+0x68>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	029b      	lsls	r3, r3, #10
 80034da:	4413      	add	r3, r2
 80034dc:	4d13      	ldr	r5, [pc, #76]	; (800352c <canwinch_ldrproto_init+0x6c>)
 80034de:	602b      	str	r3, [r5, #0]

	flbblkbuff_init(); // Set initial pointer.
 80034e0:	f7ff ffd8 	bl	8003494 <flbblkbuff_init>

printf("FLASH BLK SZE: %dB\n\r",(unsigned int)flashblocksize);
 80034e4:	6831      	ldr	r1, [r6, #0]
 80034e6:	4812      	ldr	r0, [pc, #72]	; (8003530 <canwinch_ldrproto_init+0x70>)
 80034e8:	f000 f892 	bl	8003610 <iprintf>
printf("FLASH HI ADDR: 0x%08X\n\r",(unsigned int)flash_hi);
 80034ec:	6829      	ldr	r1, [r5, #0]
 80034ee:	4811      	ldr	r0, [pc, #68]	; (8003534 <canwinch_ldrproto_init+0x74>)
 80034f0:	f000 f88e 	bl	8003610 <iprintf>

	/* Set fixed part of CAN msgs */
	can_msg_cmd.id = iamunitnumber; // Command
 80034f4:	4f10      	ldr	r7, [pc, #64]	; (8003538 <canwinch_ldrproto_init+0x78>)
 80034f6:	603c      	str	r4, [r7, #0]
	can_msg_rd.id  = iamunitnumber; // Read
 80034f8:	4e10      	ldr	r6, [pc, #64]	; (800353c <canwinch_ldrproto_init+0x7c>)
 80034fa:	6034      	str	r4, [r6, #0]
	can_msg_wr.id  = iamunitnumber; // Write
 80034fc:	4d10      	ldr	r5, [pc, #64]	; (8003540 <canwinch_ldrproto_init+0x80>)
 80034fe:	602c      	str	r4, [r5, #0]

printf("CAN ID's\n\r");
 8003500:	4810      	ldr	r0, [pc, #64]	; (8003544 <canwinch_ldrproto_init+0x84>)
 8003502:	f000 f885 	bl	8003610 <iprintf>
printf( "CMD: %08X\n\r",(unsigned int)can_msg_cmd.id);
 8003506:	6839      	ldr	r1, [r7, #0]
 8003508:	480f      	ldr	r0, [pc, #60]	; (8003548 <canwinch_ldrproto_init+0x88>)
 800350a:	f000 f881 	bl	8003610 <iprintf>
printf( "RD : %08X\n\r",(unsigned int)can_msg_rd.id);
 800350e:	6831      	ldr	r1, [r6, #0]
 8003510:	480e      	ldr	r0, [pc, #56]	; (800354c <canwinch_ldrproto_init+0x8c>)
 8003512:	f000 f87d 	bl	8003610 <iprintf>
printf( "WR : %08X\n\r",(unsigned int)can_msg_wr.id);
 8003516:	6829      	ldr	r1, [r5, #0]
 8003518:	480d      	ldr	r0, [pc, #52]	; (8003550 <canwinch_ldrproto_init+0x90>)
 800351a:	f000 f879 	bl	8003610 <iprintf>
 800351e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003520:	20000a44 	.word	0x20000a44
 8003524:	2000000c 	.word	0x2000000c
 8003528:	1fff75e0 	.word	0x1fff75e0
 800352c:	20000a4c 	.word	0x20000a4c
 8003530:	08004788 	.word	0x08004788
 8003534:	080047a0 	.word	0x080047a0
 8003538:	20000098 	.word	0x20000098
 800353c:	200000b8 	.word	0x200000b8
 8003540:	200000a8 	.word	0x200000a8
 8003544:	080047b8 	.word	0x080047b8
 8003548:	080047c4 	.word	0x080047c4
 800354c:	080047d0 	.word	0x080047d0
 8003550:	080047dc 	.word	0x080047dc

08003554 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800358c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003558:	f7ff ff48 	bl	80033ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800355c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800355e:	e003      	b.n	8003568 <LoopCopyDataInit>

08003560 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003562:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003564:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003566:	3104      	adds	r1, #4

08003568 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003568:	480a      	ldr	r0, [pc, #40]	; (8003594 <LoopForever+0xa>)
	ldr	r3, =_edata
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <LoopForever+0xe>)
	adds	r2, r0, r1
 800356c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800356e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003570:	d3f6      	bcc.n	8003560 <CopyDataInit>
	ldr	r2, =_sbss
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003574:	e002      	b.n	800357c <LoopFillZerobss>

08003576 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003576:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003578:	f842 3b04 	str.w	r3, [r2], #4

0800357c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800357c:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <LoopForever+0x16>)
	cmp	r2, r3
 800357e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003580:	d3f9      	bcc.n	8003576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003582:	f000 f817 	bl	80035b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003586:	f7fd f935 	bl	80007f4 <main>

0800358a <LoopForever>:

LoopForever:
    b LoopForever
 800358a:	e7fe      	b.n	800358a <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800358c:	2000c000 	.word	0x2000c000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8003590:	08004a78 	.word	0x08004a78
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003594:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003598:	20000078 	.word	0x20000078
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800359c:	20000078 	.word	0x20000078
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80035a0:	20000a54 	.word	0x20000a54

080035a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035a4:	e7fe      	b.n	80035a4 <ADC1_IRQHandler>
	...

080035a8 <__errno>:
 80035a8:	4b01      	ldr	r3, [pc, #4]	; (80035b0 <__errno+0x8>)
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000070 	.word	0x20000070

080035b4 <__libc_init_array>:
 80035b4:	b570      	push	{r4, r5, r6, lr}
 80035b6:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <__libc_init_array+0x3c>)
 80035b8:	4c0e      	ldr	r4, [pc, #56]	; (80035f4 <__libc_init_array+0x40>)
 80035ba:	1ae4      	subs	r4, r4, r3
 80035bc:	10a4      	asrs	r4, r4, #2
 80035be:	2500      	movs	r5, #0
 80035c0:	461e      	mov	r6, r3
 80035c2:	42a5      	cmp	r5, r4
 80035c4:	d004      	beq.n	80035d0 <__libc_init_array+0x1c>
 80035c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035ca:	4798      	blx	r3
 80035cc:	3501      	adds	r5, #1
 80035ce:	e7f8      	b.n	80035c2 <__libc_init_array+0xe>
 80035d0:	f000 ff56 	bl	8004480 <_init>
 80035d4:	4c08      	ldr	r4, [pc, #32]	; (80035f8 <__libc_init_array+0x44>)
 80035d6:	4b09      	ldr	r3, [pc, #36]	; (80035fc <__libc_init_array+0x48>)
 80035d8:	1ae4      	subs	r4, r4, r3
 80035da:	10a4      	asrs	r4, r4, #2
 80035dc:	2500      	movs	r5, #0
 80035de:	461e      	mov	r6, r3
 80035e0:	42a5      	cmp	r5, r4
 80035e2:	d004      	beq.n	80035ee <__libc_init_array+0x3a>
 80035e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035e8:	4798      	blx	r3
 80035ea:	3501      	adds	r5, #1
 80035ec:	e7f8      	b.n	80035e0 <__libc_init_array+0x2c>
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	08004a68 	.word	0x08004a68
 80035f4:	08004a68 	.word	0x08004a68
 80035f8:	08004a6c 	.word	0x08004a6c
 80035fc:	08004a68 	.word	0x08004a68

08003600 <memset>:
 8003600:	4402      	add	r2, r0
 8003602:	4603      	mov	r3, r0
 8003604:	4293      	cmp	r3, r2
 8003606:	d002      	beq.n	800360e <memset+0xe>
 8003608:	f803 1b01 	strb.w	r1, [r3], #1
 800360c:	e7fa      	b.n	8003604 <memset+0x4>
 800360e:	4770      	bx	lr

08003610 <iprintf>:
 8003610:	b40f      	push	{r0, r1, r2, r3}
 8003612:	4b0a      	ldr	r3, [pc, #40]	; (800363c <iprintf+0x2c>)
 8003614:	b513      	push	{r0, r1, r4, lr}
 8003616:	681c      	ldr	r4, [r3, #0]
 8003618:	b124      	cbz	r4, 8003624 <iprintf+0x14>
 800361a:	69a3      	ldr	r3, [r4, #24]
 800361c:	b913      	cbnz	r3, 8003624 <iprintf+0x14>
 800361e:	4620      	mov	r0, r4
 8003620:	f000 f84e 	bl	80036c0 <__sinit>
 8003624:	ab05      	add	r3, sp, #20
 8003626:	9a04      	ldr	r2, [sp, #16]
 8003628:	68a1      	ldr	r1, [r4, #8]
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	4620      	mov	r0, r4
 800362e:	f000 f959 	bl	80038e4 <_vfiprintf_r>
 8003632:	b002      	add	sp, #8
 8003634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003638:	b004      	add	sp, #16
 800363a:	4770      	bx	lr
 800363c:	20000070 	.word	0x20000070

08003640 <_cleanup_r>:
 8003640:	4901      	ldr	r1, [pc, #4]	; (8003648 <_cleanup_r+0x8>)
 8003642:	f000 b8a9 	b.w	8003798 <_fwalk_reent>
 8003646:	bf00      	nop
 8003648:	080041d5 	.word	0x080041d5

0800364c <std.isra.0>:
 800364c:	2300      	movs	r3, #0
 800364e:	b510      	push	{r4, lr}
 8003650:	4604      	mov	r4, r0
 8003652:	6003      	str	r3, [r0, #0]
 8003654:	6043      	str	r3, [r0, #4]
 8003656:	6083      	str	r3, [r0, #8]
 8003658:	8181      	strh	r1, [r0, #12]
 800365a:	6643      	str	r3, [r0, #100]	; 0x64
 800365c:	81c2      	strh	r2, [r0, #14]
 800365e:	6103      	str	r3, [r0, #16]
 8003660:	6143      	str	r3, [r0, #20]
 8003662:	6183      	str	r3, [r0, #24]
 8003664:	4619      	mov	r1, r3
 8003666:	2208      	movs	r2, #8
 8003668:	305c      	adds	r0, #92	; 0x5c
 800366a:	f7ff ffc9 	bl	8003600 <memset>
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <std.isra.0+0x38>)
 8003670:	6263      	str	r3, [r4, #36]	; 0x24
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <std.isra.0+0x3c>)
 8003674:	62a3      	str	r3, [r4, #40]	; 0x28
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <std.isra.0+0x40>)
 8003678:	62e3      	str	r3, [r4, #44]	; 0x2c
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <std.isra.0+0x44>)
 800367c:	6224      	str	r4, [r4, #32]
 800367e:	6323      	str	r3, [r4, #48]	; 0x30
 8003680:	bd10      	pop	{r4, pc}
 8003682:	bf00      	nop
 8003684:	08003e75 	.word	0x08003e75
 8003688:	08003e97 	.word	0x08003e97
 800368c:	08003ecf 	.word	0x08003ecf
 8003690:	08003ef3 	.word	0x08003ef3

08003694 <__sfmoreglue>:
 8003694:	b570      	push	{r4, r5, r6, lr}
 8003696:	2368      	movs	r3, #104	; 0x68
 8003698:	1e4d      	subs	r5, r1, #1
 800369a:	435d      	muls	r5, r3
 800369c:	460e      	mov	r6, r1
 800369e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80036a2:	f000 f897 	bl	80037d4 <_malloc_r>
 80036a6:	4604      	mov	r4, r0
 80036a8:	b140      	cbz	r0, 80036bc <__sfmoreglue+0x28>
 80036aa:	2100      	movs	r1, #0
 80036ac:	e880 0042 	stmia.w	r0, {r1, r6}
 80036b0:	300c      	adds	r0, #12
 80036b2:	60a0      	str	r0, [r4, #8]
 80036b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036b8:	f7ff ffa2 	bl	8003600 <memset>
 80036bc:	4620      	mov	r0, r4
 80036be:	bd70      	pop	{r4, r5, r6, pc}

080036c0 <__sinit>:
 80036c0:	6983      	ldr	r3, [r0, #24]
 80036c2:	b510      	push	{r4, lr}
 80036c4:	4604      	mov	r4, r0
 80036c6:	bb33      	cbnz	r3, 8003716 <__sinit+0x56>
 80036c8:	6483      	str	r3, [r0, #72]	; 0x48
 80036ca:	64c3      	str	r3, [r0, #76]	; 0x4c
 80036cc:	6503      	str	r3, [r0, #80]	; 0x50
 80036ce:	4b12      	ldr	r3, [pc, #72]	; (8003718 <__sinit+0x58>)
 80036d0:	4a12      	ldr	r2, [pc, #72]	; (800371c <__sinit+0x5c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6282      	str	r2, [r0, #40]	; 0x28
 80036d6:	4298      	cmp	r0, r3
 80036d8:	bf04      	itt	eq
 80036da:	2301      	moveq	r3, #1
 80036dc:	6183      	streq	r3, [r0, #24]
 80036de:	f000 f81f 	bl	8003720 <__sfp>
 80036e2:	6060      	str	r0, [r4, #4]
 80036e4:	4620      	mov	r0, r4
 80036e6:	f000 f81b 	bl	8003720 <__sfp>
 80036ea:	60a0      	str	r0, [r4, #8]
 80036ec:	4620      	mov	r0, r4
 80036ee:	f000 f817 	bl	8003720 <__sfp>
 80036f2:	2200      	movs	r2, #0
 80036f4:	60e0      	str	r0, [r4, #12]
 80036f6:	2104      	movs	r1, #4
 80036f8:	6860      	ldr	r0, [r4, #4]
 80036fa:	f7ff ffa7 	bl	800364c <std.isra.0>
 80036fe:	2201      	movs	r2, #1
 8003700:	2109      	movs	r1, #9
 8003702:	68a0      	ldr	r0, [r4, #8]
 8003704:	f7ff ffa2 	bl	800364c <std.isra.0>
 8003708:	2202      	movs	r2, #2
 800370a:	2112      	movs	r1, #18
 800370c:	68e0      	ldr	r0, [r4, #12]
 800370e:	f7ff ff9d 	bl	800364c <std.isra.0>
 8003712:	2301      	movs	r3, #1
 8003714:	61a3      	str	r3, [r4, #24]
 8003716:	bd10      	pop	{r4, pc}
 8003718:	080049c8 	.word	0x080049c8
 800371c:	08003641 	.word	0x08003641

08003720 <__sfp>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <__sfp+0x74>)
 8003724:	681e      	ldr	r6, [r3, #0]
 8003726:	69b3      	ldr	r3, [r6, #24]
 8003728:	4607      	mov	r7, r0
 800372a:	b913      	cbnz	r3, 8003732 <__sfp+0x12>
 800372c:	4630      	mov	r0, r6
 800372e:	f7ff ffc7 	bl	80036c0 <__sinit>
 8003732:	3648      	adds	r6, #72	; 0x48
 8003734:	68b4      	ldr	r4, [r6, #8]
 8003736:	6873      	ldr	r3, [r6, #4]
 8003738:	3b01      	subs	r3, #1
 800373a:	d404      	bmi.n	8003746 <__sfp+0x26>
 800373c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003740:	b17d      	cbz	r5, 8003762 <__sfp+0x42>
 8003742:	3468      	adds	r4, #104	; 0x68
 8003744:	e7f8      	b.n	8003738 <__sfp+0x18>
 8003746:	6833      	ldr	r3, [r6, #0]
 8003748:	b10b      	cbz	r3, 800374e <__sfp+0x2e>
 800374a:	6836      	ldr	r6, [r6, #0]
 800374c:	e7f2      	b.n	8003734 <__sfp+0x14>
 800374e:	2104      	movs	r1, #4
 8003750:	4638      	mov	r0, r7
 8003752:	f7ff ff9f 	bl	8003694 <__sfmoreglue>
 8003756:	6030      	str	r0, [r6, #0]
 8003758:	2800      	cmp	r0, #0
 800375a:	d1f6      	bne.n	800374a <__sfp+0x2a>
 800375c:	230c      	movs	r3, #12
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003766:	81e3      	strh	r3, [r4, #14]
 8003768:	2301      	movs	r3, #1
 800376a:	81a3      	strh	r3, [r4, #12]
 800376c:	6665      	str	r5, [r4, #100]	; 0x64
 800376e:	6025      	str	r5, [r4, #0]
 8003770:	60a5      	str	r5, [r4, #8]
 8003772:	6065      	str	r5, [r4, #4]
 8003774:	6125      	str	r5, [r4, #16]
 8003776:	6165      	str	r5, [r4, #20]
 8003778:	61a5      	str	r5, [r4, #24]
 800377a:	2208      	movs	r2, #8
 800377c:	4629      	mov	r1, r5
 800377e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003782:	f7ff ff3d 	bl	8003600 <memset>
 8003786:	6365      	str	r5, [r4, #52]	; 0x34
 8003788:	63a5      	str	r5, [r4, #56]	; 0x38
 800378a:	64a5      	str	r5, [r4, #72]	; 0x48
 800378c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800378e:	4620      	mov	r0, r4
 8003790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003792:	bf00      	nop
 8003794:	080049c8 	.word	0x080049c8

08003798 <_fwalk_reent>:
 8003798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800379c:	4680      	mov	r8, r0
 800379e:	4689      	mov	r9, r1
 80037a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037a4:	2600      	movs	r6, #0
 80037a6:	b194      	cbz	r4, 80037ce <_fwalk_reent+0x36>
 80037a8:	68a5      	ldr	r5, [r4, #8]
 80037aa:	6867      	ldr	r7, [r4, #4]
 80037ac:	3f01      	subs	r7, #1
 80037ae:	d40c      	bmi.n	80037ca <_fwalk_reent+0x32>
 80037b0:	89ab      	ldrh	r3, [r5, #12]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d907      	bls.n	80037c6 <_fwalk_reent+0x2e>
 80037b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037ba:	3301      	adds	r3, #1
 80037bc:	d003      	beq.n	80037c6 <_fwalk_reent+0x2e>
 80037be:	4629      	mov	r1, r5
 80037c0:	4640      	mov	r0, r8
 80037c2:	47c8      	blx	r9
 80037c4:	4306      	orrs	r6, r0
 80037c6:	3568      	adds	r5, #104	; 0x68
 80037c8:	e7f0      	b.n	80037ac <_fwalk_reent+0x14>
 80037ca:	6824      	ldr	r4, [r4, #0]
 80037cc:	e7eb      	b.n	80037a6 <_fwalk_reent+0xe>
 80037ce:	4630      	mov	r0, r6
 80037d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080037d4 <_malloc_r>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	1ccd      	adds	r5, r1, #3
 80037d8:	f025 0503 	bic.w	r5, r5, #3
 80037dc:	3508      	adds	r5, #8
 80037de:	2d0c      	cmp	r5, #12
 80037e0:	bf38      	it	cc
 80037e2:	250c      	movcc	r5, #12
 80037e4:	2d00      	cmp	r5, #0
 80037e6:	4606      	mov	r6, r0
 80037e8:	db01      	blt.n	80037ee <_malloc_r+0x1a>
 80037ea:	42a9      	cmp	r1, r5
 80037ec:	d902      	bls.n	80037f4 <_malloc_r+0x20>
 80037ee:	230c      	movs	r3, #12
 80037f0:	6033      	str	r3, [r6, #0]
 80037f2:	e046      	b.n	8003882 <_malloc_r+0xae>
 80037f4:	f000 fd8a 	bl	800430c <__malloc_lock>
 80037f8:	4b23      	ldr	r3, [pc, #140]	; (8003888 <_malloc_r+0xb4>)
 80037fa:	681c      	ldr	r4, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	4621      	mov	r1, r4
 8003800:	b1a1      	cbz	r1, 800382c <_malloc_r+0x58>
 8003802:	680b      	ldr	r3, [r1, #0]
 8003804:	1b5b      	subs	r3, r3, r5
 8003806:	d40e      	bmi.n	8003826 <_malloc_r+0x52>
 8003808:	2b0b      	cmp	r3, #11
 800380a:	d903      	bls.n	8003814 <_malloc_r+0x40>
 800380c:	600b      	str	r3, [r1, #0]
 800380e:	18cc      	adds	r4, r1, r3
 8003810:	50cd      	str	r5, [r1, r3]
 8003812:	e01e      	b.n	8003852 <_malloc_r+0x7e>
 8003814:	428c      	cmp	r4, r1
 8003816:	bf0d      	iteet	eq
 8003818:	6863      	ldreq	r3, [r4, #4]
 800381a:	684b      	ldrne	r3, [r1, #4]
 800381c:	6063      	strne	r3, [r4, #4]
 800381e:	6013      	streq	r3, [r2, #0]
 8003820:	bf18      	it	ne
 8003822:	460c      	movne	r4, r1
 8003824:	e015      	b.n	8003852 <_malloc_r+0x7e>
 8003826:	460c      	mov	r4, r1
 8003828:	6849      	ldr	r1, [r1, #4]
 800382a:	e7e9      	b.n	8003800 <_malloc_r+0x2c>
 800382c:	4c17      	ldr	r4, [pc, #92]	; (800388c <_malloc_r+0xb8>)
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	b91b      	cbnz	r3, 800383a <_malloc_r+0x66>
 8003832:	4630      	mov	r0, r6
 8003834:	f000 fb0e 	bl	8003e54 <_sbrk_r>
 8003838:	6020      	str	r0, [r4, #0]
 800383a:	4629      	mov	r1, r5
 800383c:	4630      	mov	r0, r6
 800383e:	f000 fb09 	bl	8003e54 <_sbrk_r>
 8003842:	1c43      	adds	r3, r0, #1
 8003844:	d018      	beq.n	8003878 <_malloc_r+0xa4>
 8003846:	1cc4      	adds	r4, r0, #3
 8003848:	f024 0403 	bic.w	r4, r4, #3
 800384c:	42a0      	cmp	r0, r4
 800384e:	d10d      	bne.n	800386c <_malloc_r+0x98>
 8003850:	6025      	str	r5, [r4, #0]
 8003852:	4630      	mov	r0, r6
 8003854:	f000 fd5b 	bl	800430e <__malloc_unlock>
 8003858:	f104 000b 	add.w	r0, r4, #11
 800385c:	1d23      	adds	r3, r4, #4
 800385e:	f020 0007 	bic.w	r0, r0, #7
 8003862:	1ac3      	subs	r3, r0, r3
 8003864:	d00e      	beq.n	8003884 <_malloc_r+0xb0>
 8003866:	425a      	negs	r2, r3
 8003868:	50e2      	str	r2, [r4, r3]
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	1a21      	subs	r1, r4, r0
 800386e:	4630      	mov	r0, r6
 8003870:	f000 faf0 	bl	8003e54 <_sbrk_r>
 8003874:	3001      	adds	r0, #1
 8003876:	d1eb      	bne.n	8003850 <_malloc_r+0x7c>
 8003878:	230c      	movs	r3, #12
 800387a:	6033      	str	r3, [r6, #0]
 800387c:	4630      	mov	r0, r6
 800387e:	f000 fd46 	bl	800430e <__malloc_unlock>
 8003882:	2000      	movs	r0, #0
 8003884:	bd70      	pop	{r4, r5, r6, pc}
 8003886:	bf00      	nop
 8003888:	200008e0 	.word	0x200008e0
 800388c:	200008dc 	.word	0x200008dc

08003890 <__sfputc_r>:
 8003890:	6893      	ldr	r3, [r2, #8]
 8003892:	3b01      	subs	r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	b410      	push	{r4}
 8003898:	6093      	str	r3, [r2, #8]
 800389a:	da09      	bge.n	80038b0 <__sfputc_r+0x20>
 800389c:	6994      	ldr	r4, [r2, #24]
 800389e:	42a3      	cmp	r3, r4
 80038a0:	db02      	blt.n	80038a8 <__sfputc_r+0x18>
 80038a2:	b2cb      	uxtb	r3, r1
 80038a4:	2b0a      	cmp	r3, #10
 80038a6:	d103      	bne.n	80038b0 <__sfputc_r+0x20>
 80038a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038ac:	f000 bb26 	b.w	8003efc <__swbuf_r>
 80038b0:	6813      	ldr	r3, [r2, #0]
 80038b2:	1c58      	adds	r0, r3, #1
 80038b4:	6010      	str	r0, [r2, #0]
 80038b6:	7019      	strb	r1, [r3, #0]
 80038b8:	b2c8      	uxtb	r0, r1
 80038ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <__sfputs_r>:
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	4606      	mov	r6, r0
 80038c4:	460f      	mov	r7, r1
 80038c6:	4614      	mov	r4, r2
 80038c8:	18d5      	adds	r5, r2, r3
 80038ca:	42ac      	cmp	r4, r5
 80038cc:	d008      	beq.n	80038e0 <__sfputs_r+0x20>
 80038ce:	463a      	mov	r2, r7
 80038d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038d4:	4630      	mov	r0, r6
 80038d6:	f7ff ffdb 	bl	8003890 <__sfputc_r>
 80038da:	1c43      	adds	r3, r0, #1
 80038dc:	d1f5      	bne.n	80038ca <__sfputs_r+0xa>
 80038de:	e000      	b.n	80038e2 <__sfputs_r+0x22>
 80038e0:	2000      	movs	r0, #0
 80038e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080038e4 <_vfiprintf_r>:
 80038e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e8:	b09d      	sub	sp, #116	; 0x74
 80038ea:	460c      	mov	r4, r1
 80038ec:	4617      	mov	r7, r2
 80038ee:	9303      	str	r3, [sp, #12]
 80038f0:	4606      	mov	r6, r0
 80038f2:	b118      	cbz	r0, 80038fc <_vfiprintf_r+0x18>
 80038f4:	6983      	ldr	r3, [r0, #24]
 80038f6:	b90b      	cbnz	r3, 80038fc <_vfiprintf_r+0x18>
 80038f8:	f7ff fee2 	bl	80036c0 <__sinit>
 80038fc:	4b7f      	ldr	r3, [pc, #508]	; (8003afc <_vfiprintf_r+0x218>)
 80038fe:	429c      	cmp	r4, r3
 8003900:	d101      	bne.n	8003906 <_vfiprintf_r+0x22>
 8003902:	6874      	ldr	r4, [r6, #4]
 8003904:	e008      	b.n	8003918 <_vfiprintf_r+0x34>
 8003906:	4b7e      	ldr	r3, [pc, #504]	; (8003b00 <_vfiprintf_r+0x21c>)
 8003908:	429c      	cmp	r4, r3
 800390a:	d101      	bne.n	8003910 <_vfiprintf_r+0x2c>
 800390c:	68b4      	ldr	r4, [r6, #8]
 800390e:	e003      	b.n	8003918 <_vfiprintf_r+0x34>
 8003910:	4b7c      	ldr	r3, [pc, #496]	; (8003b04 <_vfiprintf_r+0x220>)
 8003912:	429c      	cmp	r4, r3
 8003914:	bf08      	it	eq
 8003916:	68f4      	ldreq	r4, [r6, #12]
 8003918:	89a3      	ldrh	r3, [r4, #12]
 800391a:	0718      	lsls	r0, r3, #28
 800391c:	d50c      	bpl.n	8003938 <_vfiprintf_r+0x54>
 800391e:	6923      	ldr	r3, [r4, #16]
 8003920:	b153      	cbz	r3, 8003938 <_vfiprintf_r+0x54>
 8003922:	2300      	movs	r3, #0
 8003924:	9309      	str	r3, [sp, #36]	; 0x24
 8003926:	2320      	movs	r3, #32
 8003928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800392c:	2330      	movs	r3, #48	; 0x30
 800392e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003932:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 8003b08 <_vfiprintf_r+0x224>
 8003936:	e044      	b.n	80039c2 <_vfiprintf_r+0xde>
 8003938:	4621      	mov	r1, r4
 800393a:	4630      	mov	r0, r6
 800393c:	f000 fb44 	bl	8003fc8 <__swsetup_r>
 8003940:	2800      	cmp	r0, #0
 8003942:	d0ee      	beq.n	8003922 <_vfiprintf_r+0x3e>
 8003944:	f04f 30ff 	mov.w	r0, #4294967295
 8003948:	e0d5      	b.n	8003af6 <_vfiprintf_r+0x212>
 800394a:	9a03      	ldr	r2, [sp, #12]
 800394c:	1d11      	adds	r1, r2, #4
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	9103      	str	r1, [sp, #12]
 8003952:	2a00      	cmp	r2, #0
 8003954:	f280 808c 	bge.w	8003a70 <_vfiprintf_r+0x18c>
 8003958:	4252      	negs	r2, r2
 800395a:	f043 0002 	orr.w	r0, r3, #2
 800395e:	9207      	str	r2, [sp, #28]
 8003960:	9004      	str	r0, [sp, #16]
 8003962:	f898 3000 	ldrb.w	r3, [r8]
 8003966:	2b2e      	cmp	r3, #46	; 0x2e
 8003968:	f000 8084 	beq.w	8003a74 <_vfiprintf_r+0x190>
 800396c:	2203      	movs	r2, #3
 800396e:	f898 1000 	ldrb.w	r1, [r8]
 8003972:	4865      	ldr	r0, [pc, #404]	; (8003b08 <_vfiprintf_r+0x224>)
 8003974:	f7fc fc3c 	bl	80001f0 <memchr>
 8003978:	b148      	cbz	r0, 800398e <_vfiprintf_r+0xaa>
 800397a:	2340      	movs	r3, #64	; 0x40
 800397c:	ebcb 0000 	rsb	r0, fp, r0
 8003980:	fa03 f000 	lsl.w	r0, r3, r0
 8003984:	9b04      	ldr	r3, [sp, #16]
 8003986:	4318      	orrs	r0, r3
 8003988:	9004      	str	r0, [sp, #16]
 800398a:	f108 0801 	add.w	r8, r8, #1
 800398e:	f898 1000 	ldrb.w	r1, [r8]
 8003992:	485e      	ldr	r0, [pc, #376]	; (8003b0c <_vfiprintf_r+0x228>)
 8003994:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003998:	2206      	movs	r2, #6
 800399a:	f108 0701 	add.w	r7, r8, #1
 800399e:	f7fc fc27 	bl	80001f0 <memchr>
 80039a2:	2800      	cmp	r0, #0
 80039a4:	f000 8095 	beq.w	8003ad2 <_vfiprintf_r+0x1ee>
 80039a8:	4b59      	ldr	r3, [pc, #356]	; (8003b10 <_vfiprintf_r+0x22c>)
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f040 8088 	bne.w	8003ac0 <_vfiprintf_r+0x1dc>
 80039b0:	9b03      	ldr	r3, [sp, #12]
 80039b2:	3307      	adds	r3, #7
 80039b4:	f023 0307 	bic.w	r3, r3, #7
 80039b8:	3308      	adds	r3, #8
 80039ba:	9303      	str	r3, [sp, #12]
 80039bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039be:	4453      	add	r3, sl
 80039c0:	9309      	str	r3, [sp, #36]	; 0x24
 80039c2:	46b8      	mov	r8, r7
 80039c4:	4645      	mov	r5, r8
 80039c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80039ca:	b91b      	cbnz	r3, 80039d4 <_vfiprintf_r+0xf0>
 80039cc:	ebb8 0907 	subs.w	r9, r8, r7
 80039d0:	d00f      	beq.n	80039f2 <_vfiprintf_r+0x10e>
 80039d2:	e003      	b.n	80039dc <_vfiprintf_r+0xf8>
 80039d4:	2b25      	cmp	r3, #37	; 0x25
 80039d6:	d0f9      	beq.n	80039cc <_vfiprintf_r+0xe8>
 80039d8:	46a8      	mov	r8, r5
 80039da:	e7f3      	b.n	80039c4 <_vfiprintf_r+0xe0>
 80039dc:	464b      	mov	r3, r9
 80039de:	463a      	mov	r2, r7
 80039e0:	4621      	mov	r1, r4
 80039e2:	4630      	mov	r0, r6
 80039e4:	f7ff ff6c 	bl	80038c0 <__sfputs_r>
 80039e8:	3001      	adds	r0, #1
 80039ea:	d07f      	beq.n	8003aec <_vfiprintf_r+0x208>
 80039ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ee:	444b      	add	r3, r9
 80039f0:	9309      	str	r3, [sp, #36]	; 0x24
 80039f2:	f898 3000 	ldrb.w	r3, [r8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d078      	beq.n	8003aec <_vfiprintf_r+0x208>
 80039fa:	2300      	movs	r3, #0
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003a00:	9304      	str	r3, [sp, #16]
 8003a02:	9307      	str	r3, [sp, #28]
 8003a04:	9205      	str	r2, [sp, #20]
 8003a06:	9306      	str	r3, [sp, #24]
 8003a08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a0c:	931a      	str	r3, [sp, #104]	; 0x68
 8003a0e:	2701      	movs	r7, #1
 8003a10:	2205      	movs	r2, #5
 8003a12:	7829      	ldrb	r1, [r5, #0]
 8003a14:	483f      	ldr	r0, [pc, #252]	; (8003b14 <_vfiprintf_r+0x230>)
 8003a16:	f7fc fbeb 	bl	80001f0 <memchr>
 8003a1a:	f105 0801 	add.w	r8, r5, #1
 8003a1e:	9b04      	ldr	r3, [sp, #16]
 8003a20:	b138      	cbz	r0, 8003a32 <_vfiprintf_r+0x14e>
 8003a22:	4a3c      	ldr	r2, [pc, #240]	; (8003b14 <_vfiprintf_r+0x230>)
 8003a24:	1a80      	subs	r0, r0, r2
 8003a26:	fa07 f000 	lsl.w	r0, r7, r0
 8003a2a:	4318      	orrs	r0, r3
 8003a2c:	9004      	str	r0, [sp, #16]
 8003a2e:	4645      	mov	r5, r8
 8003a30:	e7ee      	b.n	8003a10 <_vfiprintf_r+0x12c>
 8003a32:	06d9      	lsls	r1, r3, #27
 8003a34:	bf44      	itt	mi
 8003a36:	2220      	movmi	r2, #32
 8003a38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a3c:	071a      	lsls	r2, r3, #28
 8003a3e:	bf44      	itt	mi
 8003a40:	222b      	movmi	r2, #43	; 0x2b
 8003a42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a46:	782a      	ldrb	r2, [r5, #0]
 8003a48:	2a2a      	cmp	r2, #42	; 0x2a
 8003a4a:	f43f af7e 	beq.w	800394a <_vfiprintf_r+0x66>
 8003a4e:	9a07      	ldr	r2, [sp, #28]
 8003a50:	2100      	movs	r1, #0
 8003a52:	200a      	movs	r0, #10
 8003a54:	46a8      	mov	r8, r5
 8003a56:	3501      	adds	r5, #1
 8003a58:	f898 3000 	ldrb.w	r3, [r8]
 8003a5c:	3b30      	subs	r3, #48	; 0x30
 8003a5e:	2b09      	cmp	r3, #9
 8003a60:	d803      	bhi.n	8003a6a <_vfiprintf_r+0x186>
 8003a62:	fb00 3202 	mla	r2, r0, r2, r3
 8003a66:	2101      	movs	r1, #1
 8003a68:	e7f4      	b.n	8003a54 <_vfiprintf_r+0x170>
 8003a6a:	2900      	cmp	r1, #0
 8003a6c:	f43f af79 	beq.w	8003962 <_vfiprintf_r+0x7e>
 8003a70:	9207      	str	r2, [sp, #28]
 8003a72:	e776      	b.n	8003962 <_vfiprintf_r+0x7e>
 8003a74:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003a78:	2b2a      	cmp	r3, #42	; 0x2a
 8003a7a:	d10b      	bne.n	8003a94 <_vfiprintf_r+0x1b0>
 8003a7c:	9b03      	ldr	r3, [sp, #12]
 8003a7e:	1d1a      	adds	r2, r3, #4
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	9203      	str	r2, [sp, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bfb8      	it	lt
 8003a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a8c:	f108 0802 	add.w	r8, r8, #2
 8003a90:	9305      	str	r3, [sp, #20]
 8003a92:	e76b      	b.n	800396c <_vfiprintf_r+0x88>
 8003a94:	2300      	movs	r3, #0
 8003a96:	9305      	str	r3, [sp, #20]
 8003a98:	f108 0001 	add.w	r0, r8, #1
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	250a      	movs	r5, #10
 8003aa0:	4680      	mov	r8, r0
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	f898 2000 	ldrb.w	r2, [r8]
 8003aa8:	3a30      	subs	r2, #48	; 0x30
 8003aaa:	2a09      	cmp	r2, #9
 8003aac:	d803      	bhi.n	8003ab6 <_vfiprintf_r+0x1d2>
 8003aae:	fb05 2101 	mla	r1, r5, r1, r2
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e7f4      	b.n	8003aa0 <_vfiprintf_r+0x1bc>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f43f af58 	beq.w	800396c <_vfiprintf_r+0x88>
 8003abc:	9105      	str	r1, [sp, #20]
 8003abe:	e755      	b.n	800396c <_vfiprintf_r+0x88>
 8003ac0:	ab03      	add	r3, sp, #12
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	4622      	mov	r2, r4
 8003ac6:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <_vfiprintf_r+0x234>)
 8003ac8:	a904      	add	r1, sp, #16
 8003aca:	4630      	mov	r0, r6
 8003acc:	f3af 8000 	nop.w
 8003ad0:	e007      	b.n	8003ae2 <_vfiprintf_r+0x1fe>
 8003ad2:	ab03      	add	r3, sp, #12
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <_vfiprintf_r+0x234>)
 8003ada:	a904      	add	r1, sp, #16
 8003adc:	4630      	mov	r0, r6
 8003ade:	f000 f893 	bl	8003c08 <_printf_i>
 8003ae2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ae6:	4682      	mov	sl, r0
 8003ae8:	f47f af68 	bne.w	80039bc <_vfiprintf_r+0xd8>
 8003aec:	89a3      	ldrh	r3, [r4, #12]
 8003aee:	065b      	lsls	r3, r3, #25
 8003af0:	f53f af28 	bmi.w	8003944 <_vfiprintf_r+0x60>
 8003af4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003af6:	b01d      	add	sp, #116	; 0x74
 8003af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003afc:	080049cc 	.word	0x080049cc
 8003b00:	080049ec 	.word	0x080049ec
 8003b04:	08004a0c 	.word	0x08004a0c
 8003b08:	08004a32 	.word	0x08004a32
 8003b0c:	08004a36 	.word	0x08004a36
 8003b10:	00000000 	.word	0x00000000
 8003b14:	08004a2c 	.word	0x08004a2c
 8003b18:	080038c1 	.word	0x080038c1

08003b1c <_printf_common>:
 8003b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b20:	4691      	mov	r9, r2
 8003b22:	461f      	mov	r7, r3
 8003b24:	690a      	ldr	r2, [r1, #16]
 8003b26:	688b      	ldr	r3, [r1, #8]
 8003b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	bfb8      	it	lt
 8003b30:	4613      	movlt	r3, r2
 8003b32:	f8c9 3000 	str.w	r3, [r9]
 8003b36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	b112      	cbz	r2, 8003b46 <_printf_common+0x2a>
 8003b40:	3301      	adds	r3, #1
 8003b42:	f8c9 3000 	str.w	r3, [r9]
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	0699      	lsls	r1, r3, #26
 8003b4a:	bf42      	ittt	mi
 8003b4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b50:	3302      	addmi	r3, #2
 8003b52:	f8c9 3000 	strmi.w	r3, [r9]
 8003b56:	6825      	ldr	r5, [r4, #0]
 8003b58:	f015 0506 	ands.w	r5, r5, #6
 8003b5c:	d110      	bne.n	8003b80 <_printf_common+0x64>
 8003b5e:	f104 0a19 	add.w	sl, r4, #25
 8003b62:	e007      	b.n	8003b74 <_printf_common+0x58>
 8003b64:	2301      	movs	r3, #1
 8003b66:	4652      	mov	r2, sl
 8003b68:	4639      	mov	r1, r7
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	47c0      	blx	r8
 8003b6e:	3001      	adds	r0, #1
 8003b70:	d01a      	beq.n	8003ba8 <_printf_common+0x8c>
 8003b72:	3501      	adds	r5, #1
 8003b74:	68e3      	ldr	r3, [r4, #12]
 8003b76:	f8d9 2000 	ldr.w	r2, [r9]
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	429d      	cmp	r5, r3
 8003b7e:	dbf1      	blt.n	8003b64 <_printf_common+0x48>
 8003b80:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b84:	6822      	ldr	r2, [r4, #0]
 8003b86:	3300      	adds	r3, #0
 8003b88:	bf18      	it	ne
 8003b8a:	2301      	movne	r3, #1
 8003b8c:	0692      	lsls	r2, r2, #26
 8003b8e:	d50f      	bpl.n	8003bb0 <_printf_common+0x94>
 8003b90:	18e1      	adds	r1, r4, r3
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	2030      	movs	r0, #48	; 0x30
 8003b96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b9a:	4422      	add	r2, r4
 8003b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	e003      	b.n	8003bb0 <_printf_common+0x94>
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bb4:	4639      	mov	r1, r7
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	47c0      	blx	r8
 8003bba:	3001      	adds	r0, #1
 8003bbc:	d0f4      	beq.n	8003ba8 <_printf_common+0x8c>
 8003bbe:	6822      	ldr	r2, [r4, #0]
 8003bc0:	f8d9 5000 	ldr.w	r5, [r9]
 8003bc4:	68e3      	ldr	r3, [r4, #12]
 8003bc6:	f002 0206 	and.w	r2, r2, #6
 8003bca:	2a04      	cmp	r2, #4
 8003bcc:	bf08      	it	eq
 8003bce:	1b5d      	subeq	r5, r3, r5
 8003bd0:	6922      	ldr	r2, [r4, #16]
 8003bd2:	68a3      	ldr	r3, [r4, #8]
 8003bd4:	bf0c      	ite	eq
 8003bd6:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bda:	2500      	movne	r5, #0
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	bfc4      	itt	gt
 8003be0:	1a9b      	subgt	r3, r3, r2
 8003be2:	18ed      	addgt	r5, r5, r3
 8003be4:	f04f 0900 	mov.w	r9, #0
 8003be8:	341a      	adds	r4, #26
 8003bea:	454d      	cmp	r5, r9
 8003bec:	d009      	beq.n	8003c02 <_printf_common+0xe6>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	4639      	mov	r1, r7
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	47c0      	blx	r8
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	d0d5      	beq.n	8003ba8 <_printf_common+0x8c>
 8003bfc:	f109 0901 	add.w	r9, r9, #1
 8003c00:	e7f3      	b.n	8003bea <_printf_common+0xce>
 8003c02:	2000      	movs	r0, #0
 8003c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003c08 <_printf_i>:
 8003c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c0c:	4617      	mov	r7, r2
 8003c0e:	7e0a      	ldrb	r2, [r1, #24]
 8003c10:	b085      	sub	sp, #20
 8003c12:	2a6e      	cmp	r2, #110	; 0x6e
 8003c14:	4698      	mov	r8, r3
 8003c16:	4606      	mov	r6, r0
 8003c18:	460c      	mov	r4, r1
 8003c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c1c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003c20:	f000 80ae 	beq.w	8003d80 <_printf_i+0x178>
 8003c24:	d811      	bhi.n	8003c4a <_printf_i+0x42>
 8003c26:	2a63      	cmp	r2, #99	; 0x63
 8003c28:	d022      	beq.n	8003c70 <_printf_i+0x68>
 8003c2a:	d809      	bhi.n	8003c40 <_printf_i+0x38>
 8003c2c:	2a00      	cmp	r2, #0
 8003c2e:	f000 80bb 	beq.w	8003da8 <_printf_i+0x1a0>
 8003c32:	2a58      	cmp	r2, #88	; 0x58
 8003c34:	f040 80ca 	bne.w	8003dcc <_printf_i+0x1c4>
 8003c38:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003c3c:	4983      	ldr	r1, [pc, #524]	; (8003e4c <_printf_i+0x244>)
 8003c3e:	e055      	b.n	8003cec <_printf_i+0xe4>
 8003c40:	2a64      	cmp	r2, #100	; 0x64
 8003c42:	d01e      	beq.n	8003c82 <_printf_i+0x7a>
 8003c44:	2a69      	cmp	r2, #105	; 0x69
 8003c46:	d01c      	beq.n	8003c82 <_printf_i+0x7a>
 8003c48:	e0c0      	b.n	8003dcc <_printf_i+0x1c4>
 8003c4a:	2a73      	cmp	r2, #115	; 0x73
 8003c4c:	f000 80b0 	beq.w	8003db0 <_printf_i+0x1a8>
 8003c50:	d809      	bhi.n	8003c66 <_printf_i+0x5e>
 8003c52:	2a6f      	cmp	r2, #111	; 0x6f
 8003c54:	d02e      	beq.n	8003cb4 <_printf_i+0xac>
 8003c56:	2a70      	cmp	r2, #112	; 0x70
 8003c58:	f040 80b8 	bne.w	8003dcc <_printf_i+0x1c4>
 8003c5c:	680a      	ldr	r2, [r1, #0]
 8003c5e:	f042 0220 	orr.w	r2, r2, #32
 8003c62:	600a      	str	r2, [r1, #0]
 8003c64:	e03e      	b.n	8003ce4 <_printf_i+0xdc>
 8003c66:	2a75      	cmp	r2, #117	; 0x75
 8003c68:	d024      	beq.n	8003cb4 <_printf_i+0xac>
 8003c6a:	2a78      	cmp	r2, #120	; 0x78
 8003c6c:	d03a      	beq.n	8003ce4 <_printf_i+0xdc>
 8003c6e:	e0ad      	b.n	8003dcc <_printf_i+0x1c4>
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003c76:	1d11      	adds	r1, r2, #4
 8003c78:	6019      	str	r1, [r3, #0]
 8003c7a:	6813      	ldr	r3, [r2, #0]
 8003c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c80:	e0a8      	b.n	8003dd4 <_printf_i+0x1cc>
 8003c82:	6821      	ldr	r1, [r4, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003c8a:	d002      	beq.n	8003c92 <_printf_i+0x8a>
 8003c8c:	1d11      	adds	r1, r2, #4
 8003c8e:	6019      	str	r1, [r3, #0]
 8003c90:	e008      	b.n	8003ca4 <_printf_i+0x9c>
 8003c92:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003c96:	f102 0104 	add.w	r1, r2, #4
 8003c9a:	6019      	str	r1, [r3, #0]
 8003c9c:	d002      	beq.n	8003ca4 <_printf_i+0x9c>
 8003c9e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003ca2:	e000      	b.n	8003ca6 <_printf_i+0x9e>
 8003ca4:	6813      	ldr	r3, [r2, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	da3c      	bge.n	8003d24 <_printf_i+0x11c>
 8003caa:	222d      	movs	r2, #45	; 0x2d
 8003cac:	425b      	negs	r3, r3
 8003cae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003cb2:	e037      	b.n	8003d24 <_printf_i+0x11c>
 8003cb4:	6821      	ldr	r1, [r4, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003cbc:	d002      	beq.n	8003cc4 <_printf_i+0xbc>
 8003cbe:	1d11      	adds	r1, r2, #4
 8003cc0:	6019      	str	r1, [r3, #0]
 8003cc2:	e007      	b.n	8003cd4 <_printf_i+0xcc>
 8003cc4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003cc8:	f102 0104 	add.w	r1, r2, #4
 8003ccc:	6019      	str	r1, [r3, #0]
 8003cce:	d001      	beq.n	8003cd4 <_printf_i+0xcc>
 8003cd0:	8813      	ldrh	r3, [r2, #0]
 8003cd2:	e000      	b.n	8003cd6 <_printf_i+0xce>
 8003cd4:	6813      	ldr	r3, [r2, #0]
 8003cd6:	7e22      	ldrb	r2, [r4, #24]
 8003cd8:	495c      	ldr	r1, [pc, #368]	; (8003e4c <_printf_i+0x244>)
 8003cda:	2a6f      	cmp	r2, #111	; 0x6f
 8003cdc:	bf14      	ite	ne
 8003cde:	220a      	movne	r2, #10
 8003ce0:	2208      	moveq	r2, #8
 8003ce2:	e01b      	b.n	8003d1c <_printf_i+0x114>
 8003ce4:	2278      	movs	r2, #120	; 0x78
 8003ce6:	495a      	ldr	r1, [pc, #360]	; (8003e50 <_printf_i+0x248>)
 8003ce8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003cec:	6822      	ldr	r2, [r4, #0]
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003cf4:	f100 0504 	add.w	r5, r0, #4
 8003cf8:	601d      	str	r5, [r3, #0]
 8003cfa:	d103      	bne.n	8003d04 <_printf_i+0xfc>
 8003cfc:	0655      	lsls	r5, r2, #25
 8003cfe:	d501      	bpl.n	8003d04 <_printf_i+0xfc>
 8003d00:	8803      	ldrh	r3, [r0, #0]
 8003d02:	e000      	b.n	8003d06 <_printf_i+0xfe>
 8003d04:	6803      	ldr	r3, [r0, #0]
 8003d06:	07d0      	lsls	r0, r2, #31
 8003d08:	bf44      	itt	mi
 8003d0a:	f042 0220 	orrmi.w	r2, r2, #32
 8003d0e:	6022      	strmi	r2, [r4, #0]
 8003d10:	b91b      	cbnz	r3, 8003d1a <_printf_i+0x112>
 8003d12:	6822      	ldr	r2, [r4, #0]
 8003d14:	f022 0220 	bic.w	r2, r2, #32
 8003d18:	6022      	str	r2, [r4, #0]
 8003d1a:	2210      	movs	r2, #16
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003d22:	e001      	b.n	8003d28 <_printf_i+0x120>
 8003d24:	4949      	ldr	r1, [pc, #292]	; (8003e4c <_printf_i+0x244>)
 8003d26:	220a      	movs	r2, #10
 8003d28:	6865      	ldr	r5, [r4, #4]
 8003d2a:	60a5      	str	r5, [r4, #8]
 8003d2c:	2d00      	cmp	r5, #0
 8003d2e:	db08      	blt.n	8003d42 <_printf_i+0x13a>
 8003d30:	6820      	ldr	r0, [r4, #0]
 8003d32:	f020 0004 	bic.w	r0, r0, #4
 8003d36:	6020      	str	r0, [r4, #0]
 8003d38:	b92b      	cbnz	r3, 8003d46 <_printf_i+0x13e>
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	d17d      	bne.n	8003e3a <_printf_i+0x232>
 8003d3e:	4675      	mov	r5, lr
 8003d40:	e00c      	b.n	8003d5c <_printf_i+0x154>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d079      	beq.n	8003e3a <_printf_i+0x232>
 8003d46:	4675      	mov	r5, lr
 8003d48:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d4c:	fb02 3310 	mls	r3, r2, r0, r3
 8003d50:	5ccb      	ldrb	r3, [r1, r3]
 8003d52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d56:	4603      	mov	r3, r0
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	d1f5      	bne.n	8003d48 <_printf_i+0x140>
 8003d5c:	2a08      	cmp	r2, #8
 8003d5e:	d10b      	bne.n	8003d78 <_printf_i+0x170>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	07da      	lsls	r2, r3, #31
 8003d64:	d508      	bpl.n	8003d78 <_printf_i+0x170>
 8003d66:	6923      	ldr	r3, [r4, #16]
 8003d68:	6862      	ldr	r2, [r4, #4]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	bfde      	ittt	le
 8003d6e:	2330      	movle	r3, #48	; 0x30
 8003d70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d78:	ebc5 030e 	rsb	r3, r5, lr
 8003d7c:	6123      	str	r3, [r4, #16]
 8003d7e:	e02e      	b.n	8003dde <_printf_i+0x1d6>
 8003d80:	6808      	ldr	r0, [r1, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	6949      	ldr	r1, [r1, #20]
 8003d86:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003d8a:	d003      	beq.n	8003d94 <_printf_i+0x18c>
 8003d8c:	1d10      	adds	r0, r2, #4
 8003d8e:	6018      	str	r0, [r3, #0]
 8003d90:	6813      	ldr	r3, [r2, #0]
 8003d92:	e008      	b.n	8003da6 <_printf_i+0x19e>
 8003d94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d98:	f102 0004 	add.w	r0, r2, #4
 8003d9c:	6018      	str	r0, [r3, #0]
 8003d9e:	6813      	ldr	r3, [r2, #0]
 8003da0:	d001      	beq.n	8003da6 <_printf_i+0x19e>
 8003da2:	8019      	strh	r1, [r3, #0]
 8003da4:	e000      	b.n	8003da8 <_printf_i+0x1a0>
 8003da6:	6019      	str	r1, [r3, #0]
 8003da8:	2300      	movs	r3, #0
 8003daa:	6123      	str	r3, [r4, #16]
 8003dac:	4675      	mov	r5, lr
 8003dae:	e016      	b.n	8003dde <_printf_i+0x1d6>
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	1d11      	adds	r1, r2, #4
 8003db4:	6019      	str	r1, [r3, #0]
 8003db6:	6815      	ldr	r5, [r2, #0]
 8003db8:	6862      	ldr	r2, [r4, #4]
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f7fc fa17 	bl	80001f0 <memchr>
 8003dc2:	b108      	cbz	r0, 8003dc8 <_printf_i+0x1c0>
 8003dc4:	1b40      	subs	r0, r0, r5
 8003dc6:	6060      	str	r0, [r4, #4]
 8003dc8:	6863      	ldr	r3, [r4, #4]
 8003dca:	e004      	b.n	8003dd6 <_printf_i+0x1ce>
 8003dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dd0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	6123      	str	r3, [r4, #16]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dde:	f8cd 8000 	str.w	r8, [sp]
 8003de2:	463b      	mov	r3, r7
 8003de4:	aa03      	add	r2, sp, #12
 8003de6:	4621      	mov	r1, r4
 8003de8:	4630      	mov	r0, r6
 8003dea:	f7ff fe97 	bl	8003b1c <_printf_common>
 8003dee:	3001      	adds	r0, #1
 8003df0:	d102      	bne.n	8003df8 <_printf_i+0x1f0>
 8003df2:	f04f 30ff 	mov.w	r0, #4294967295
 8003df6:	e026      	b.n	8003e46 <_printf_i+0x23e>
 8003df8:	6923      	ldr	r3, [r4, #16]
 8003dfa:	462a      	mov	r2, r5
 8003dfc:	4639      	mov	r1, r7
 8003dfe:	4630      	mov	r0, r6
 8003e00:	47c0      	blx	r8
 8003e02:	3001      	adds	r0, #1
 8003e04:	d0f5      	beq.n	8003df2 <_printf_i+0x1ea>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	079b      	lsls	r3, r3, #30
 8003e0a:	d510      	bpl.n	8003e2e <_printf_i+0x226>
 8003e0c:	2500      	movs	r5, #0
 8003e0e:	f104 0919 	add.w	r9, r4, #25
 8003e12:	e007      	b.n	8003e24 <_printf_i+0x21c>
 8003e14:	2301      	movs	r3, #1
 8003e16:	464a      	mov	r2, r9
 8003e18:	4639      	mov	r1, r7
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	47c0      	blx	r8
 8003e1e:	3001      	adds	r0, #1
 8003e20:	d0e7      	beq.n	8003df2 <_printf_i+0x1ea>
 8003e22:	3501      	adds	r5, #1
 8003e24:	68e3      	ldr	r3, [r4, #12]
 8003e26:	9a03      	ldr	r2, [sp, #12]
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	429d      	cmp	r5, r3
 8003e2c:	dbf2      	blt.n	8003e14 <_printf_i+0x20c>
 8003e2e:	68e0      	ldr	r0, [r4, #12]
 8003e30:	9b03      	ldr	r3, [sp, #12]
 8003e32:	4298      	cmp	r0, r3
 8003e34:	bfb8      	it	lt
 8003e36:	4618      	movlt	r0, r3
 8003e38:	e005      	b.n	8003e46 <_printf_i+0x23e>
 8003e3a:	780b      	ldrb	r3, [r1, #0]
 8003e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e44:	e78a      	b.n	8003d5c <_printf_i+0x154>
 8003e46:	b005      	add	sp, #20
 8003e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e4c:	08004a3d 	.word	0x08004a3d
 8003e50:	08004a4e 	.word	0x08004a4e

08003e54 <_sbrk_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	4c06      	ldr	r4, [pc, #24]	; (8003e70 <_sbrk_r+0x1c>)
 8003e58:	2300      	movs	r3, #0
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	6023      	str	r3, [r4, #0]
 8003e60:	f000 fb00 	bl	8004464 <_sbrk>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d102      	bne.n	8003e6e <_sbrk_r+0x1a>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	b103      	cbz	r3, 8003e6e <_sbrk_r+0x1a>
 8003e6c:	602b      	str	r3, [r5, #0]
 8003e6e:	bd38      	pop	{r3, r4, r5, pc}
 8003e70:	20000a50 	.word	0x20000a50

08003e74 <__sread>:
 8003e74:	b510      	push	{r4, lr}
 8003e76:	460c      	mov	r4, r1
 8003e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e7c:	f000 fa96 	bl	80043ac <_read_r>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	bfab      	itete	ge
 8003e84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e86:	89a3      	ldrhlt	r3, [r4, #12]
 8003e88:	181b      	addge	r3, r3, r0
 8003e8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e8e:	bfac      	ite	ge
 8003e90:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e92:	81a3      	strhlt	r3, [r4, #12]
 8003e94:	bd10      	pop	{r4, pc}

08003e96 <__swrite>:
 8003e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e9a:	461f      	mov	r7, r3
 8003e9c:	898b      	ldrh	r3, [r1, #12]
 8003e9e:	05db      	lsls	r3, r3, #23
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	4616      	mov	r6, r2
 8003ea6:	d505      	bpl.n	8003eb4 <__swrite+0x1e>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb0:	f000 f9ba 	bl	8004228 <_lseek_r>
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ebe:	81a3      	strh	r3, [r4, #12]
 8003ec0:	4632      	mov	r2, r6
 8003ec2:	463b      	mov	r3, r7
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eca:	f000 b86b 	b.w	8003fa4 <_write_r>

08003ece <__sseek>:
 8003ece:	b510      	push	{r4, lr}
 8003ed0:	460c      	mov	r4, r1
 8003ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed6:	f000 f9a7 	bl	8004228 <_lseek_r>
 8003eda:	1c43      	adds	r3, r0, #1
 8003edc:	89a3      	ldrh	r3, [r4, #12]
 8003ede:	bf15      	itete	ne
 8003ee0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ee2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ee6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003eea:	81a3      	strheq	r3, [r4, #12]
 8003eec:	bf18      	it	ne
 8003eee:	81a3      	strhne	r3, [r4, #12]
 8003ef0:	bd10      	pop	{r4, pc}

08003ef2 <__sclose>:
 8003ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef6:	f000 b8d5 	b.w	80040a4 <_close_r>
	...

08003efc <__swbuf_r>:
 8003efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efe:	460f      	mov	r7, r1
 8003f00:	4614      	mov	r4, r2
 8003f02:	4605      	mov	r5, r0
 8003f04:	b118      	cbz	r0, 8003f0e <__swbuf_r+0x12>
 8003f06:	6983      	ldr	r3, [r0, #24]
 8003f08:	b90b      	cbnz	r3, 8003f0e <__swbuf_r+0x12>
 8003f0a:	f7ff fbd9 	bl	80036c0 <__sinit>
 8003f0e:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <__swbuf_r+0x9c>)
 8003f10:	429c      	cmp	r4, r3
 8003f12:	d101      	bne.n	8003f18 <__swbuf_r+0x1c>
 8003f14:	686c      	ldr	r4, [r5, #4]
 8003f16:	e008      	b.n	8003f2a <__swbuf_r+0x2e>
 8003f18:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <__swbuf_r+0xa0>)
 8003f1a:	429c      	cmp	r4, r3
 8003f1c:	d101      	bne.n	8003f22 <__swbuf_r+0x26>
 8003f1e:	68ac      	ldr	r4, [r5, #8]
 8003f20:	e003      	b.n	8003f2a <__swbuf_r+0x2e>
 8003f22:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <__swbuf_r+0xa4>)
 8003f24:	429c      	cmp	r4, r3
 8003f26:	bf08      	it	eq
 8003f28:	68ec      	ldreq	r4, [r5, #12]
 8003f2a:	69a3      	ldr	r3, [r4, #24]
 8003f2c:	60a3      	str	r3, [r4, #8]
 8003f2e:	89a3      	ldrh	r3, [r4, #12]
 8003f30:	071a      	lsls	r2, r3, #28
 8003f32:	d509      	bpl.n	8003f48 <__swbuf_r+0x4c>
 8003f34:	6923      	ldr	r3, [r4, #16]
 8003f36:	b13b      	cbz	r3, 8003f48 <__swbuf_r+0x4c>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	6920      	ldr	r0, [r4, #16]
 8003f3c:	1a18      	subs	r0, r3, r0
 8003f3e:	6963      	ldr	r3, [r4, #20]
 8003f40:	4298      	cmp	r0, r3
 8003f42:	b2fe      	uxtb	r6, r7
 8003f44:	db0f      	blt.n	8003f66 <__swbuf_r+0x6a>
 8003f46:	e008      	b.n	8003f5a <__swbuf_r+0x5e>
 8003f48:	4621      	mov	r1, r4
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	f000 f83c 	bl	8003fc8 <__swsetup_r>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d0f1      	beq.n	8003f38 <__swbuf_r+0x3c>
 8003f54:	f04f 36ff 	mov.w	r6, #4294967295
 8003f58:	e01b      	b.n	8003f92 <__swbuf_r+0x96>
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	f000 f939 	bl	80041d4 <_fflush_r>
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d1f6      	bne.n	8003f54 <__swbuf_r+0x58>
 8003f66:	68a3      	ldr	r3, [r4, #8]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	60a3      	str	r3, [r4, #8]
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	6022      	str	r2, [r4, #0]
 8003f72:	701f      	strb	r7, [r3, #0]
 8003f74:	6963      	ldr	r3, [r4, #20]
 8003f76:	3001      	adds	r0, #1
 8003f78:	4298      	cmp	r0, r3
 8003f7a:	d004      	beq.n	8003f86 <__swbuf_r+0x8a>
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	07db      	lsls	r3, r3, #31
 8003f80:	d507      	bpl.n	8003f92 <__swbuf_r+0x96>
 8003f82:	2e0a      	cmp	r6, #10
 8003f84:	d105      	bne.n	8003f92 <__swbuf_r+0x96>
 8003f86:	4621      	mov	r1, r4
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f000 f923 	bl	80041d4 <_fflush_r>
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d1e0      	bne.n	8003f54 <__swbuf_r+0x58>
 8003f92:	4630      	mov	r0, r6
 8003f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f96:	bf00      	nop
 8003f98:	080049cc 	.word	0x080049cc
 8003f9c:	080049ec 	.word	0x080049ec
 8003fa0:	08004a0c 	.word	0x08004a0c

08003fa4 <_write_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4c07      	ldr	r4, [pc, #28]	; (8003fc4 <_write_r+0x20>)
 8003fa8:	4605      	mov	r5, r0
 8003faa:	4608      	mov	r0, r1
 8003fac:	4611      	mov	r1, r2
 8003fae:	2200      	movs	r2, #0
 8003fb0:	6022      	str	r2, [r4, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f7ff fa4c 	bl	8003450 <_write>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_write_r+0x1e>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_write_r+0x1e>
 8003fc0:	602b      	str	r3, [r5, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	20000a50 	.word	0x20000a50

08003fc8 <__swsetup_r>:
 8003fc8:	4b32      	ldr	r3, [pc, #200]	; (8004094 <__swsetup_r+0xcc>)
 8003fca:	b570      	push	{r4, r5, r6, lr}
 8003fcc:	681d      	ldr	r5, [r3, #0]
 8003fce:	4606      	mov	r6, r0
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	b125      	cbz	r5, 8003fde <__swsetup_r+0x16>
 8003fd4:	69ab      	ldr	r3, [r5, #24]
 8003fd6:	b913      	cbnz	r3, 8003fde <__swsetup_r+0x16>
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f7ff fb71 	bl	80036c0 <__sinit>
 8003fde:	4b2e      	ldr	r3, [pc, #184]	; (8004098 <__swsetup_r+0xd0>)
 8003fe0:	429c      	cmp	r4, r3
 8003fe2:	d101      	bne.n	8003fe8 <__swsetup_r+0x20>
 8003fe4:	686c      	ldr	r4, [r5, #4]
 8003fe6:	e008      	b.n	8003ffa <__swsetup_r+0x32>
 8003fe8:	4b2c      	ldr	r3, [pc, #176]	; (800409c <__swsetup_r+0xd4>)
 8003fea:	429c      	cmp	r4, r3
 8003fec:	d101      	bne.n	8003ff2 <__swsetup_r+0x2a>
 8003fee:	68ac      	ldr	r4, [r5, #8]
 8003ff0:	e003      	b.n	8003ffa <__swsetup_r+0x32>
 8003ff2:	4b2b      	ldr	r3, [pc, #172]	; (80040a0 <__swsetup_r+0xd8>)
 8003ff4:	429c      	cmp	r4, r3
 8003ff6:	bf08      	it	eq
 8003ff8:	68ec      	ldreq	r4, [r5, #12]
 8003ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	0715      	lsls	r5, r2, #28
 8004002:	d41d      	bmi.n	8004040 <__swsetup_r+0x78>
 8004004:	06d0      	lsls	r0, r2, #27
 8004006:	d402      	bmi.n	800400e <__swsetup_r+0x46>
 8004008:	2209      	movs	r2, #9
 800400a:	6032      	str	r2, [r6, #0]
 800400c:	e03a      	b.n	8004084 <__swsetup_r+0xbc>
 800400e:	0751      	lsls	r1, r2, #29
 8004010:	d512      	bpl.n	8004038 <__swsetup_r+0x70>
 8004012:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004014:	b141      	cbz	r1, 8004028 <__swsetup_r+0x60>
 8004016:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800401a:	4299      	cmp	r1, r3
 800401c:	d002      	beq.n	8004024 <__swsetup_r+0x5c>
 800401e:	4630      	mov	r0, r6
 8004020:	f000 f976 	bl	8004310 <_free_r>
 8004024:	2300      	movs	r3, #0
 8004026:	6363      	str	r3, [r4, #52]	; 0x34
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800402e:	81a3      	strh	r3, [r4, #12]
 8004030:	2300      	movs	r3, #0
 8004032:	6063      	str	r3, [r4, #4]
 8004034:	6923      	ldr	r3, [r4, #16]
 8004036:	6023      	str	r3, [r4, #0]
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	f043 0308 	orr.w	r3, r3, #8
 800403e:	81a3      	strh	r3, [r4, #12]
 8004040:	6923      	ldr	r3, [r4, #16]
 8004042:	b94b      	cbnz	r3, 8004058 <__swsetup_r+0x90>
 8004044:	89a3      	ldrh	r3, [r4, #12]
 8004046:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800404a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800404e:	d003      	beq.n	8004058 <__swsetup_r+0x90>
 8004050:	4621      	mov	r1, r4
 8004052:	4630      	mov	r0, r6
 8004054:	f000 f91e 	bl	8004294 <__smakebuf_r>
 8004058:	89a2      	ldrh	r2, [r4, #12]
 800405a:	f012 0301 	ands.w	r3, r2, #1
 800405e:	d005      	beq.n	800406c <__swsetup_r+0xa4>
 8004060:	2300      	movs	r3, #0
 8004062:	60a3      	str	r3, [r4, #8]
 8004064:	6963      	ldr	r3, [r4, #20]
 8004066:	425b      	negs	r3, r3
 8004068:	61a3      	str	r3, [r4, #24]
 800406a:	e003      	b.n	8004074 <__swsetup_r+0xac>
 800406c:	0792      	lsls	r2, r2, #30
 800406e:	bf58      	it	pl
 8004070:	6963      	ldrpl	r3, [r4, #20]
 8004072:	60a3      	str	r3, [r4, #8]
 8004074:	6923      	ldr	r3, [r4, #16]
 8004076:	b95b      	cbnz	r3, 8004090 <__swsetup_r+0xc8>
 8004078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800407c:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8004080:	b280      	uxth	r0, r0
 8004082:	b130      	cbz	r0, 8004092 <__swsetup_r+0xca>
 8004084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004088:	81a3      	strh	r3, [r4, #12]
 800408a:	f04f 30ff 	mov.w	r0, #4294967295
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	2000      	movs	r0, #0
 8004092:	bd70      	pop	{r4, r5, r6, pc}
 8004094:	20000070 	.word	0x20000070
 8004098:	080049cc 	.word	0x080049cc
 800409c:	080049ec 	.word	0x080049ec
 80040a0:	08004a0c 	.word	0x08004a0c

080040a4 <_close_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4c06      	ldr	r4, [pc, #24]	; (80040c0 <_close_r+0x1c>)
 80040a8:	2300      	movs	r3, #0
 80040aa:	4605      	mov	r5, r0
 80040ac:	4608      	mov	r0, r1
 80040ae:	6023      	str	r3, [r4, #0]
 80040b0:	f000 f9b0 	bl	8004414 <_close>
 80040b4:	1c43      	adds	r3, r0, #1
 80040b6:	d102      	bne.n	80040be <_close_r+0x1a>
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	b103      	cbz	r3, 80040be <_close_r+0x1a>
 80040bc:	602b      	str	r3, [r5, #0]
 80040be:	bd38      	pop	{r3, r4, r5, pc}
 80040c0:	20000a50 	.word	0x20000a50

080040c4 <__sflush_r>:
 80040c4:	898a      	ldrh	r2, [r1, #12]
 80040c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ca:	4605      	mov	r5, r0
 80040cc:	0710      	lsls	r0, r2, #28
 80040ce:	460c      	mov	r4, r1
 80040d0:	d459      	bmi.n	8004186 <__sflush_r+0xc2>
 80040d2:	684b      	ldr	r3, [r1, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	dc02      	bgt.n	80040de <__sflush_r+0x1a>
 80040d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	dd17      	ble.n	800410e <__sflush_r+0x4a>
 80040de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040e0:	b1ae      	cbz	r6, 800410e <__sflush_r+0x4a>
 80040e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040e6:	2300      	movs	r3, #0
 80040e8:	b292      	uxth	r2, r2
 80040ea:	682f      	ldr	r7, [r5, #0]
 80040ec:	602b      	str	r3, [r5, #0]
 80040ee:	b10a      	cbz	r2, 80040f4 <__sflush_r+0x30>
 80040f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040f2:	e015      	b.n	8004120 <__sflush_r+0x5c>
 80040f4:	6a21      	ldr	r1, [r4, #32]
 80040f6:	2301      	movs	r3, #1
 80040f8:	4628      	mov	r0, r5
 80040fa:	47b0      	blx	r6
 80040fc:	1c41      	adds	r1, r0, #1
 80040fe:	d10f      	bne.n	8004120 <__sflush_r+0x5c>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	b16b      	cbz	r3, 8004120 <__sflush_r+0x5c>
 8004104:	2b1d      	cmp	r3, #29
 8004106:	d001      	beq.n	800410c <__sflush_r+0x48>
 8004108:	2b16      	cmp	r3, #22
 800410a:	d103      	bne.n	8004114 <__sflush_r+0x50>
 800410c:	602f      	str	r7, [r5, #0]
 800410e:	2000      	movs	r0, #0
 8004110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800411a:	81a3      	strh	r3, [r4, #12]
 800411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004120:	89a3      	ldrh	r3, [r4, #12]
 8004122:	075a      	lsls	r2, r3, #29
 8004124:	d505      	bpl.n	8004132 <__sflush_r+0x6e>
 8004126:	6863      	ldr	r3, [r4, #4]
 8004128:	1ac0      	subs	r0, r0, r3
 800412a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800412c:	b10b      	cbz	r3, 8004132 <__sflush_r+0x6e>
 800412e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004130:	1ac0      	subs	r0, r0, r3
 8004132:	2300      	movs	r3, #0
 8004134:	4602      	mov	r2, r0
 8004136:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004138:	6a21      	ldr	r1, [r4, #32]
 800413a:	4628      	mov	r0, r5
 800413c:	47b0      	blx	r6
 800413e:	1c43      	adds	r3, r0, #1
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	d106      	bne.n	8004152 <__sflush_r+0x8e>
 8004144:	6829      	ldr	r1, [r5, #0]
 8004146:	291d      	cmp	r1, #29
 8004148:	d83a      	bhi.n	80041c0 <__sflush_r+0xfc>
 800414a:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <__sflush_r+0x10c>)
 800414c:	40ca      	lsrs	r2, r1
 800414e:	07d6      	lsls	r6, r2, #31
 8004150:	d536      	bpl.n	80041c0 <__sflush_r+0xfc>
 8004152:	2200      	movs	r2, #0
 8004154:	6062      	str	r2, [r4, #4]
 8004156:	04d9      	lsls	r1, r3, #19
 8004158:	6922      	ldr	r2, [r4, #16]
 800415a:	6022      	str	r2, [r4, #0]
 800415c:	d504      	bpl.n	8004168 <__sflush_r+0xa4>
 800415e:	1c42      	adds	r2, r0, #1
 8004160:	d101      	bne.n	8004166 <__sflush_r+0xa2>
 8004162:	682b      	ldr	r3, [r5, #0]
 8004164:	b903      	cbnz	r3, 8004168 <__sflush_r+0xa4>
 8004166:	6560      	str	r0, [r4, #84]	; 0x54
 8004168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800416a:	602f      	str	r7, [r5, #0]
 800416c:	2900      	cmp	r1, #0
 800416e:	d0ce      	beq.n	800410e <__sflush_r+0x4a>
 8004170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004174:	4299      	cmp	r1, r3
 8004176:	d002      	beq.n	800417e <__sflush_r+0xba>
 8004178:	4628      	mov	r0, r5
 800417a:	f000 f8c9 	bl	8004310 <_free_r>
 800417e:	2000      	movs	r0, #0
 8004180:	6360      	str	r0, [r4, #52]	; 0x34
 8004182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004186:	690f      	ldr	r7, [r1, #16]
 8004188:	2f00      	cmp	r7, #0
 800418a:	d0c0      	beq.n	800410e <__sflush_r+0x4a>
 800418c:	0793      	lsls	r3, r2, #30
 800418e:	680e      	ldr	r6, [r1, #0]
 8004190:	bf08      	it	eq
 8004192:	694b      	ldreq	r3, [r1, #20]
 8004194:	600f      	str	r7, [r1, #0]
 8004196:	bf18      	it	ne
 8004198:	2300      	movne	r3, #0
 800419a:	ebc7 0806 	rsb	r8, r7, r6
 800419e:	608b      	str	r3, [r1, #8]
 80041a0:	e002      	b.n	80041a8 <__sflush_r+0xe4>
 80041a2:	4407      	add	r7, r0
 80041a4:	ebc0 0808 	rsb	r8, r0, r8
 80041a8:	f1b8 0f00 	cmp.w	r8, #0
 80041ac:	ddaf      	ble.n	800410e <__sflush_r+0x4a>
 80041ae:	4643      	mov	r3, r8
 80041b0:	463a      	mov	r2, r7
 80041b2:	6a21      	ldr	r1, [r4, #32]
 80041b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041b6:	4628      	mov	r0, r5
 80041b8:	47b0      	blx	r6
 80041ba:	2800      	cmp	r0, #0
 80041bc:	dcf1      	bgt.n	80041a2 <__sflush_r+0xde>
 80041be:	89a3      	ldrh	r3, [r4, #12]
 80041c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c4:	81a3      	strh	r3, [r4, #12]
 80041c6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ce:	bf00      	nop
 80041d0:	20400001 	.word	0x20400001

080041d4 <_fflush_r>:
 80041d4:	b538      	push	{r3, r4, r5, lr}
 80041d6:	690b      	ldr	r3, [r1, #16]
 80041d8:	4605      	mov	r5, r0
 80041da:	460c      	mov	r4, r1
 80041dc:	b1db      	cbz	r3, 8004216 <_fflush_r+0x42>
 80041de:	b118      	cbz	r0, 80041e8 <_fflush_r+0x14>
 80041e0:	6983      	ldr	r3, [r0, #24]
 80041e2:	b90b      	cbnz	r3, 80041e8 <_fflush_r+0x14>
 80041e4:	f7ff fa6c 	bl	80036c0 <__sinit>
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <_fflush_r+0x48>)
 80041ea:	429c      	cmp	r4, r3
 80041ec:	d101      	bne.n	80041f2 <_fflush_r+0x1e>
 80041ee:	686c      	ldr	r4, [r5, #4]
 80041f0:	e008      	b.n	8004204 <_fflush_r+0x30>
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <_fflush_r+0x4c>)
 80041f4:	429c      	cmp	r4, r3
 80041f6:	d101      	bne.n	80041fc <_fflush_r+0x28>
 80041f8:	68ac      	ldr	r4, [r5, #8]
 80041fa:	e003      	b.n	8004204 <_fflush_r+0x30>
 80041fc:	4b09      	ldr	r3, [pc, #36]	; (8004224 <_fflush_r+0x50>)
 80041fe:	429c      	cmp	r4, r3
 8004200:	bf08      	it	eq
 8004202:	68ec      	ldreq	r4, [r5, #12]
 8004204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004208:	b12b      	cbz	r3, 8004216 <_fflush_r+0x42>
 800420a:	4621      	mov	r1, r4
 800420c:	4628      	mov	r0, r5
 800420e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004212:	f7ff bf57 	b.w	80040c4 <__sflush_r>
 8004216:	2000      	movs	r0, #0
 8004218:	bd38      	pop	{r3, r4, r5, pc}
 800421a:	bf00      	nop
 800421c:	080049cc 	.word	0x080049cc
 8004220:	080049ec 	.word	0x080049ec
 8004224:	08004a0c 	.word	0x08004a0c

08004228 <_lseek_r>:
 8004228:	b538      	push	{r3, r4, r5, lr}
 800422a:	4c07      	ldr	r4, [pc, #28]	; (8004248 <_lseek_r+0x20>)
 800422c:	4605      	mov	r5, r0
 800422e:	4608      	mov	r0, r1
 8004230:	4611      	mov	r1, r2
 8004232:	2200      	movs	r2, #0
 8004234:	6022      	str	r2, [r4, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	f000 f904 	bl	8004444 <_lseek>
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	d102      	bne.n	8004246 <_lseek_r+0x1e>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	b103      	cbz	r3, 8004246 <_lseek_r+0x1e>
 8004244:	602b      	str	r3, [r5, #0]
 8004246:	bd38      	pop	{r3, r4, r5, pc}
 8004248:	20000a50 	.word	0x20000a50

0800424c <__swhatbuf_r>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	460e      	mov	r6, r1
 8004250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004254:	2900      	cmp	r1, #0
 8004256:	b090      	sub	sp, #64	; 0x40
 8004258:	4614      	mov	r4, r2
 800425a:	461d      	mov	r5, r3
 800425c:	da06      	bge.n	800426c <__swhatbuf_r+0x20>
 800425e:	2300      	movs	r3, #0
 8004260:	602b      	str	r3, [r5, #0]
 8004262:	89b3      	ldrh	r3, [r6, #12]
 8004264:	061a      	lsls	r2, r3, #24
 8004266:	d50e      	bpl.n	8004286 <__swhatbuf_r+0x3a>
 8004268:	2340      	movs	r3, #64	; 0x40
 800426a:	e00e      	b.n	800428a <__swhatbuf_r+0x3e>
 800426c:	aa01      	add	r2, sp, #4
 800426e:	f000 f8af 	bl	80043d0 <_fstat_r>
 8004272:	2800      	cmp	r0, #0
 8004274:	dbf3      	blt.n	800425e <__swhatbuf_r+0x12>
 8004276:	9a02      	ldr	r2, [sp, #8]
 8004278:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800427c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004280:	425a      	negs	r2, r3
 8004282:	415a      	adcs	r2, r3
 8004284:	602a      	str	r2, [r5, #0]
 8004286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800428a:	2000      	movs	r0, #0
 800428c:	6023      	str	r3, [r4, #0]
 800428e:	b010      	add	sp, #64	; 0x40
 8004290:	bd70      	pop	{r4, r5, r6, pc}
	...

08004294 <__smakebuf_r>:
 8004294:	898b      	ldrh	r3, [r1, #12]
 8004296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004298:	079e      	lsls	r6, r3, #30
 800429a:	4605      	mov	r5, r0
 800429c:	460c      	mov	r4, r1
 800429e:	d410      	bmi.n	80042c2 <__smakebuf_r+0x2e>
 80042a0:	ab01      	add	r3, sp, #4
 80042a2:	466a      	mov	r2, sp
 80042a4:	f7ff ffd2 	bl	800424c <__swhatbuf_r>
 80042a8:	9900      	ldr	r1, [sp, #0]
 80042aa:	4606      	mov	r6, r0
 80042ac:	4628      	mov	r0, r5
 80042ae:	f7ff fa91 	bl	80037d4 <_malloc_r>
 80042b2:	b968      	cbnz	r0, 80042d0 <__smakebuf_r+0x3c>
 80042b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042b8:	059a      	lsls	r2, r3, #22
 80042ba:	d422      	bmi.n	8004302 <__smakebuf_r+0x6e>
 80042bc:	f043 0302 	orr.w	r3, r3, #2
 80042c0:	81a3      	strh	r3, [r4, #12]
 80042c2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042c6:	6023      	str	r3, [r4, #0]
 80042c8:	6123      	str	r3, [r4, #16]
 80042ca:	2301      	movs	r3, #1
 80042cc:	6163      	str	r3, [r4, #20]
 80042ce:	e018      	b.n	8004302 <__smakebuf_r+0x6e>
 80042d0:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <__smakebuf_r+0x74>)
 80042d2:	62ab      	str	r3, [r5, #40]	; 0x28
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	6020      	str	r0, [r4, #0]
 80042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	9b00      	ldr	r3, [sp, #0]
 80042e0:	6163      	str	r3, [r4, #20]
 80042e2:	9b01      	ldr	r3, [sp, #4]
 80042e4:	6120      	str	r0, [r4, #16]
 80042e6:	b14b      	cbz	r3, 80042fc <__smakebuf_r+0x68>
 80042e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 f881 	bl	80043f4 <_isatty_r>
 80042f2:	b118      	cbz	r0, 80042fc <__smakebuf_r+0x68>
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	89a0      	ldrh	r0, [r4, #12]
 80042fe:	4330      	orrs	r0, r6
 8004300:	81a0      	strh	r0, [r4, #12]
 8004302:	b002      	add	sp, #8
 8004304:	bd70      	pop	{r4, r5, r6, pc}
 8004306:	bf00      	nop
 8004308:	08003641 	.word	0x08003641

0800430c <__malloc_lock>:
 800430c:	4770      	bx	lr

0800430e <__malloc_unlock>:
 800430e:	4770      	bx	lr

08004310 <_free_r>:
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	4605      	mov	r5, r0
 8004314:	2900      	cmp	r1, #0
 8004316:	d046      	beq.n	80043a6 <_free_r+0x96>
 8004318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800431c:	1f0c      	subs	r4, r1, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	bfb8      	it	lt
 8004322:	18e4      	addlt	r4, r4, r3
 8004324:	f7ff fff2 	bl	800430c <__malloc_lock>
 8004328:	4a1f      	ldr	r2, [pc, #124]	; (80043a8 <_free_r+0x98>)
 800432a:	6813      	ldr	r3, [r2, #0]
 800432c:	4611      	mov	r1, r2
 800432e:	b913      	cbnz	r3, 8004336 <_free_r+0x26>
 8004330:	6063      	str	r3, [r4, #4]
 8004332:	6014      	str	r4, [r2, #0]
 8004334:	e032      	b.n	800439c <_free_r+0x8c>
 8004336:	42a3      	cmp	r3, r4
 8004338:	d90e      	bls.n	8004358 <_free_r+0x48>
 800433a:	6822      	ldr	r2, [r4, #0]
 800433c:	18a0      	adds	r0, r4, r2
 800433e:	4283      	cmp	r3, r0
 8004340:	bf04      	itt	eq
 8004342:	6818      	ldreq	r0, [r3, #0]
 8004344:	685b      	ldreq	r3, [r3, #4]
 8004346:	6063      	str	r3, [r4, #4]
 8004348:	bf04      	itt	eq
 800434a:	1812      	addeq	r2, r2, r0
 800434c:	6022      	streq	r2, [r4, #0]
 800434e:	600c      	str	r4, [r1, #0]
 8004350:	e024      	b.n	800439c <_free_r+0x8c>
 8004352:	42a2      	cmp	r2, r4
 8004354:	d803      	bhi.n	800435e <_free_r+0x4e>
 8004356:	4613      	mov	r3, r2
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	2a00      	cmp	r2, #0
 800435c:	d1f9      	bne.n	8004352 <_free_r+0x42>
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	1819      	adds	r1, r3, r0
 8004362:	42a1      	cmp	r1, r4
 8004364:	d10b      	bne.n	800437e <_free_r+0x6e>
 8004366:	6821      	ldr	r1, [r4, #0]
 8004368:	4401      	add	r1, r0
 800436a:	1858      	adds	r0, r3, r1
 800436c:	4282      	cmp	r2, r0
 800436e:	6019      	str	r1, [r3, #0]
 8004370:	d114      	bne.n	800439c <_free_r+0x8c>
 8004372:	6810      	ldr	r0, [r2, #0]
 8004374:	6852      	ldr	r2, [r2, #4]
 8004376:	605a      	str	r2, [r3, #4]
 8004378:	4401      	add	r1, r0
 800437a:	6019      	str	r1, [r3, #0]
 800437c:	e00e      	b.n	800439c <_free_r+0x8c>
 800437e:	d902      	bls.n	8004386 <_free_r+0x76>
 8004380:	230c      	movs	r3, #12
 8004382:	602b      	str	r3, [r5, #0]
 8004384:	e00a      	b.n	800439c <_free_r+0x8c>
 8004386:	6821      	ldr	r1, [r4, #0]
 8004388:	1860      	adds	r0, r4, r1
 800438a:	4282      	cmp	r2, r0
 800438c:	bf04      	itt	eq
 800438e:	6810      	ldreq	r0, [r2, #0]
 8004390:	6852      	ldreq	r2, [r2, #4]
 8004392:	6062      	str	r2, [r4, #4]
 8004394:	bf04      	itt	eq
 8004396:	1809      	addeq	r1, r1, r0
 8004398:	6021      	streq	r1, [r4, #0]
 800439a:	605c      	str	r4, [r3, #4]
 800439c:	4628      	mov	r0, r5
 800439e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043a2:	f7ff bfb4 	b.w	800430e <__malloc_unlock>
 80043a6:	bd38      	pop	{r3, r4, r5, pc}
 80043a8:	200008e0 	.word	0x200008e0

080043ac <_read_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	4c07      	ldr	r4, [pc, #28]	; (80043cc <_read_r+0x20>)
 80043b0:	4605      	mov	r5, r0
 80043b2:	4608      	mov	r0, r1
 80043b4:	4611      	mov	r1, r2
 80043b6:	2200      	movs	r2, #0
 80043b8:	6022      	str	r2, [r4, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 f84a 	bl	8004454 <_read>
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	d102      	bne.n	80043ca <_read_r+0x1e>
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	b103      	cbz	r3, 80043ca <_read_r+0x1e>
 80043c8:	602b      	str	r3, [r5, #0]
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
 80043cc:	20000a50 	.word	0x20000a50

080043d0 <_fstat_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4c07      	ldr	r4, [pc, #28]	; (80043f0 <_fstat_r+0x20>)
 80043d4:	2300      	movs	r3, #0
 80043d6:	4605      	mov	r5, r0
 80043d8:	4608      	mov	r0, r1
 80043da:	4611      	mov	r1, r2
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	f000 f821 	bl	8004424 <_fstat>
 80043e2:	1c43      	adds	r3, r0, #1
 80043e4:	d102      	bne.n	80043ec <_fstat_r+0x1c>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	b103      	cbz	r3, 80043ec <_fstat_r+0x1c>
 80043ea:	602b      	str	r3, [r5, #0]
 80043ec:	bd38      	pop	{r3, r4, r5, pc}
 80043ee:	bf00      	nop
 80043f0:	20000a50 	.word	0x20000a50

080043f4 <_isatty_r>:
 80043f4:	b538      	push	{r3, r4, r5, lr}
 80043f6:	4c06      	ldr	r4, [pc, #24]	; (8004410 <_isatty_r+0x1c>)
 80043f8:	2300      	movs	r3, #0
 80043fa:	4605      	mov	r5, r0
 80043fc:	4608      	mov	r0, r1
 80043fe:	6023      	str	r3, [r4, #0]
 8004400:	f000 f818 	bl	8004434 <_isatty>
 8004404:	1c43      	adds	r3, r0, #1
 8004406:	d102      	bne.n	800440e <_isatty_r+0x1a>
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	b103      	cbz	r3, 800440e <_isatty_r+0x1a>
 800440c:	602b      	str	r3, [r5, #0]
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	20000a50 	.word	0x20000a50

08004414 <_close>:
 8004414:	4b02      	ldr	r3, [pc, #8]	; (8004420 <_close+0xc>)
 8004416:	2258      	movs	r2, #88	; 0x58
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	f04f 30ff 	mov.w	r0, #4294967295
 800441e:	4770      	bx	lr
 8004420:	20000a50 	.word	0x20000a50

08004424 <_fstat>:
 8004424:	4b02      	ldr	r3, [pc, #8]	; (8004430 <_fstat+0xc>)
 8004426:	2258      	movs	r2, #88	; 0x58
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f04f 30ff 	mov.w	r0, #4294967295
 800442e:	4770      	bx	lr
 8004430:	20000a50 	.word	0x20000a50

08004434 <_isatty>:
 8004434:	4b02      	ldr	r3, [pc, #8]	; (8004440 <_isatty+0xc>)
 8004436:	2258      	movs	r2, #88	; 0x58
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	2000      	movs	r0, #0
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000a50 	.word	0x20000a50

08004444 <_lseek>:
 8004444:	4b02      	ldr	r3, [pc, #8]	; (8004450 <_lseek+0xc>)
 8004446:	2258      	movs	r2, #88	; 0x58
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	f04f 30ff 	mov.w	r0, #4294967295
 800444e:	4770      	bx	lr
 8004450:	20000a50 	.word	0x20000a50

08004454 <_read>:
 8004454:	4b02      	ldr	r3, [pc, #8]	; (8004460 <_read+0xc>)
 8004456:	2258      	movs	r2, #88	; 0x58
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f04f 30ff 	mov.w	r0, #4294967295
 800445e:	4770      	bx	lr
 8004460:	20000a50 	.word	0x20000a50

08004464 <_sbrk>:
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <_sbrk+0x14>)
 8004466:	4905      	ldr	r1, [pc, #20]	; (800447c <_sbrk+0x18>)
 8004468:	6813      	ldr	r3, [r2, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	bf08      	it	eq
 800446e:	460b      	moveq	r3, r1
 8004470:	4418      	add	r0, r3
 8004472:	6010      	str	r0, [r2, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	4770      	bx	lr
 8004478:	200008e4 	.word	0x200008e4
 800447c:	20000a58 	.word	0x20000a58

08004480 <_init>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	bf00      	nop
 8004484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004486:	bc08      	pop	{r3}
 8004488:	469e      	mov	lr, r3
 800448a:	4770      	bx	lr

0800448c <_fini>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr
