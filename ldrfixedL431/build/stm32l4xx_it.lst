ARM GAS  /tmp/ccGTPl9s.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"stm32l4xx_it.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.NMI_Handler,"ax",%progbits
  22              		.align	2
  23              		.global	NMI_Handler
  24              		.thumb
  25              		.thumb_func
  27              	NMI_Handler:
  28              	.LFB132:
  29              		.file 1 "Core/Src/stm32l4xx_it.c"
   1:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32l4xx_it.c **** /**
   3:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32l4xx_it.c ****   * @file    stm32l4xx_it.c
   5:Core/Src/stm32l4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32l4xx_it.c ****   * @attention
   8:Core/Src/stm32l4xx_it.c ****   *
   9:Core/Src/stm32l4xx_it.c ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/stm32l4xx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32l4xx_it.c ****   *
  12:Core/Src/stm32l4xx_it.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/stm32l4xx_it.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/stm32l4xx_it.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/stm32l4xx_it.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/stm32l4xx_it.c ****   *
  17:Core/Src/stm32l4xx_it.c ****   ******************************************************************************
  18:Core/Src/stm32l4xx_it.c ****   */
  19:Core/Src/stm32l4xx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32l4xx_it.c **** 
  21:Core/Src/stm32l4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32l4xx_it.c **** #include "main.h"
  23:Core/Src/stm32l4xx_it.c **** #include "stm32l4xx_it.h"
  24:Core/Src/stm32l4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32l4xx_it.c **** /* USER CODE END Includes */
  27:Core/Src/stm32l4xx_it.c **** 
  28:Core/Src/stm32l4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN TD */
ARM GAS  /tmp/ccGTPl9s.s 			page 2


  30:Core/Src/stm32l4xx_it.c **** 
  31:Core/Src/stm32l4xx_it.c **** /* USER CODE END TD */
  32:Core/Src/stm32l4xx_it.c **** 
  33:Core/Src/stm32l4xx_it.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PD */
  35:Core/Src/stm32l4xx_it.c **** 
  36:Core/Src/stm32l4xx_it.c **** /* USER CODE END PD */
  37:Core/Src/stm32l4xx_it.c **** 
  38:Core/Src/stm32l4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PM */
  40:Core/Src/stm32l4xx_it.c **** 
  41:Core/Src/stm32l4xx_it.c **** /* USER CODE END PM */
  42:Core/Src/stm32l4xx_it.c **** 
  43:Core/Src/stm32l4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PV */
  45:Core/Src/stm32l4xx_it.c **** 
  46:Core/Src/stm32l4xx_it.c **** /* USER CODE END PV */
  47:Core/Src/stm32l4xx_it.c **** 
  48:Core/Src/stm32l4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN PFP */
  50:Core/Src/stm32l4xx_it.c **** 
  51:Core/Src/stm32l4xx_it.c **** /* USER CODE END PFP */
  52:Core/Src/stm32l4xx_it.c **** 
  53:Core/Src/stm32l4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN 0 */
  55:Core/Src/stm32l4xx_it.c **** 
  56:Core/Src/stm32l4xx_it.c **** /* USER CODE END 0 */
  57:Core/Src/stm32l4xx_it.c **** 
  58:Core/Src/stm32l4xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Core/Src/stm32l4xx_it.c **** extern CAN_HandleTypeDef hcan1;
  60:Core/Src/stm32l4xx_it.c **** extern UART_HandleTypeDef huart1;
  61:Core/Src/stm32l4xx_it.c **** extern TIM_HandleTypeDef htim16;
  62:Core/Src/stm32l4xx_it.c **** 
  63:Core/Src/stm32l4xx_it.c **** /* USER CODE BEGIN EV */
  64:Core/Src/stm32l4xx_it.c **** 
  65:Core/Src/stm32l4xx_it.c **** /* USER CODE END EV */
  66:Core/Src/stm32l4xx_it.c **** 
  67:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
  68:Core/Src/stm32l4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */
  69:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
  70:Core/Src/stm32l4xx_it.c **** /**
  71:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  72:Core/Src/stm32l4xx_it.c ****   */
  73:Core/Src/stm32l4xx_it.c **** void NMI_Handler(void)
  74:Core/Src/stm32l4xx_it.c **** {
  30              		.loc 1 74 0
  31              		.cfi_startproc
  32              		@ Volatile: function does not return.
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  36              	.L2:
  37 0000 FEE7     		b	.L2
  38              		.cfi_endproc
  39              	.LFE132:
  41 0002 00BF     		.section	.text.HardFault_Handler,"ax",%progbits
  42              		.align	2
ARM GAS  /tmp/ccGTPl9s.s 			page 3


  43              		.global	HardFault_Handler
  44              		.thumb
  45              		.thumb_func
  47              	HardFault_Handler:
  48              	.LFB133:
  75:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  76:Core/Src/stm32l4xx_it.c **** 
  77:Core/Src/stm32l4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  78:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  79:Core/Src/stm32l4xx_it.c ****   while (1)
  80:Core/Src/stm32l4xx_it.c ****   {
  81:Core/Src/stm32l4xx_it.c ****   }
  82:Core/Src/stm32l4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  83:Core/Src/stm32l4xx_it.c **** }
  84:Core/Src/stm32l4xx_it.c **** 
  85:Core/Src/stm32l4xx_it.c **** /**
  86:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  87:Core/Src/stm32l4xx_it.c ****   */
  88:Core/Src/stm32l4xx_it.c **** void HardFault_Handler(void)
  89:Core/Src/stm32l4xx_it.c **** {
  49              		.loc 1 89 0
  50              		.cfi_startproc
  51              		@ Volatile: function does not return.
  52              		@ args = 0, pretend = 0, frame = 0
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              		@ link register save eliminated.
  55              	.L4:
  56 0000 FEE7     		b	.L4
  57              		.cfi_endproc
  58              	.LFE133:
  60 0002 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
  61              		.align	2
  62              		.global	MemManage_Handler
  63              		.thumb
  64              		.thumb_func
  66              	MemManage_Handler:
  67              	.LFB134:
  90:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  91:Core/Src/stm32l4xx_it.c **** 
  92:Core/Src/stm32l4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  93:Core/Src/stm32l4xx_it.c ****   while (1)
  94:Core/Src/stm32l4xx_it.c ****   {
  95:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  96:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  97:Core/Src/stm32l4xx_it.c ****   }
  98:Core/Src/stm32l4xx_it.c **** }
  99:Core/Src/stm32l4xx_it.c **** 
 100:Core/Src/stm32l4xx_it.c **** /**
 101:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Memory management fault.
 102:Core/Src/stm32l4xx_it.c ****   */
 103:Core/Src/stm32l4xx_it.c **** void MemManage_Handler(void)
 104:Core/Src/stm32l4xx_it.c **** {
  68              		.loc 1 104 0
  69              		.cfi_startproc
  70              		@ Volatile: function does not return.
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccGTPl9s.s 			page 4


  73              		@ link register save eliminated.
  74              	.L6:
  75 0000 FEE7     		b	.L6
  76              		.cfi_endproc
  77              	.LFE134:
  79 0002 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
  80              		.align	2
  81              		.global	BusFault_Handler
  82              		.thumb
  83              		.thumb_func
  85              	BusFault_Handler:
  86              	.LFB135:
 105:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 106:Core/Src/stm32l4xx_it.c **** 
 107:Core/Src/stm32l4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 108:Core/Src/stm32l4xx_it.c ****   while (1)
 109:Core/Src/stm32l4xx_it.c ****   {
 110:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 111:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 112:Core/Src/stm32l4xx_it.c ****   }
 113:Core/Src/stm32l4xx_it.c **** }
 114:Core/Src/stm32l4xx_it.c **** 
 115:Core/Src/stm32l4xx_it.c **** /**
 116:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 117:Core/Src/stm32l4xx_it.c ****   */
 118:Core/Src/stm32l4xx_it.c **** void BusFault_Handler(void)
 119:Core/Src/stm32l4xx_it.c **** {
  87              		.loc 1 119 0
  88              		.cfi_startproc
  89              		@ Volatile: function does not return.
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93              	.L8:
  94 0000 FEE7     		b	.L8
  95              		.cfi_endproc
  96              	.LFE135:
  98 0002 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
  99              		.align	2
 100              		.global	UsageFault_Handler
 101              		.thumb
 102              		.thumb_func
 104              	UsageFault_Handler:
 105              	.LFB136:
 120:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 121:Core/Src/stm32l4xx_it.c **** 
 122:Core/Src/stm32l4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 123:Core/Src/stm32l4xx_it.c ****   while (1)
 124:Core/Src/stm32l4xx_it.c ****   {
 125:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 126:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 127:Core/Src/stm32l4xx_it.c ****   }
 128:Core/Src/stm32l4xx_it.c **** }
 129:Core/Src/stm32l4xx_it.c **** 
 130:Core/Src/stm32l4xx_it.c **** /**
 131:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 132:Core/Src/stm32l4xx_it.c ****   */
ARM GAS  /tmp/ccGTPl9s.s 			page 5


 133:Core/Src/stm32l4xx_it.c **** void UsageFault_Handler(void)
 134:Core/Src/stm32l4xx_it.c **** {
 106              		.loc 1 134 0
 107              		.cfi_startproc
 108              		@ Volatile: function does not return.
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		@ link register save eliminated.
 112              	.L10:
 113 0000 FEE7     		b	.L10
 114              		.cfi_endproc
 115              	.LFE136:
 117 0002 00BF     		.section	.text.SVC_Handler,"ax",%progbits
 118              		.align	2
 119              		.global	SVC_Handler
 120              		.thumb
 121              		.thumb_func
 123              	SVC_Handler:
 124              	.LFB137:
 135:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 136:Core/Src/stm32l4xx_it.c **** 
 137:Core/Src/stm32l4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 138:Core/Src/stm32l4xx_it.c ****   while (1)
 139:Core/Src/stm32l4xx_it.c ****   {
 140:Core/Src/stm32l4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 141:Core/Src/stm32l4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 142:Core/Src/stm32l4xx_it.c ****   }
 143:Core/Src/stm32l4xx_it.c **** }
 144:Core/Src/stm32l4xx_it.c **** 
 145:Core/Src/stm32l4xx_it.c **** /**
 146:Core/Src/stm32l4xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 147:Core/Src/stm32l4xx_it.c ****   */
 148:Core/Src/stm32l4xx_it.c **** void SVC_Handler(void)
 149:Core/Src/stm32l4xx_it.c **** {
 125              		.loc 1 149 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
 130 0000 7047     		bx	lr
 131              		.cfi_endproc
 132              	.LFE137:
 134 0002 00BF     		.section	.text.DebugMon_Handler,"ax",%progbits
 135              		.align	2
 136              		.global	DebugMon_Handler
 137              		.thumb
 138              		.thumb_func
 140              	DebugMon_Handler:
 141              	.LFB138:
 150:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 151:Core/Src/stm32l4xx_it.c **** 
 152:Core/Src/stm32l4xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 153:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 154:Core/Src/stm32l4xx_it.c **** 
 155:Core/Src/stm32l4xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 156:Core/Src/stm32l4xx_it.c **** }
 157:Core/Src/stm32l4xx_it.c **** 
ARM GAS  /tmp/ccGTPl9s.s 			page 6


 158:Core/Src/stm32l4xx_it.c **** /**
 159:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Debug monitor.
 160:Core/Src/stm32l4xx_it.c ****   */
 161:Core/Src/stm32l4xx_it.c **** void DebugMon_Handler(void)
 162:Core/Src/stm32l4xx_it.c **** {
 142              		.loc 1 162 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 147 0000 7047     		bx	lr
 148              		.cfi_endproc
 149              	.LFE138:
 151 0002 00BF     		.section	.text.PendSV_Handler,"ax",%progbits
 152              		.align	2
 153              		.global	PendSV_Handler
 154              		.thumb
 155              		.thumb_func
 157              	PendSV_Handler:
 158              	.LFB139:
 163:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 164:Core/Src/stm32l4xx_it.c **** 
 165:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 166:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 167:Core/Src/stm32l4xx_it.c **** 
 168:Core/Src/stm32l4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 169:Core/Src/stm32l4xx_it.c **** }
 170:Core/Src/stm32l4xx_it.c **** 
 171:Core/Src/stm32l4xx_it.c **** /**
 172:Core/Src/stm32l4xx_it.c ****   * @brief This function handles Pendable request for system service.
 173:Core/Src/stm32l4xx_it.c ****   */
 174:Core/Src/stm32l4xx_it.c **** void PendSV_Handler(void)
 175:Core/Src/stm32l4xx_it.c **** {
 159              		.loc 1 175 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              		@ link register save eliminated.
 164 0000 7047     		bx	lr
 165              		.cfi_endproc
 166              	.LFE139:
 168 0002 00BF     		.section	.text.SysTick_Handler,"ax",%progbits
 169              		.align	2
 170              		.global	SysTick_Handler
 171              		.thumb
 172              		.thumb_func
 174              	SysTick_Handler:
 175              	.LFB140:
 176:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 177:Core/Src/stm32l4xx_it.c **** 
 178:Core/Src/stm32l4xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 179:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 180:Core/Src/stm32l4xx_it.c **** 
 181:Core/Src/stm32l4xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 182:Core/Src/stm32l4xx_it.c **** }
 183:Core/Src/stm32l4xx_it.c **** 
 184:Core/Src/stm32l4xx_it.c **** /**
ARM GAS  /tmp/ccGTPl9s.s 			page 7


 185:Core/Src/stm32l4xx_it.c ****   * @brief This function handles System tick timer.
 186:Core/Src/stm32l4xx_it.c ****   */
 187:Core/Src/stm32l4xx_it.c **** void SysTick_Handler(void)
 188:Core/Src/stm32l4xx_it.c **** {
 176              		.loc 1 188 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
 181 0000 7047     		bx	lr
 182              		.cfi_endproc
 183              	.LFE140:
 185 0002 00BF     		.section	.text.CAN1_TX_IRQHandler,"ax",%progbits
 186              		.align	2
 187              		.global	CAN1_TX_IRQHandler
 188              		.thumb
 189              		.thumb_func
 191              	CAN1_TX_IRQHandler:
 192              	.LFB141:
 189:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 190:Core/Src/stm32l4xx_it.c **** 
 191:Core/Src/stm32l4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 192:Core/Src/stm32l4xx_it.c **** 
 193:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 194:Core/Src/stm32l4xx_it.c **** 
 195:Core/Src/stm32l4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 196:Core/Src/stm32l4xx_it.c **** }
 197:Core/Src/stm32l4xx_it.c **** 
 198:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
 199:Core/Src/stm32l4xx_it.c **** /* STM32L4xx Peripheral Interrupt Handlers                                    */
 200:Core/Src/stm32l4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 201:Core/Src/stm32l4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 202:Core/Src/stm32l4xx_it.c **** /* please refer to the startup file (startup_stm32l4xx.s).                    */
 203:Core/Src/stm32l4xx_it.c **** /******************************************************************************/
 204:Core/Src/stm32l4xx_it.c **** 
 205:Core/Src/stm32l4xx_it.c **** /**
 206:Core/Src/stm32l4xx_it.c ****   * @brief This function handles CAN1 TX interrupt.
 207:Core/Src/stm32l4xx_it.c ****   */
 208:Core/Src/stm32l4xx_it.c **** void CAN1_TX_IRQHandler(void)
 209:Core/Src/stm32l4xx_it.c **** {
 193              		.loc 1 209 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197              		.loc 1 209 0
 198 0000 08B5     		push	{r3, lr}
 199              	.LCFI0:
 200              		.cfi_def_cfa_offset 8
 201              		.cfi_offset 3, -8
 202              		.cfi_offset 14, -4
 210:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 0 */
 211:Core/Src/stm32l4xx_it.c **** 
 212:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 0 */
 213:Core/Src/stm32l4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 203              		.loc 1 213 0
 204 0002 0248     		ldr	r0, .L17
 205 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
ARM GAS  /tmp/ccGTPl9s.s 			page 8


 206              	.LVL0:
 207 0008 08BD     		pop	{r3, pc}
 208              	.L18:
 209 000a 00BF     		.align	2
 210              	.L17:
 211 000c 00000000 		.word	hcan1
 212              		.cfi_endproc
 213              	.LFE141:
 215              		.section	.text.CAN1_RX0_IRQHandler,"ax",%progbits
 216              		.align	2
 217              		.global	CAN1_RX0_IRQHandler
 218              		.thumb
 219              		.thumb_func
 221              	CAN1_RX0_IRQHandler:
 222              	.LFB142:
 214:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_TX_IRQn 1 */
 215:Core/Src/stm32l4xx_it.c **** 
 216:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_TX_IRQn 1 */
 217:Core/Src/stm32l4xx_it.c **** }
 218:Core/Src/stm32l4xx_it.c **** 
 219:Core/Src/stm32l4xx_it.c **** /**
 220:Core/Src/stm32l4xx_it.c ****   * @brief This function handles CAN1 RX0 interrupt.
 221:Core/Src/stm32l4xx_it.c ****   */
 222:Core/Src/stm32l4xx_it.c **** void CAN1_RX0_IRQHandler(void)
 223:Core/Src/stm32l4xx_it.c **** {
 223              		.loc 1 223 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227 0000 08B5     		push	{r3, lr}
 228              	.LCFI1:
 229              		.cfi_def_cfa_offset 8
 230              		.cfi_offset 3, -8
 231              		.cfi_offset 14, -4
 224:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
 225:Core/Src/stm32l4xx_it.c **** 
 226:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 0 */
 227:Core/Src/stm32l4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 232              		.loc 1 227 0
 233 0002 0248     		ldr	r0, .L21
 234 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 235              	.LVL1:
 236 0008 08BD     		pop	{r3, pc}
 237              	.L22:
 238 000a 00BF     		.align	2
 239              	.L21:
 240 000c 00000000 		.word	hcan1
 241              		.cfi_endproc
 242              	.LFE142:
 244              		.section	.text.CAN1_RX1_IRQHandler,"ax",%progbits
 245              		.align	2
 246              		.global	CAN1_RX1_IRQHandler
 247              		.thumb
 248              		.thumb_func
 250              	CAN1_RX1_IRQHandler:
 251              	.LFB143:
 228:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
ARM GAS  /tmp/ccGTPl9s.s 			page 9


 229:Core/Src/stm32l4xx_it.c **** 
 230:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_RX0_IRQn 1 */
 231:Core/Src/stm32l4xx_it.c **** }
 232:Core/Src/stm32l4xx_it.c **** 
 233:Core/Src/stm32l4xx_it.c **** /**
 234:Core/Src/stm32l4xx_it.c ****   * @brief This function handles CAN1 RX1 interrupt.
 235:Core/Src/stm32l4xx_it.c ****   */
 236:Core/Src/stm32l4xx_it.c **** void CAN1_RX1_IRQHandler(void)
 237:Core/Src/stm32l4xx_it.c **** {
 252              		.loc 1 237 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256 0000 08B5     		push	{r3, lr}
 257              	.LCFI2:
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 3, -8
 260              		.cfi_offset 14, -4
 238:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 0 */
 239:Core/Src/stm32l4xx_it.c **** 
 240:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 0 */
 241:Core/Src/stm32l4xx_it.c ****   HAL_CAN_IRQHandler(&hcan1);
 261              		.loc 1 241 0
 262 0002 0248     		ldr	r0, .L25
 263 0004 FFF7FEFF 		bl	HAL_CAN_IRQHandler
 264              	.LVL2:
 265 0008 08BD     		pop	{r3, pc}
 266              	.L26:
 267 000a 00BF     		.align	2
 268              	.L25:
 269 000c 00000000 		.word	hcan1
 270              		.cfi_endproc
 271              	.LFE143:
 273              		.section	.text.TIM1_UP_TIM16_IRQHandler,"ax",%progbits
 274              		.align	2
 275              		.global	TIM1_UP_TIM16_IRQHandler
 276              		.thumb
 277              		.thumb_func
 279              	TIM1_UP_TIM16_IRQHandler:
 280              	.LFB144:
 242:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN CAN1_RX1_IRQn 1 */
 243:Core/Src/stm32l4xx_it.c **** 
 244:Core/Src/stm32l4xx_it.c ****   /* USER CODE END CAN1_RX1_IRQn 1 */
 245:Core/Src/stm32l4xx_it.c **** }
 246:Core/Src/stm32l4xx_it.c **** 
 247:Core/Src/stm32l4xx_it.c **** /**
 248:Core/Src/stm32l4xx_it.c ****   * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
 249:Core/Src/stm32l4xx_it.c ****   */
 250:Core/Src/stm32l4xx_it.c **** void TIM1_UP_TIM16_IRQHandler(void)
 251:Core/Src/stm32l4xx_it.c **** {
 281              		.loc 1 251 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285 0000 08B5     		push	{r3, lr}
 286              	.LCFI3:
 287              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccGTPl9s.s 			page 10


 288              		.cfi_offset 3, -8
 289              		.cfi_offset 14, -4
 252:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
 253:Core/Src/stm32l4xx_it.c **** 
 254:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
 255:Core/Src/stm32l4xx_it.c ****   HAL_TIM_IRQHandler(&htim16);
 290              		.loc 1 255 0
 291 0002 0248     		ldr	r0, .L29
 292 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 293              	.LVL3:
 294 0008 08BD     		pop	{r3, pc}
 295              	.L30:
 296 000a 00BF     		.align	2
 297              	.L29:
 298 000c 00000000 		.word	htim16
 299              		.cfi_endproc
 300              	.LFE144:
 302              		.section	.text.USART1_IRQHandler,"ax",%progbits
 303              		.align	2
 304              		.global	USART1_IRQHandler
 305              		.thumb
 306              		.thumb_func
 308              	USART1_IRQHandler:
 309              	.LFB145:
 256:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
 257:Core/Src/stm32l4xx_it.c **** 
 258:Core/Src/stm32l4xx_it.c ****   /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
 259:Core/Src/stm32l4xx_it.c **** }
 260:Core/Src/stm32l4xx_it.c **** 
 261:Core/Src/stm32l4xx_it.c **** /**
 262:Core/Src/stm32l4xx_it.c ****   * @brief This function handles USART1 global interrupt.
 263:Core/Src/stm32l4xx_it.c ****   */
 264:Core/Src/stm32l4xx_it.c **** void USART1_IRQHandler(void)
 265:Core/Src/stm32l4xx_it.c **** {
 310              		.loc 1 265 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314 0000 08B5     		push	{r3, lr}
 315              	.LCFI4:
 316              		.cfi_def_cfa_offset 8
 317              		.cfi_offset 3, -8
 318              		.cfi_offset 14, -4
 266:Core/Src/stm32l4xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 267:Core/Src/stm32l4xx_it.c **** 
 268:Core/Src/stm32l4xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 269:Core/Src/stm32l4xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 319              		.loc 1 269 0
 320 0002 0248     		ldr	r0, .L33
 321 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 322              	.LVL4:
 323 0008 08BD     		pop	{r3, pc}
 324              	.L34:
 325 000a 00BF     		.align	2
 326              	.L33:
 327 000c 00000000 		.word	huart1
 328              		.cfi_endproc
ARM GAS  /tmp/ccGTPl9s.s 			page 11


 329              	.LFE145:
 331              		.text
 332              	.Letext0:
 333              		.file 2 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 334              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 335              		.file 4 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l431xx.h"
 336              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 337              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 338              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 339              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_can.h"
 340              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_tim.h"
 341              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_uart.h"
 342              		.file 11 "Drivers/CMSIS/Include/cmsis_gcc.h"
 343              		.file 12 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/ccGTPl9s.s 			page 12


DEFINED SYMBOLS
                            *ABS*:00000000 stm32l4xx_it.c
     /tmp/ccGTPl9s.s:22     .text.NMI_Handler:00000000 $t
     /tmp/ccGTPl9s.s:27     .text.NMI_Handler:00000000 NMI_Handler
     /tmp/ccGTPl9s.s:42     .text.HardFault_Handler:00000000 $t
     /tmp/ccGTPl9s.s:47     .text.HardFault_Handler:00000000 HardFault_Handler
     /tmp/ccGTPl9s.s:61     .text.MemManage_Handler:00000000 $t
     /tmp/ccGTPl9s.s:66     .text.MemManage_Handler:00000000 MemManage_Handler
     /tmp/ccGTPl9s.s:80     .text.BusFault_Handler:00000000 $t
     /tmp/ccGTPl9s.s:85     .text.BusFault_Handler:00000000 BusFault_Handler
     /tmp/ccGTPl9s.s:99     .text.UsageFault_Handler:00000000 $t
     /tmp/ccGTPl9s.s:104    .text.UsageFault_Handler:00000000 UsageFault_Handler
     /tmp/ccGTPl9s.s:118    .text.SVC_Handler:00000000 $t
     /tmp/ccGTPl9s.s:123    .text.SVC_Handler:00000000 SVC_Handler
     /tmp/ccGTPl9s.s:135    .text.DebugMon_Handler:00000000 $t
     /tmp/ccGTPl9s.s:140    .text.DebugMon_Handler:00000000 DebugMon_Handler
     /tmp/ccGTPl9s.s:152    .text.PendSV_Handler:00000000 $t
     /tmp/ccGTPl9s.s:157    .text.PendSV_Handler:00000000 PendSV_Handler
     /tmp/ccGTPl9s.s:169    .text.SysTick_Handler:00000000 $t
     /tmp/ccGTPl9s.s:174    .text.SysTick_Handler:00000000 SysTick_Handler
     /tmp/ccGTPl9s.s:186    .text.CAN1_TX_IRQHandler:00000000 $t
     /tmp/ccGTPl9s.s:191    .text.CAN1_TX_IRQHandler:00000000 CAN1_TX_IRQHandler
     /tmp/ccGTPl9s.s:211    .text.CAN1_TX_IRQHandler:0000000c $d
     /tmp/ccGTPl9s.s:216    .text.CAN1_RX0_IRQHandler:00000000 $t
     /tmp/ccGTPl9s.s:221    .text.CAN1_RX0_IRQHandler:00000000 CAN1_RX0_IRQHandler
     /tmp/ccGTPl9s.s:240    .text.CAN1_RX0_IRQHandler:0000000c $d
     /tmp/ccGTPl9s.s:245    .text.CAN1_RX1_IRQHandler:00000000 $t
     /tmp/ccGTPl9s.s:250    .text.CAN1_RX1_IRQHandler:00000000 CAN1_RX1_IRQHandler
     /tmp/ccGTPl9s.s:269    .text.CAN1_RX1_IRQHandler:0000000c $d
     /tmp/ccGTPl9s.s:274    .text.TIM1_UP_TIM16_IRQHandler:00000000 $t
     /tmp/ccGTPl9s.s:279    .text.TIM1_UP_TIM16_IRQHandler:00000000 TIM1_UP_TIM16_IRQHandler
     /tmp/ccGTPl9s.s:298    .text.TIM1_UP_TIM16_IRQHandler:0000000c $d
     /tmp/ccGTPl9s.s:303    .text.USART1_IRQHandler:00000000 $t
     /tmp/ccGTPl9s.s:308    .text.USART1_IRQHandler:00000000 USART1_IRQHandler
     /tmp/ccGTPl9s.s:327    .text.USART1_IRQHandler:0000000c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_CAN_IRQHandler
hcan1
HAL_TIM_IRQHandler
htim16
HAL_UART_IRQHandler
huart1
