ARM GAS  /tmp/ccsBzfL5.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"system_stm32l4xx.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.SystemInit,"ax",%progbits
  22              		.align	2
  23              		.global	SystemInit
  24              		.thumb
  25              		.thumb_func
  27              	SystemInit:
  28              	.LFB132:
  29              		.file 1 "Core/Src/system_stm32l4xx.c"
   1:Core/Src/system_stm32l4xx.c **** /**
   2:Core/Src/system_stm32l4xx.c ****   ******************************************************************************
   3:Core/Src/system_stm32l4xx.c ****   * @file    system_stm32l4xx.c
   4:Core/Src/system_stm32l4xx.c ****   * @author  MCD Application Team
   5:Core/Src/system_stm32l4xx.c ****   * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File
   6:Core/Src/system_stm32l4xx.c ****   *
   7:Core/Src/system_stm32l4xx.c ****   *   This file provides two functions and one global variable to be called from
   8:Core/Src/system_stm32l4xx.c ****   *   user application:
   9:Core/Src/system_stm32l4xx.c ****   *      - SystemInit(): This function is called at startup just after reset and
  10:Core/Src/system_stm32l4xx.c ****   *                      before branch to main program. This call is made inside
  11:Core/Src/system_stm32l4xx.c ****   *                      the "startup_stm32l4xx.s" file.
  12:Core/Src/system_stm32l4xx.c ****   *
  13:Core/Src/system_stm32l4xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Core/Src/system_stm32l4xx.c ****   *                                  by the user application to setup the SysTick
  15:Core/Src/system_stm32l4xx.c ****   *                                  timer or configure other parameters.
  16:Core/Src/system_stm32l4xx.c ****   *
  17:Core/Src/system_stm32l4xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Core/Src/system_stm32l4xx.c ****   *                                 be called whenever the core clock is changed
  19:Core/Src/system_stm32l4xx.c ****   *                                 during program execution.
  20:Core/Src/system_stm32l4xx.c ****   *
  21:Core/Src/system_stm32l4xx.c ****   *   After each device reset the MSI (4 MHz) is used as system clock source.
  22:Core/Src/system_stm32l4xx.c ****   *   Then SystemInit() function is called, in "startup_stm32l4xx.s" file, to
  23:Core/Src/system_stm32l4xx.c ****   *   configure the system clock before to branch to main program.
  24:Core/Src/system_stm32l4xx.c ****   *
  25:Core/Src/system_stm32l4xx.c ****   *   This file configures the system clock as follows:
  26:Core/Src/system_stm32l4xx.c ****   *=============================================================================
  27:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  28:Core/Src/system_stm32l4xx.c ****   *        System Clock source                    | MSI
  29:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
ARM GAS  /tmp/ccsBzfL5.s 			page 2


  30:Core/Src/system_stm32l4xx.c ****   *        SYSCLK(Hz)                             | 4000000
  31:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  32:Core/Src/system_stm32l4xx.c ****   *        HCLK(Hz)                               | 4000000
  33:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  34:Core/Src/system_stm32l4xx.c ****   *        AHB Prescaler                          | 1
  35:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  36:Core/Src/system_stm32l4xx.c ****   *        APB1 Prescaler                         | 1
  37:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  38:Core/Src/system_stm32l4xx.c ****   *        APB2 Prescaler                         | 1
  39:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  40:Core/Src/system_stm32l4xx.c ****   *        PLL_M                                  | 1
  41:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  42:Core/Src/system_stm32l4xx.c ****   *        PLL_N                                  | 8
  43:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  44:Core/Src/system_stm32l4xx.c ****   *        PLL_P                                  | 7
  45:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  46:Core/Src/system_stm32l4xx.c ****   *        PLL_Q                                  | 2
  47:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  48:Core/Src/system_stm32l4xx.c ****   *        PLL_R                                  | 2
  49:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  50:Core/Src/system_stm32l4xx.c ****   *        PLLSAI1_P                              | NA
  51:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  52:Core/Src/system_stm32l4xx.c ****   *        PLLSAI1_Q                              | NA
  53:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  54:Core/Src/system_stm32l4xx.c ****   *        PLLSAI1_R                              | NA
  55:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  56:Core/Src/system_stm32l4xx.c ****   *        PLLSAI2_P                              | NA
  57:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  58:Core/Src/system_stm32l4xx.c ****   *        PLLSAI2_Q                              | NA
  59:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  60:Core/Src/system_stm32l4xx.c ****   *        PLLSAI2_R                              | NA
  61:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  62:Core/Src/system_stm32l4xx.c ****   *        Require 48MHz for USB OTG FS,          | Disabled
  63:Core/Src/system_stm32l4xx.c ****   *        SDIO and RNG clock                     |
  64:Core/Src/system_stm32l4xx.c ****   *-----------------------------------------------------------------------------
  65:Core/Src/system_stm32l4xx.c ****   *=============================================================================
  66:Core/Src/system_stm32l4xx.c ****   ******************************************************************************
  67:Core/Src/system_stm32l4xx.c ****   * @attention
  68:Core/Src/system_stm32l4xx.c ****   *
  69:Core/Src/system_stm32l4xx.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  70:Core/Src/system_stm32l4xx.c ****   * All rights reserved.</center></h2>
  71:Core/Src/system_stm32l4xx.c ****   *
  72:Core/Src/system_stm32l4xx.c ****   * This software component is licensed by ST under Apache License, Version 2.0,
  73:Core/Src/system_stm32l4xx.c ****   * the "License"; You may not use this file except in compliance with the
  74:Core/Src/system_stm32l4xx.c ****   * License. You may obtain a copy of the License at:
  75:Core/Src/system_stm32l4xx.c ****   *                        opensource.org/licenses/Apache-2.0
  76:Core/Src/system_stm32l4xx.c ****   *
  77:Core/Src/system_stm32l4xx.c ****   ******************************************************************************
  78:Core/Src/system_stm32l4xx.c ****   */
  79:Core/Src/system_stm32l4xx.c **** 
  80:Core/Src/system_stm32l4xx.c **** /** @addtogroup CMSIS
  81:Core/Src/system_stm32l4xx.c ****   * @{
  82:Core/Src/system_stm32l4xx.c ****   */
  83:Core/Src/system_stm32l4xx.c **** 
  84:Core/Src/system_stm32l4xx.c **** /** @addtogroup stm32l4xx_system
  85:Core/Src/system_stm32l4xx.c ****   * @{
  86:Core/Src/system_stm32l4xx.c ****   */
ARM GAS  /tmp/ccsBzfL5.s 			page 3


  87:Core/Src/system_stm32l4xx.c **** 
  88:Core/Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_Includes
  89:Core/Src/system_stm32l4xx.c ****   * @{
  90:Core/Src/system_stm32l4xx.c ****   */
  91:Core/Src/system_stm32l4xx.c **** 
  92:Core/Src/system_stm32l4xx.c **** #include "stm32l4xx.h"
  93:Core/Src/system_stm32l4xx.c **** 
  94:Core/Src/system_stm32l4xx.c **** /**
  95:Core/Src/system_stm32l4xx.c ****   * @}
  96:Core/Src/system_stm32l4xx.c ****   */
  97:Core/Src/system_stm32l4xx.c **** 
  98:Core/Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_TypesDefinitions
  99:Core/Src/system_stm32l4xx.c ****   * @{
 100:Core/Src/system_stm32l4xx.c ****   */
 101:Core/Src/system_stm32l4xx.c **** 
 102:Core/Src/system_stm32l4xx.c **** /**
 103:Core/Src/system_stm32l4xx.c ****   * @}
 104:Core/Src/system_stm32l4xx.c ****   */
 105:Core/Src/system_stm32l4xx.c **** 
 106:Core/Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_Defines
 107:Core/Src/system_stm32l4xx.c ****   * @{
 108:Core/Src/system_stm32l4xx.c ****   */
 109:Core/Src/system_stm32l4xx.c **** 
 110:Core/Src/system_stm32l4xx.c **** #if !defined  (HSE_VALUE)
 111:Core/Src/system_stm32l4xx.c ****   #define HSE_VALUE    8000000U  /*!< Value of the External oscillator in Hz */
 112:Core/Src/system_stm32l4xx.c **** #endif /* HSE_VALUE */
 113:Core/Src/system_stm32l4xx.c **** 
 114:Core/Src/system_stm32l4xx.c **** #if !defined  (MSI_VALUE)
 115:Core/Src/system_stm32l4xx.c ****   #define MSI_VALUE    4000000U  /*!< Value of the Internal oscillator in Hz*/
 116:Core/Src/system_stm32l4xx.c **** #endif /* MSI_VALUE */
 117:Core/Src/system_stm32l4xx.c **** 
 118:Core/Src/system_stm32l4xx.c **** #if !defined  (HSI_VALUE)
 119:Core/Src/system_stm32l4xx.c ****   #define HSI_VALUE    16000000U /*!< Value of the Internal oscillator in Hz*/
 120:Core/Src/system_stm32l4xx.c **** #endif /* HSI_VALUE */
 121:Core/Src/system_stm32l4xx.c **** 
 122:Core/Src/system_stm32l4xx.c **** /* Note: Following vector table addresses must be defined in line with linker
 123:Core/Src/system_stm32l4xx.c ****          configuration. */
 124:Core/Src/system_stm32l4xx.c **** /*!< Uncomment the following line if you need to relocate the vector table
 125:Core/Src/system_stm32l4xx.c ****      anywhere in Flash or Sram, else the vector table is kept at the automatic
 126:Core/Src/system_stm32l4xx.c ****      remap of boot address selected */
 127:Core/Src/system_stm32l4xx.c **** /* #define USER_VECT_TAB_ADDRESS */
 128:Core/Src/system_stm32l4xx.c **** 
 129:Core/Src/system_stm32l4xx.c **** #if defined(USER_VECT_TAB_ADDRESS)
 130:Core/Src/system_stm32l4xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table
 131:Core/Src/system_stm32l4xx.c ****      in Sram else user remap will be done in Flash. */
 132:Core/Src/system_stm32l4xx.c **** /* #define VECT_TAB_SRAM */
 133:Core/Src/system_stm32l4xx.c **** 
 134:Core/Src/system_stm32l4xx.c **** #if defined(VECT_TAB_SRAM)
 135:Core/Src/system_stm32l4xx.c **** #define VECT_TAB_BASE_ADDRESS   SRAM1_BASE      /*!< Vector Table base address field.
 136:Core/Src/system_stm32l4xx.c ****                                                      This value must be a multiple of 0x200. */
 137:Core/Src/system_stm32l4xx.c **** #define VECT_TAB_OFFSET         0x00000000U     /*!< Vector Table base offset field.
 138:Core/Src/system_stm32l4xx.c ****                                                      This value must be a multiple of 0x200. */
 139:Core/Src/system_stm32l4xx.c **** #else
 140:Core/Src/system_stm32l4xx.c **** #define VECT_TAB_BASE_ADDRESS   FLASH_BASE      /*!< Vector Table base address field.
 141:Core/Src/system_stm32l4xx.c ****                                                      This value must be a multiple of 0x200. */
 142:Core/Src/system_stm32l4xx.c **** #define VECT_TAB_OFFSET         0x00000000U     /*!< Vector Table base offset field.
 143:Core/Src/system_stm32l4xx.c ****                                                      This value must be a multiple of 0x200. */
ARM GAS  /tmp/ccsBzfL5.s 			page 4


 144:Core/Src/system_stm32l4xx.c **** #endif /* VECT_TAB_SRAM */
 145:Core/Src/system_stm32l4xx.c **** #endif /* USER_VECT_TAB_ADDRESS */
 146:Core/Src/system_stm32l4xx.c **** 
 147:Core/Src/system_stm32l4xx.c **** /******************************************************************************/
 148:Core/Src/system_stm32l4xx.c **** /**
 149:Core/Src/system_stm32l4xx.c ****   * @}
 150:Core/Src/system_stm32l4xx.c ****   */
 151:Core/Src/system_stm32l4xx.c **** 
 152:Core/Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_Macros
 153:Core/Src/system_stm32l4xx.c ****   * @{
 154:Core/Src/system_stm32l4xx.c ****   */
 155:Core/Src/system_stm32l4xx.c **** 
 156:Core/Src/system_stm32l4xx.c **** /**
 157:Core/Src/system_stm32l4xx.c ****   * @}
 158:Core/Src/system_stm32l4xx.c ****   */
 159:Core/Src/system_stm32l4xx.c **** 
 160:Core/Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_Variables
 161:Core/Src/system_stm32l4xx.c ****   * @{
 162:Core/Src/system_stm32l4xx.c ****   */
 163:Core/Src/system_stm32l4xx.c ****   /* The SystemCoreClock variable is updated in three ways:
 164:Core/Src/system_stm32l4xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 165:Core/Src/system_stm32l4xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 166:Core/Src/system_stm32l4xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 167:Core/Src/system_stm32l4xx.c ****          Note: If you use this function to configure the system clock; then there
 168:Core/Src/system_stm32l4xx.c ****                is no need to call the 2 first functions listed above, since SystemCoreClock
 169:Core/Src/system_stm32l4xx.c ****                variable is updated automatically.
 170:Core/Src/system_stm32l4xx.c ****   */
 171:Core/Src/system_stm32l4xx.c ****   uint32_t SystemCoreClock = 4000000U;
 172:Core/Src/system_stm32l4xx.c **** 
 173:Core/Src/system_stm32l4xx.c ****   const uint8_t  AHBPrescTable[16] = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U, 6U, 7U, 8U, 9
 174:Core/Src/system_stm32l4xx.c ****   const uint8_t  APBPrescTable[8] =  {0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U};
 175:Core/Src/system_stm32l4xx.c ****   const uint32_t MSIRangeTable[12] = {100000U,   200000U,   400000U,   800000U,  1000000U,  2000000
 176:Core/Src/system_stm32l4xx.c ****                                       4000000U, 8000000U, 16000000U, 24000000U, 32000000U, 48000000
 177:Core/Src/system_stm32l4xx.c **** /**
 178:Core/Src/system_stm32l4xx.c ****   * @}
 179:Core/Src/system_stm32l4xx.c ****   */
 180:Core/Src/system_stm32l4xx.c **** 
 181:Core/Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_FunctionPrototypes
 182:Core/Src/system_stm32l4xx.c ****   * @{
 183:Core/Src/system_stm32l4xx.c ****   */
 184:Core/Src/system_stm32l4xx.c **** 
 185:Core/Src/system_stm32l4xx.c **** /**
 186:Core/Src/system_stm32l4xx.c ****   * @}
 187:Core/Src/system_stm32l4xx.c ****   */
 188:Core/Src/system_stm32l4xx.c **** 
 189:Core/Src/system_stm32l4xx.c **** /** @addtogroup STM32L4xx_System_Private_Functions
 190:Core/Src/system_stm32l4xx.c ****   * @{
 191:Core/Src/system_stm32l4xx.c ****   */
 192:Core/Src/system_stm32l4xx.c **** 
 193:Core/Src/system_stm32l4xx.c **** /**
 194:Core/Src/system_stm32l4xx.c ****   * @brief  Setup the microcontroller system.
 195:Core/Src/system_stm32l4xx.c ****   * @retval None
 196:Core/Src/system_stm32l4xx.c ****   */
 197:Core/Src/system_stm32l4xx.c **** 
 198:Core/Src/system_stm32l4xx.c **** void SystemInit(void)
 199:Core/Src/system_stm32l4xx.c **** {
  30              		.loc 1 199 0
ARM GAS  /tmp/ccsBzfL5.s 			page 5


  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 200:Core/Src/system_stm32l4xx.c **** #if defined(USER_VECT_TAB_ADDRESS)
 201:Core/Src/system_stm32l4xx.c ****   /* Configure the Vector Table location -------------------------------------*/
 202:Core/Src/system_stm32l4xx.c ****   SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 203:Core/Src/system_stm32l4xx.c **** #endif
 204:Core/Src/system_stm32l4xx.c **** 
 205:Core/Src/system_stm32l4xx.c ****   /* FPU settings ------------------------------------------------------------*/
 206:Core/Src/system_stm32l4xx.c **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 207:Core/Src/system_stm32l4xx.c ****   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
  35              		.loc 1 207 0
  36 0000 0E4A     		ldr	r2, .L2
  37 0002 D2F88830 		ldr	r3, [r2, #136]
  38 0006 43F47003 		orr	r3, r3, #15728640
  39 000a C2F88830 		str	r3, [r2, #136]
 208:Core/Src/system_stm32l4xx.c **** #endif
 209:Core/Src/system_stm32l4xx.c **** 
 210:Core/Src/system_stm32l4xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 211:Core/Src/system_stm32l4xx.c ****   /* Set MSION bit */
 212:Core/Src/system_stm32l4xx.c ****   RCC->CR |= RCC_CR_MSION;
  40              		.loc 1 212 0
  41 000e 0C4B     		ldr	r3, .L2+4
  42 0010 1A68     		ldr	r2, [r3]
  43 0012 42F00102 		orr	r2, r2, #1
  44 0016 1A60     		str	r2, [r3]
 213:Core/Src/system_stm32l4xx.c **** 
 214:Core/Src/system_stm32l4xx.c ****   /* Reset CFGR register */
 215:Core/Src/system_stm32l4xx.c ****   RCC->CFGR = 0x00000000U;
  45              		.loc 1 215 0
  46 0018 0021     		movs	r1, #0
  47 001a 9960     		str	r1, [r3, #8]
 216:Core/Src/system_stm32l4xx.c **** 
 217:Core/Src/system_stm32l4xx.c ****   /* Reset HSEON, CSSON , HSION, and PLLON bits */
 218:Core/Src/system_stm32l4xx.c ****   RCC->CR &= 0xEAF6FFFFU;
  48              		.loc 1 218 0
  49 001c 1A68     		ldr	r2, [r3]
  50 001e 22F0A852 		bic	r2, r2, #352321536
  51 0022 22F41022 		bic	r2, r2, #589824
  52 0026 1A60     		str	r2, [r3]
 219:Core/Src/system_stm32l4xx.c **** 
 220:Core/Src/system_stm32l4xx.c ****   /* Reset PLLCFGR register */
 221:Core/Src/system_stm32l4xx.c ****   RCC->PLLCFGR = 0x00001000U;
  53              		.loc 1 221 0
  54 0028 4FF48052 		mov	r2, #4096
  55 002c DA60     		str	r2, [r3, #12]
 222:Core/Src/system_stm32l4xx.c **** 
 223:Core/Src/system_stm32l4xx.c ****   /* Reset HSEBYP bit */
 224:Core/Src/system_stm32l4xx.c ****   RCC->CR &= 0xFFFBFFFFU;
  56              		.loc 1 224 0
  57 002e 1A68     		ldr	r2, [r3]
  58 0030 22F48022 		bic	r2, r2, #262144
  59 0034 1A60     		str	r2, [r3]
 225:Core/Src/system_stm32l4xx.c **** 
 226:Core/Src/system_stm32l4xx.c ****   /* Disable all interrupts */
 227:Core/Src/system_stm32l4xx.c ****   RCC->CIER = 0x00000000U;
ARM GAS  /tmp/ccsBzfL5.s 			page 6


  60              		.loc 1 227 0
  61 0036 9961     		str	r1, [r3, #24]
  62 0038 7047     		bx	lr
  63              	.L3:
  64 003a 00BF     		.align	2
  65              	.L2:
  66 003c 00ED00E0 		.word	-536810240
  67 0040 00100240 		.word	1073876992
  68              		.cfi_endproc
  69              	.LFE132:
  71              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  72              		.align	2
  73              		.global	SystemCoreClockUpdate
  74              		.thumb
  75              		.thumb_func
  77              	SystemCoreClockUpdate:
  78              	.LFB133:
 228:Core/Src/system_stm32l4xx.c **** }
 229:Core/Src/system_stm32l4xx.c **** 
 230:Core/Src/system_stm32l4xx.c **** /**
 231:Core/Src/system_stm32l4xx.c ****   * @brief  Update SystemCoreClock variable according to Clock Register Values.
 232:Core/Src/system_stm32l4xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 233:Core/Src/system_stm32l4xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 234:Core/Src/system_stm32l4xx.c ****   *         other parameters.
 235:Core/Src/system_stm32l4xx.c ****   *
 236:Core/Src/system_stm32l4xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 237:Core/Src/system_stm32l4xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 238:Core/Src/system_stm32l4xx.c ****   *         based on this variable will be incorrect.
 239:Core/Src/system_stm32l4xx.c ****   *
 240:Core/Src/system_stm32l4xx.c ****   * @note   - The system frequency computed by this function is not the real
 241:Core/Src/system_stm32l4xx.c ****   *           frequency in the chip. It is calculated based on the predefined
 242:Core/Src/system_stm32l4xx.c ****   *           constant and the selected clock source:
 243:Core/Src/system_stm32l4xx.c ****   *
 244:Core/Src/system_stm32l4xx.c ****   *           - If SYSCLK source is MSI, SystemCoreClock will contain the MSI_VALUE(*)
 245:Core/Src/system_stm32l4xx.c ****   *
 246:Core/Src/system_stm32l4xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(**)
 247:Core/Src/system_stm32l4xx.c ****   *
 248:Core/Src/system_stm32l4xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(***)
 249:Core/Src/system_stm32l4xx.c ****   *
 250:Core/Src/system_stm32l4xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(***)
 251:Core/Src/system_stm32l4xx.c ****   *             or HSI_VALUE(*) or MSI_VALUE(*) multiplied/divided by the PLL factors.
 252:Core/Src/system_stm32l4xx.c ****   *
 253:Core/Src/system_stm32l4xx.c ****   *         (*) MSI_VALUE is a constant defined in stm32l4xx_hal.h file (default value
 254:Core/Src/system_stm32l4xx.c ****   *             4 MHz) but the real value may vary depending on the variations
 255:Core/Src/system_stm32l4xx.c ****   *             in voltage and temperature.
 256:Core/Src/system_stm32l4xx.c ****   *
 257:Core/Src/system_stm32l4xx.c ****   *         (**) HSI_VALUE is a constant defined in stm32l4xx_hal.h file (default value
 258:Core/Src/system_stm32l4xx.c ****   *              16 MHz) but the real value may vary depending on the variations
 259:Core/Src/system_stm32l4xx.c ****   *              in voltage and temperature.
 260:Core/Src/system_stm32l4xx.c ****   *
 261:Core/Src/system_stm32l4xx.c ****   *         (***) HSE_VALUE is a constant defined in stm32l4xx_hal.h file (default value
 262:Core/Src/system_stm32l4xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 263:Core/Src/system_stm32l4xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 264:Core/Src/system_stm32l4xx.c ****   *              have wrong result.
 265:Core/Src/system_stm32l4xx.c ****   *
 266:Core/Src/system_stm32l4xx.c ****   *         - The result of this function could be not correct when using fractional
 267:Core/Src/system_stm32l4xx.c ****   *           value for HSE crystal.
ARM GAS  /tmp/ccsBzfL5.s 			page 7


 268:Core/Src/system_stm32l4xx.c ****   *
 269:Core/Src/system_stm32l4xx.c ****   * @retval None
 270:Core/Src/system_stm32l4xx.c ****   */
 271:Core/Src/system_stm32l4xx.c **** void SystemCoreClockUpdate(void)
 272:Core/Src/system_stm32l4xx.c **** {
  79              		.loc 1 272 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
 273:Core/Src/system_stm32l4xx.c ****   uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;
 274:Core/Src/system_stm32l4xx.c **** 
 275:Core/Src/system_stm32l4xx.c ****   /* Get MSI Range frequency--------------------------------------------------*/
 276:Core/Src/system_stm32l4xx.c ****   if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
  84              		.loc 1 276 0
  85 0000 2F4B     		ldr	r3, .L19
  86 0002 1B68     		ldr	r3, [r3]
  87 0004 13F0080F 		tst	r3, #8
  88 0008 05D1     		bne	.L5
 277:Core/Src/system_stm32l4xx.c ****   { /* MSISRANGE from RCC_CSR applies */
 278:Core/Src/system_stm32l4xx.c ****     msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
  89              		.loc 1 278 0
  90 000a 2D4B     		ldr	r3, .L19
  91 000c D3F89430 		ldr	r3, [r3, #148]
  92 0010 C3F30323 		ubfx	r3, r3, #8, #4
  93              	.LVL0:
  94 0014 03E0     		b	.L6
  95              	.LVL1:
  96              	.L5:
 279:Core/Src/system_stm32l4xx.c ****   }
 280:Core/Src/system_stm32l4xx.c ****   else
 281:Core/Src/system_stm32l4xx.c ****   { /* MSIRANGE from RCC_CR applies */
 282:Core/Src/system_stm32l4xx.c ****     msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  97              		.loc 1 282 0
  98 0016 2A4B     		ldr	r3, .L19
  99 0018 1B68     		ldr	r3, [r3]
 100 001a C3F30313 		ubfx	r3, r3, #4, #4
 101              	.LVL2:
 102              	.L6:
 283:Core/Src/system_stm32l4xx.c ****   }
 284:Core/Src/system_stm32l4xx.c ****   /*MSI frequency range in HZ*/
 285:Core/Src/system_stm32l4xx.c ****   msirange = MSIRangeTable[msirange];
 103              		.loc 1 285 0
 104 001e 294A     		ldr	r2, .L19+4
 105 0020 52F82320 		ldr	r2, [r2, r3, lsl #2]
 106              	.LVL3:
 286:Core/Src/system_stm32l4xx.c **** 
 287:Core/Src/system_stm32l4xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 288:Core/Src/system_stm32l4xx.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
 107              		.loc 1 288 0
 108 0024 264B     		ldr	r3, .L19
 109 0026 9B68     		ldr	r3, [r3, #8]
 110 0028 03F00C03 		and	r3, r3, #12
 111 002c 0C2B     		cmp	r3, #12
 112 002e 3AD8     		bhi	.L7
 113 0030 DFE803F0 		tbb	[pc, r3]
 114              	.L9:
ARM GAS  /tmp/ccsBzfL5.s 			page 8


 115 0034 07       		.byte	(.L8-.L9)/2
 116 0035 39       		.byte	(.L7-.L9)/2
 117 0036 39       		.byte	(.L7-.L9)/2
 118 0037 39       		.byte	(.L7-.L9)/2
 119 0038 0A       		.byte	(.L10-.L9)/2
 120 0039 39       		.byte	(.L7-.L9)/2
 121 003a 39       		.byte	(.L7-.L9)/2
 122 003b 39       		.byte	(.L7-.L9)/2
 123 003c 0E       		.byte	(.L11-.L9)/2
 124 003d 39       		.byte	(.L7-.L9)/2
 125 003e 39       		.byte	(.L7-.L9)/2
 126 003f 39       		.byte	(.L7-.L9)/2
 127 0040 12       		.byte	(.L12-.L9)/2
 128 0041 00       		.p2align 1
 129              	.L8:
 289:Core/Src/system_stm32l4xx.c ****   {
 290:Core/Src/system_stm32l4xx.c ****     case 0x00:  /* MSI used as system clock source */
 291:Core/Src/system_stm32l4xx.c ****       SystemCoreClock = msirange;
 130              		.loc 1 291 0
 131 0042 214B     		ldr	r3, .L19+8
 132 0044 1A60     		str	r2, [r3]
 292:Core/Src/system_stm32l4xx.c ****       break;
 133              		.loc 1 292 0
 134 0046 30E0     		b	.L13
 135              	.L10:
 293:Core/Src/system_stm32l4xx.c **** 
 294:Core/Src/system_stm32l4xx.c ****     case 0x04:  /* HSI used as system clock source */
 295:Core/Src/system_stm32l4xx.c ****       SystemCoreClock = HSI_VALUE;
 136              		.loc 1 295 0
 137 0048 204A     		ldr	r2, .L19+12
 138              	.LVL4:
 139 004a 1F4B     		ldr	r3, .L19+8
 140 004c 1A60     		str	r2, [r3]
 296:Core/Src/system_stm32l4xx.c ****       break;
 141              		.loc 1 296 0
 142 004e 2CE0     		b	.L13
 143              	.LVL5:
 144              	.L11:
 297:Core/Src/system_stm32l4xx.c **** 
 298:Core/Src/system_stm32l4xx.c ****     case 0x08:  /* HSE used as system clock source */
 299:Core/Src/system_stm32l4xx.c ****       SystemCoreClock = HSE_VALUE;
 145              		.loc 1 299 0
 146 0050 1F4A     		ldr	r2, .L19+16
 147              	.LVL6:
 148 0052 1D4B     		ldr	r3, .L19+8
 149 0054 1A60     		str	r2, [r3]
 300:Core/Src/system_stm32l4xx.c ****       break;
 150              		.loc 1 300 0
 151 0056 28E0     		b	.L13
 152              	.LVL7:
 153              	.L12:
 301:Core/Src/system_stm32l4xx.c **** 
 302:Core/Src/system_stm32l4xx.c ****     case 0x0C:  /* PLL used as system clock  source */
 303:Core/Src/system_stm32l4xx.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
 304:Core/Src/system_stm32l4xx.c ****          SYSCLK = PLL_VCO / PLLR
 305:Core/Src/system_stm32l4xx.c ****          */
 306:Core/Src/system_stm32l4xx.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
ARM GAS  /tmp/ccsBzfL5.s 			page 9


 154              		.loc 1 306 0
 155 0058 1949     		ldr	r1, .L19
 156 005a CB68     		ldr	r3, [r1, #12]
 157 005c 03F00303 		and	r3, r3, #3
 158              	.LVL8:
 307:Core/Src/system_stm32l4xx.c ****       pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 159              		.loc 1 307 0
 160 0060 C968     		ldr	r1, [r1, #12]
 161 0062 C1F30211 		ubfx	r1, r1, #4, #3
 162 0066 0131     		adds	r1, r1, #1
 163              	.LVL9:
 308:Core/Src/system_stm32l4xx.c **** 
 309:Core/Src/system_stm32l4xx.c ****       switch (pllsource)
 164              		.loc 1 309 0
 165 0068 022B     		cmp	r3, #2
 166 006a 02D0     		beq	.L15
 167 006c 032B     		cmp	r3, #3
 168 006e 04D0     		beq	.L16
 169 0070 07E0     		b	.L18
 170              	.L15:
 310:Core/Src/system_stm32l4xx.c ****       {
 311:Core/Src/system_stm32l4xx.c ****         case 0x02:  /* HSI used as PLL clock source */
 312:Core/Src/system_stm32l4xx.c ****           pllvco = (HSI_VALUE / pllm);
 171              		.loc 1 312 0
 172 0072 164A     		ldr	r2, .L19+12
 173              	.LVL10:
 174 0074 B2FBF1F2 		udiv	r2, r2, r1
 175              	.LVL11:
 313:Core/Src/system_stm32l4xx.c ****           break;
 176              		.loc 1 313 0
 177 0078 05E0     		b	.L17
 178              	.LVL12:
 179              	.L16:
 314:Core/Src/system_stm32l4xx.c **** 
 315:Core/Src/system_stm32l4xx.c ****         case 0x03:  /* HSE used as PLL clock source */
 316:Core/Src/system_stm32l4xx.c ****           pllvco = (HSE_VALUE / pllm);
 180              		.loc 1 316 0
 181 007a 154A     		ldr	r2, .L19+16
 182              	.LVL13:
 183 007c B2FBF1F2 		udiv	r2, r2, r1
 184              	.LVL14:
 317:Core/Src/system_stm32l4xx.c ****           break;
 185              		.loc 1 317 0
 186 0080 01E0     		b	.L17
 187              	.LVL15:
 188              	.L18:
 318:Core/Src/system_stm32l4xx.c **** 
 319:Core/Src/system_stm32l4xx.c ****         default:    /* MSI used as PLL clock source */
 320:Core/Src/system_stm32l4xx.c ****           pllvco = (msirange / pllm);
 189              		.loc 1 320 0
 190 0082 B2FBF1F2 		udiv	r2, r2, r1
 191              	.LVL16:
 192              	.L17:
 321:Core/Src/system_stm32l4xx.c ****           break;
 322:Core/Src/system_stm32l4xx.c ****       }
 323:Core/Src/system_stm32l4xx.c ****       pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 193              		.loc 1 323 0
ARM GAS  /tmp/ccsBzfL5.s 			page 10


 194 0086 0E49     		ldr	r1, .L19
 195              	.LVL17:
 196 0088 CB68     		ldr	r3, [r1, #12]
 197              	.LVL18:
 198 008a C3F30623 		ubfx	r3, r3, #8, #7
 199 008e 03FB02F2 		mul	r2, r3, r2
 200              	.LVL19:
 324:Core/Src/system_stm32l4xx.c ****       pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 201              		.loc 1 324 0
 202 0092 CB68     		ldr	r3, [r1, #12]
 203 0094 C3F34163 		ubfx	r3, r3, #25, #2
 204 0098 0133     		adds	r3, r3, #1
 205 009a 5B00     		lsls	r3, r3, #1
 206              	.LVL20:
 325:Core/Src/system_stm32l4xx.c ****       SystemCoreClock = pllvco/pllr;
 207              		.loc 1 325 0
 208 009c B2FBF3F3 		udiv	r3, r2, r3
 209              	.LVL21:
 210 00a0 094A     		ldr	r2, .L19+8
 211              	.LVL22:
 212 00a2 1360     		str	r3, [r2]
 326:Core/Src/system_stm32l4xx.c ****       break;
 213              		.loc 1 326 0
 214 00a4 01E0     		b	.L13
 215              	.LVL23:
 216              	.L7:
 327:Core/Src/system_stm32l4xx.c **** 
 328:Core/Src/system_stm32l4xx.c ****     default:
 329:Core/Src/system_stm32l4xx.c ****       SystemCoreClock = msirange;
 217              		.loc 1 329 0
 218 00a6 084B     		ldr	r3, .L19+8
 219 00a8 1A60     		str	r2, [r3]
 220              	.LVL24:
 221              	.L13:
 330:Core/Src/system_stm32l4xx.c ****       break;
 331:Core/Src/system_stm32l4xx.c ****   }
 332:Core/Src/system_stm32l4xx.c ****   /* Compute HCLK clock frequency --------------------------------------------*/
 333:Core/Src/system_stm32l4xx.c ****   /* Get HCLK prescaler */
 334:Core/Src/system_stm32l4xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 222              		.loc 1 334 0
 223 00aa 054B     		ldr	r3, .L19
 224 00ac 9B68     		ldr	r3, [r3, #8]
 225 00ae C3F30313 		ubfx	r3, r3, #4, #4
 226 00b2 084A     		ldr	r2, .L19+20
 227 00b4 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 228              	.LVL25:
 335:Core/Src/system_stm32l4xx.c ****   /* HCLK clock frequency */
 336:Core/Src/system_stm32l4xx.c ****   SystemCoreClock >>= tmp;
 229              		.loc 1 336 0
 230 00b6 044A     		ldr	r2, .L19+8
 231 00b8 1368     		ldr	r3, [r2]
 232 00ba CB40     		lsrs	r3, r3, r1
 233 00bc 1360     		str	r3, [r2]
 234 00be 7047     		bx	lr
 235              	.L20:
 236              		.align	2
 237              	.L19:
ARM GAS  /tmp/ccsBzfL5.s 			page 11


 238 00c0 00100240 		.word	1073876992
 239 00c4 00000000 		.word	.LANCHOR0
 240 00c8 00000000 		.word	.LANCHOR1
 241 00cc 0024F400 		.word	16000000
 242 00d0 00127A00 		.word	8000000
 243 00d4 00000000 		.word	.LANCHOR2
 244              		.cfi_endproc
 245              	.LFE133:
 247              		.global	MSIRangeTable
 248              		.global	APBPrescTable
 249              		.global	AHBPrescTable
 250              		.global	SystemCoreClock
 251              		.section	.rodata.AHBPrescTable,"a",%progbits
 252              		.align	2
 253              		.set	.LANCHOR2,. + 0
 256              	AHBPrescTable:
 257 0000 00       		.byte	0
 258 0001 00       		.byte	0
 259 0002 00       		.byte	0
 260 0003 00       		.byte	0
 261 0004 00       		.byte	0
 262 0005 00       		.byte	0
 263 0006 00       		.byte	0
 264 0007 00       		.byte	0
 265 0008 01       		.byte	1
 266 0009 02       		.byte	2
 267 000a 03       		.byte	3
 268 000b 04       		.byte	4
 269 000c 06       		.byte	6
 270 000d 07       		.byte	7
 271 000e 08       		.byte	8
 272 000f 09       		.byte	9
 273              		.section	.rodata.APBPrescTable,"a",%progbits
 274              		.align	2
 277              	APBPrescTable:
 278 0000 00       		.byte	0
 279 0001 00       		.byte	0
 280 0002 00       		.byte	0
 281 0003 00       		.byte	0
 282 0004 01       		.byte	1
 283 0005 02       		.byte	2
 284 0006 03       		.byte	3
 285 0007 04       		.byte	4
 286              		.section	.data.SystemCoreClock,"aw",%progbits
 287              		.align	2
 288              		.set	.LANCHOR1,. + 0
 291              	SystemCoreClock:
 292 0000 00093D00 		.word	4000000
 293              		.section	.rodata.MSIRangeTable,"a",%progbits
 294              		.align	2
 295              		.set	.LANCHOR0,. + 0
 298              	MSIRangeTable:
 299 0000 A0860100 		.word	100000
 300 0004 400D0300 		.word	200000
 301 0008 801A0600 		.word	400000
 302 000c 00350C00 		.word	800000
 303 0010 40420F00 		.word	1000000
ARM GAS  /tmp/ccsBzfL5.s 			page 12


 304 0014 80841E00 		.word	2000000
 305 0018 00093D00 		.word	4000000
 306 001c 00127A00 		.word	8000000
 307 0020 0024F400 		.word	16000000
 308 0024 00366E01 		.word	24000000
 309 0028 0048E801 		.word	32000000
 310 002c 006CDC02 		.word	48000000
 311              		.text
 312              	.Letext0:
 313              		.file 2 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_t
 314              		.file 3 "/home/deh/launchpad/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 315              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 316              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l431xx.h"
 317              		.file 6 "Drivers/CMSIS/Include/cmsis_gcc.h"
ARM GAS  /tmp/ccsBzfL5.s 			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32l4xx.c
     /tmp/ccsBzfL5.s:22     .text.SystemInit:00000000 $t
     /tmp/ccsBzfL5.s:27     .text.SystemInit:00000000 SystemInit
     /tmp/ccsBzfL5.s:66     .text.SystemInit:0000003c $d
     /tmp/ccsBzfL5.s:72     .text.SystemCoreClockUpdate:00000000 $t
     /tmp/ccsBzfL5.s:77     .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
     /tmp/ccsBzfL5.s:115    .text.SystemCoreClockUpdate:00000034 $d
     /tmp/ccsBzfL5.s:238    .text.SystemCoreClockUpdate:000000c0 $d
     /tmp/ccsBzfL5.s:298    .rodata.MSIRangeTable:00000000 MSIRangeTable
     /tmp/ccsBzfL5.s:277    .rodata.APBPrescTable:00000000 APBPrescTable
     /tmp/ccsBzfL5.s:256    .rodata.AHBPrescTable:00000000 AHBPrescTable
     /tmp/ccsBzfL5.s:291    .data.SystemCoreClock:00000000 SystemCoreClock
     /tmp/ccsBzfL5.s:252    .rodata.AHBPrescTable:00000000 $d
     /tmp/ccsBzfL5.s:274    .rodata.APBPrescTable:00000000 $d
     /tmp/ccsBzfL5.s:287    .data.SystemCoreClock:00000000 $d
     /tmp/ccsBzfL5.s:294    .rodata.MSIRangeTable:00000000 $d
                     .debug_frame:00000010 $d
     /tmp/ccsBzfL5.s:128    .text.SystemCoreClockUpdate:00000041 $d
     /tmp/ccsBzfL5.s:128    .text.SystemCoreClockUpdate:00000042 $t

NO UNDEFINED SYMBOLS
